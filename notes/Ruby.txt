Ruby issues 
Cross Compiling Ruby for MinGW (32 bit)
  Rake-compiler is no better or worse than my process. 
  I need to point to the includes and libs from the Gtk3 install
--> That picked up iconv and zlib. Still missing dbm, ffi, gdbm, openssl,
  pysch/yaml. There are bin/<x>.dll for those with the Rubyinstaller ruby
  
  Why does the dbm test take so long?

Cross Compiling Ruby for Raspberry pi (raspbian) 
Approach 1
  I have a copy of my ~/.rvm directory on the pi where I have rvm
  build my a ruby (1.9.3-p448). It works well when when building Shoes
  for the pi.
Approach 2
  Ruby is a bitch to cross compile unless you are in a chroot. We aren't
  The gcc triplets are a real mystery for me. My compiler is 
  arm-linux-gnueabihf-gcc and that has to be the --host=arm-linux-gnueabihf
  Anything else is an exercise in frustration. Shoes/Ruby ext's need to 
  go in lib/ruby/1.9.1/arm-linux-gnueabihf.
  
  The ruby that rvm created on the pi? - it uses 'armv6l-linux-eabi' don't
  try to convince the ruby cross compile to use that value. 
  
  I'm using a chroot built with debootstrap with raspbian layout and
  a qemu emulater attached to it. Many things need to be installed
  (apt-get install) to get parity with what rvm had with it was building.
  
  I tried to comment 4 lines in ext/dl/extconf.rb where it tests
  for have_function(dlopen,close...) Those tests can't work because
  of soft links in the chroot. There may be other hidden failures
  in the cross compiled ruby because of that. Or not so hidden.
  That hack doesn't work.
  
  fiddle also requires dl_open testing true. 
  
  I wonder if -I/src/chroot/debrpi/lib added to the flags would get
  around the link problems for /usr/lib/libdl.so  NO. 

  I don't like to giving up, but I'm not going fight it. It's a bitch.
  
Approach 3 

  Since I have qemu running in the chroot and I did an apt-get install of
  ruby1.9.3 -it uses that crappy update-alternatives stucture and is built
  --disable-load-relative. it should still be good enough for building a 
  new ruby.

  In {chroot}, as root,  I copied the ruby tar ball to /opt/src and untared
  it. ./configure runs but it is slow.

  It claims to be 'armv7l-linux-eabi' . Sigh. Whatever. 

  So, I did (as root)
  ./configure --enable-shared --enable-load-relative \
    --disable-install-doc \
    --prefix="/usr/local"
  
  make

  30 slow minutes later, make install

  (debrpi)root@bronco:/opt/src/ruby-1.9.3-p484# which ruby
  /usr/local/bin/ruby
  (debrpi)root@bronco:/opt/src/ruby-1.9.3-p484# ruby -v
  ruby 1.9.3p484 (2013-11-22 revision 43786) [armv7l-linux-eabi]
  
  It works fine with Shoes and if I really wanted to, I schroot in
  and build shoes inside like I do for i386 and X86_64. 
  
  
Cross Compile for MinGW32 
  Build a ruby or copy a ruby? 
  chroot or ? Wine or ?
