GEM Management

I'll use bluecloth gem to debug. It builds on my rvm based ruby. 
and it leaves behind the mkmf.log (Praise the Ruby Gods)
ccoupe@bronco:~/.rvm/gems/ruby-1.9.3-p484/gems/bluecloth-2.2.0/ext$ 
and the first check is
have_func: checking for srand()... -------------------- yes

"gcc -o conftest -I/home/ccoupe/.rvm/rubies/ruby-1.9.3-p484/include/ruby-1.9.1/x
86_64-linux -I/home/ccoupe/.rvm/rubies/ruby-1.9.3-p484/include/ruby-1.9.1/ruby/b
ackward -I/home/ccoupe/.rvm/rubies/ruby-1.9.3-p484/include/ruby-1.9.1 -I.    -DV
ERSION=\"2.0.9\"  -O3 -ggdb -Wall -Wextra -Wno-unused-parameter -Wno-parentheses
 -Wno-long-long -Wno-missing-field-initializers -Wpointer-arith -Wwrite-strings 
-Wdeclaration-after-statement -Wimplicit-function-declaration  -fPIC -I. conftes
t.c  -L. -L/home/ccoupe/.rvm/rubies/ruby-1.9.3-p484/lib -Wl,-R/home/ccoupe/.rvm/
rubies/ruby-1.9.3-p484/lib -L.  -rdynamic -Wl,-export-dynamic     -Wl,-R -Wl,/ho
me/ccoupe/.rvm/rubies/ruby-1.9.3-p484/lib -L/home/ccoupe/.rvm/rubies/ruby-1.9.3-
p484/lib -lruby  -lpthread -lrt -ldl -lcrypt -lm   -lc"

That very first -I is wrong for the cross compile (binary shoes). It's 
an ugly tale how downloaded gems get compiled in Shoes. The story is not
finished yet.

====


If you detect my rethinking about how to handle gems with Shoes, you are
correct. 

Now that shoes/setup.rb can download and build gems (if needed) and the
nice gui seems to work. Do we still need a separate Gem Handler app (the
cobbler in halfbaked/) ? Futhermore, Gems can now include multiple arch 
binaries - Rakecompiler can build them so Windows folks wouldn't have
to have an development setup. 

Sadly, building downloaded gems with C inside just isn't going to work unless
the user has the tools and libs (or they get a gem with the binary inside)
Best that can be done is to detect it and not try to compile.

I needed (or will need) to deal with the rubygems code (aka API)
1. To update the gem version to 2.1.11 from 1.8.23 for Mingw's ruby
   Download the gems tar ball, expand it. cd in and run 'ruby setup.rb 
     --prefix <some empty directory>' . Then go to that directory and
     cd into the lib dir. cp -r * to where the the site-ruby/1.9.1/ that
     you want to update. It works. 
2. To properly update Shoes/setup.rb for it's relatively useless role

3. To spec and develop Shoes Cobbler. 


==== 

In Federales (Shoes 3.2+) we can use gems installed in the system or
rvm as well as the gems in ~/shoes/+gems/ That applies to Linux. Windows
is probably restricted to +gems that were installed by Shoes/setup.rb

Setup.rb is horribly out of date and doesn't work with Ruby 1.9.3 or better.
It does seem possible to restore the functionality of setup.rb if I can
understand what it does with an api that appears to have vanished from the
web memory.  Most of setup is Shoes gui code so ignore most of that for now.
Shoes::Setup.init calls gem_reset which sets up the paths from GEM_DIR, 
GEM_CENTRAL (which were set in cache.rb). init then calls to install 'sources'
if it's not installed. Comment out that line and you can use gem argments
on the shoes command line. So we can cross Gemrunner off the worry list.

So what does 'sources' do? It's a base64 encoded something named 
"sources-0.0.1.gem" which appears to have some leading spaces removed
from each line.  I happen to have a sources gem in my +gem/cache and its
a tar file. with two files inside:
  data.tar.gz
  metadata.gz
unzip doesn't like metadata.gz but tar xf on data.tar reveals a sources.rb
whose simple job is to tell gems that "http://gems.rubyforge.org" is where
to install from.  OK. Do we need that when Ruby 1.9.3+ has gems built in?
I don't think so.

It appears the setup.rb I'm working with may never have worked. It certainly
didn't work with 1.9.3


=== older notes:

 Shoes (cache.rb) stuffs it's gem dirs into the $: env variable. It might
be interesting to contemplate a small (yaml?) file in dist/ that overrides
these settings with the users choice of gemdirs. There is a ~/.shoes and
it does contain +gem and +lib directories where 'shoes -g gem install xxxx'
puts things. It sort of works. Not well, but it works.

It's more confusing. Shoes is pulling libs/gems out of my rvm directories. 
HUH? I only talked about that, I don't remember doing anything about it!
Why isn't shoes self contained? Env Vars? Might explain the multiple
console messages about attempting to set Constants twice with rbconfig.rb
RVM induced love for lost Ruby?

I wrote a Shoes script 'info-startup.rb' that displays/logs the startup
Ruby environment. It works in my Shoes/Ruby-1.9.1 and Shoes/Ruby-1.9.3
and it shows that shoes embedded ruby (1.9.1 or 1.9.3) is finding the rvm
libraries/gems. Fortunately, it's finding the right ones but it shouldn't
be poking around in rvm or system rubys. 

I suspect GEM_PATH and/or PATH is the env var that needs cleaning up in
cache.rb. For my purposes its a feature, not a bug. A feature to enable 
after it's no longer a bug. I can also see how this might be a problem
for cross compiled Shoes (mingw or Pi/armel)

Fixed: set GEM_PATH to GEM_DIR - stops loading gems from rvm rubies. 

Still loading some ruby stuff from rvm dirs.
===>  Right at the top of shoes.rb, the $" list points to rvm so it
   it's something in shell ENV or where ruby looks at init. Well before
   cache.rb can patch/hack things. Can't be fixed by patching shoes
   rbconfig - I think it's compiled in 
   
====> Indeed I tried linking shoes to the dist/libruby.so and it still
  grabs from the .rvm  ruby. Need to build my own ruby. 
====> See CrossCompiling.txt
   
====> Rakefile uses rbconfig settings for linking against the installed
  ruby instead of the target ruby.
 


Want to get rid of the shoes/setup.rb stuff for gems eventually and
manage the gems with a purpose build shoes app.

Fixed: Someone loads shy.rb - shoes.rb is a little too agressive. 
  Minor problem unless your cpu/disk is really slow. Still it ought
  not to. 

There is no Ruby versioning for ~/.shoes/gem+ For example Shoes will
try to load serialport.so and whine about libruby1.8. As it should.


  shoes/setup.rb also requires rubygems and rubygems/dependecies-installer
one or both of those includes rbconfig and I don't want that.
