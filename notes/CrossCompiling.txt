Cross Compiling Shoes and neccesary libs.

2014-01-06 MinGW
    Once again, I need to choose between elegant and easier. schroot 
    really does work well for Linux. You can find instructions on the
    net for setting up a chroot for Windows cross compiling. It's not
    that easy and I'm not sure it's maintainable. Not sure it isn't.
    
    The easy way is to try using rake-compiler to build the Windows ruby
    (and convince it to load-relative). I can download the Gtk3 bundle
    which includes most of the .dll that shoes wants and it's only a 
    small matter of blood, sweat and tear to create the Shoes make/env.rb
    and task.rb. Right?
    
    And then there is curl.
    
    unzip gtk+-bundle_3.6.4-20130921_win32.zip in /srv/chroot/mingw32
    Oh Crap. That didn't take long.  Check the Readme.
    pkg-config needs cleaning in the shoes build.  Sigh.
    WTF is this module path and cache stuff? Must consult the internet.
    http://www.tarnyko.net/en/?q=node/45
    OK. that sed script is going to walk over the ruby I built (might be
    ok and I need to rebuild it anyway) and the win7 stuff I copied. Move
    them to /home/cross/xmingw32 in case I need them. I'd rather get good
    with Gtk3 first. 
    
    ccoupe@bronco:/srv/chroot/mingw32$ find -name '*.pc' | while read pc; do sed -e "s@^prefix=.*@prefix=$PWD@" -i "$pc"; done
    ccoupe@bronco:/srv/chroot/mingw32$ PKG_CONFIG_PATH=/srv/chroot/mingw32/lib/pkgconfig/


2014-01-04 Mingw - The madness begins.

Ubuntu installed mingw cross compilers are mingw-64 (gcc-4.6.3??)
  Two triplets for the host system (what we compile for)
    i686-w64-mingw32 for binaries built to run on 32-bit Windows platforms.
    x86_64-w64-mingw32 for binaries built to run on 64-bit Windows platforms. 
    
export CC=i686-w64-mingw32-gcc
./configure --enable-shared --enable-load-relative \
  --disable-install-doc \
  --build=x86_64-linux-gnu \
  --host=i686-w64-mingw32 \
  --prefix="/srv/chroot/mingw32/usr/local"
  
That works reasonably well. Need some dependencies:
  curses - expected, don't care
  dbm
  ffi
  gdbm
  iconv
  openssl
  libyaml
  readline - expected, don't care
  syslog -     "    "    "
  Tcl/tk -     "    "     "
  zlib
  
Some of these could be copied from the Win7 VM msys/rubyintaller. 
Get the .h and libs in the proper place for ruby.
Defer decision until I get the gtk+-2/3 libs installed. 

REMEMBER: in windows, .dll are in bin/ but you link against lib/ or .defs
or both. 




For raspberry chroot
(debrpi) $ source ./setup-debrpi 
==>EDIT to get the PATH correct.

I'm going to experiment with chroot for the debian 32 bit build.

OK. It's a bit confusing. At /srv/chroot/deb386 is the debian install
and I can log into with a 'schroot -c deb386'. Add a -u root if thats what
you need or you can login as yourself and su. You'd have to install and 
configure sudo. Once inside, I did 'apt-get install build-essential'
and it downloaded it and installed it in the chroot. Gcc-4.7.x and friends
- it could run the configure script for Ruby which requires a working 
compiler to complete.  That bit of magic won't work if the chroot was
for the raspberry pi 

The /home/* directories are available so I could cd to shoes3.2 and try the
rake.  Doesn't work, because I don't have ruby installed. I could install
it with apt-get or rvm (please don't do that to a shared ~/.rvm ). 
Or I could build ruby from within my chroot and install it to the chroot.

Then install all the shoes deps on the debian chroot and (still) within the 
chroot, invoke rake and build a tight shoes or a loose shoes. Need
to modify the rakefiles of course since I don't want tight (dist/) confused
That's the plan.

When it gets to different archs like armv6-pi and mingw then I'll need
to install the X86_64 versions of the compiler toolchains into their chroots

For deb386 chroot (and debx86 too)
==> Install the deps Shoes wants (as root)
    apt-get install libcairo2-dev libpixman-1-dev libpango1.0-dev \
    libgif-dev libjpeg-dev libgtk2.0-dev \
    libxslt1-dev makeself libxslt-dev libxml2-dev \
    libungif4-dev libyaml-dev build-essential
    
    H/T to https://gist.github.com/plexus/4194d8c47e9493019e04. Modified
    to not include vlc, portaudio, sqlite, curl and a few other things. 
    
==> Don't install curl or libcurl-openssl-dev  with apt-get
    Remove them if you did. Build your own minimialist curl.
    libcurl3-gnutls may sneak in (git). Remove it.  Look below to
    see how I build ruby, do that for curl. Review the build summary
    before make install. Perhaps set the prefix to /usr and try again.
    Verify that libcurl.so.4 and links are in /usr/lib
    
==> Build and install ruby in the chroot. We're are still in the chroot. 
    I have a ruby tar ball at /home/cross/downloads. Since it's in /home
    I can copy it to the chroot to  /opt/src. 
    # mkdir -p /opt/src
    # cd /opt/src
    # cp /home/cross/downloads/ruby-1.9.3-p484.tar.gz .
    # tar -zxf ruby-1.9.3-p484.tar.gz
    I like to create a script to do the ruby configure and then from 
    inside the ruby dir. I create a soft link to that and run it from the
    ruby dir. So in /opt/src I create cjc-ruby-cfg.sh. cjc being my initials
    The contents are: 
#! /bin/bash
# copy this to the ruby dir or soft link it.
# execute it instead of ./configure
./configure --enable-shared --enable-load-relative \
  --disable-install-doc
  
    then cd into it and create a link to the script one level up.
    (deb386)root@bronco:/opt/src/ruby-1.9.3-p484# ln -s ../cjc-ruby-cfg.sh .
    (deb386)root@bronco:/opt/src/ruby-1.9.3-p484# ./cjc-ruby-cfg.sh
    (deb386)root@bronco:/opt/src/ruby-1.9.3-p484# make
    
  If you can ignore the compiler warnings w/o stress, then 'make install'
  and you'll end up with ruby binaries in /usr/local/bin and the shoes
  relevant stuff in /usr/local/lib (both being relative to the chroot). 
  Of course you could modify the ruby configure script to put them where
  you want - but /usr/local/bin is in the default chroot path. It doesn't
  matter that much as long as you know where the lib/ is and set the Shoes 
  rakefiles appropriately.
  
  Exit from the chroot shell and get back in as your normal user.
  
ccoupe@bronco:~$ schroot -c deb386 -u ccoupe
(deb386)ccoupe@bronco:~$ ruby -e 'p RUBY_PLATFORM'
-bash: /home/ccoupe/.rvm/rubies/ruby-1.9.3-p484/bin/ruby: No such file or directory

Oops. Is it a path problem? Yes:

(deb386)ccoupe@bronco:~$ /usr/local/bin/ruby -e 'p RUBY_PLATFORM'
"i686-linux"


Back out of the chroot shell. Get Back to sanity and your regular 
login terminal and shell. 

ccoupe@bronco:~$ ruby -v
ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-linux]
ccoupe@bronco:~$ /srv/chroot/deb386/usr/bin/gcc-4.7 -v
Using built-in specs.
COLLECT_GCC=/srv/chroot/deb386/usr/bin/gcc-4.7 .......

From within the schroot
  set the PATH to something simple to remove the rvm. Allow X11 apps
  export PATH=:/usr/local/bin/:/usr/bin:/bin
  export DISPLAY=:0.0
(deb386)ccoupe@bronco:~/Projects/shoes3.2$ ruby -v
ruby 1.9.3p484 (2013-11-22 revision 43786) [i686-linux]

  I can build shoes with the default (loose shoes). It runs too! Until the
  jailbroken shoes script grabs a 64 bit gem. That is the correct behavior
  samples/simple-chipmonk.rb breaks something though. 
  
  Ruby does complain that psych is missing - install libyaml
  libyaml is not an apt-get package but libyaml-dev is. Be inside shcroot.
Done:  Add /usr/lib/i386-linux-gnu/libyaml-0.so.2 to the files to copy
  
Done: Modify the rakefiles to build Tight Shoes, copying all the dep libs
  libruby. This should be run in the chroot. Or build a compiler.


=== Sort of Failed Stuff Below ===

If you are on a 64 bit debian/ubuntu system and want to build 32 bit apps
then you need to load the multi-arch stuff and even then you may have
to try something like 'sudo apt-get install libgif-dev:i386' because
synaptic doesn't show it. But it's there.

Be very careful with apt-get (or read the warnings and think). It took
me some time to get what I wanted for 32 and 64 (undoing some damn
portaudio induced misbehaviour from a month or two back)
Useful hint you can put the :i386 suffix 
  apt-get install libcurl4-openssl-dev:i386
  
I had to create soft links in /usr/lib/i386-linux-gnu for the gtk related
libraries that don't have a simple .so. I'm not proud about that. Or it's 
an Ubuntu bug or I don't know what I'm doing. It links and it *ought* to
run on the target. He thinks.

  sudo ln -s libgtk-x11-2.0.so.0 libgtk-x11-2.0.so
  sudo ln -s libgdk-x11-2.0.so.0 libgdk-x11-2.0.so
  sudo ln -s libatk-1.0.so.0 libatk-1.0.so
  sudo ln -s libgio-2.0.so.0 libgio-2.0.so
  sudo ln -s libpangoft2-1.0.so.0 libpangoft2-1.0.so
  sudo ln -s libpangocairo-1.0.so.0 libpangocairo-1.0.so
  sudo ln -s libgdk_pixbuf-2.0.so.0 libgdk_pixbuf-2.0.so
  sudo ln -s libcairo.so.2 libcairo.so
  sudo ln -s libpango-1.0.so.0 libpango-1.0.so
  sudo ln -s libfreetype.so.6 libfreetype.so
  sudo ln -s libfontconfig.so.1 libfontconfig.so
  sudo ln -s libgobject-2.0.so.0 libgobject-2.0.so
  
More fun, libglib lives in /lib/i386-linux-gnu. 'cd' there.
  sudo ln -s libglib-2.0.so.0 libglib-2.0.so
  
FIXED? I don't know if that is correct or not. See Bugs.txt
  Two days later:
  After removing all the traces of i386 on the system, those dumb symlinks
  need to be removed. I knew it was wrong headed but I did it anyway.

  
  
Fixed? I need to convince Ruby ./configure to build a cross compiled
   version of Ruby even though the it's x86_64 -> x86_64.  Pay ATTENTION
   the gcc compiler can compile for both and if multi-arch is working I
   can run the 32 bit compiler to create the 64 bit Ruby. Or vice versa.
   As long as the Ruby config scripts thinks they are different, then 
   I get the cross compiled version of Ruby for my 64 bit arch.
   
   GNU-speak --host Is what you're going to create for. --build is what you
   compile with. This trickery wouldn't work if you had a 32 bit system.
   Make no mistake, the Ruby build process is much different if its for
   a cross compiled ruby - much faster for one. 
   
   Does it work?
   

Compiling Loose Shoes for Pi on Pi (a way bit slow)
==> make/linux/env.rb has some ruby-1.9.pc and I want ruby-2.0.pc
==> need to install on pi and then copy to Bronco@/home/cross/armv6-pi
    sudo apt-get install libcurl4-openssl-dev 
    see http://stackoverflow.com/questions/20176883/how-to-install-pil-with-jpeg-support-on-a-raspberry-pi
==> libjpeg may have to be built from source so that would really be a
    Tight Shoes config or a debian dependence on loose shoes.
    so I need to cross compile that
==> sudo apt-get install libjpeg-dev 
	   the pkg-config needs to added to the build
==> sudo apt-get install libgif-dev
       need the pkg-config
       
    Shoes kind of works. Splash screen OK. 
==> Asking for the manual gets an invalid byte sequence for US-ASCII
    info-startup.rb fails for not having the hpricot gem. Because it's 
    not installed, it should fail. 

    raspberrypi$ gem install hpricot works (slowly), Rdoc/ri complains
    about two ASCII-8bit conversions. Hello. Recognize this?
    
==> info-startup.rb takes the entire screen. pi issue? gtk3? 
    other samples/seem to be OK (ignoring known GTK3) bugs.
==> Old Icon in sample/simple-bounce
==> sample/simple-draw is painfully slow

    Fall back to Gtk2 on Pi
==> sudo apt-get install libgtk2.0-dev
    a dependency for deb pkg
    
    Compile with ruby 1.9.3. Using gtk2
    Still slow for simple-draw
==> Simple-download fails 'request-uri' - Fails ubuntu too - loose shoes?

==> on pie, Lxterminal, rvm doesn't work

    
    

Really should cross compile ruby for the target. Ruby 1.9.3 automatically
includes 'rbconfig' and inits gems unless told not to. Furthermore it 
compiles in the path to rbconfig a

First, all shoes dependent libs and sources will be in /home/cross
  /home/cross/downloads has the tarballs and zips downloaded 
  The there will be in architecture specific subdirs.
   /home/cross/x86_64-linux/usr/, lib/, src/
   /home/cross/armv6-pi/lib/,r/
   /home/cross/mingw32/lib/ and src/
   
 Those lib/ are likely to be the destination for a 'make install'
 
 Note that the lib binaries could be soft links (for x86_64) or copied 
 from a target or nfs mounted (raspberry pi).
 
 Can I dummy up a working pkg-config for each of these?
 
 The shoes rakefiles need some serious work to be prettier about this
 but for the first attempt (x86_64-linux) there is a EXT_RUBY var in the
 Rakefiles I can set and I already have a pre_build rake task to copy
 from there to dist/.. before linking.
 
 Set up ruby close to what rvm does.
 Can I use rvm to install the special ruby? 
 Can I borrow from RubyInstaller and Rakecompiler
 
=== compiling ruby ==
It's hard to figure out what ./configure likes
it doesn't like --prefix=../../ relative paths. Foo! I need to trigger
cross compiling detection so it. Or something.

--target= and --host=
  x86_64-unknown-linux-gnu
  i686-mingw32

FIXED: I created a cjc-ruby-cfg.sh script that calls ./configure with the
setup I think is needed:
#! /bin/bash
# copy this to the ruby dir or soft link it.
# execute it instead of ./configure
./configure --enable-shared --enable-load-relative \
  --disable-install-doc \
  --prefix=/home/cross/x86_64-linux
Oddly or not so oddly, I now need to "require 'rbconfig'" right at the
top of shoes.rb. It make sense, since I told the ruby not to auto 
include it. I'm OK with that as long as I know that I control it.
It also fixes the complaints on the terminal except for:

FIXED: Now complaining before shoes.rb starts
$ dist/shoes info-startup.rb 
<internal:gem_prelude>:1:in `require': cannot load such file -- rubygems.rb (LoadError)
	from <internal:gem_prelude>:1:in `<compiled>'
Added  --disable-rubygems to cjc-ruby-cfg.sh. I'm grinning ear to ear!

===> Still needs to build rbconfig properly. Also needs to get LDFLAGS
from there (and pkg-config in /home/cross/x86_64-linux)

FIXED: Get rid of the cruft from 1.8.7 and 1.9.1 (mostly extconf.rb) but
there's some C code in shoes/*.[ch]. I switched from #ifdef RUBY_1_9
to #ifndef RUBY_1_8. (1) We don't care about 1.8.7, so (2) we don't 
need to set -DRUBY_1_9 in the rake and make files (doesn't hurt if you
do have them) and (3) it won't blow up when we get to Ruby 2.x

==== better rakefiles ===

  See Distribution.txt
  
FIXED  Do I need different shoes.rb and cache.rb for Loose Shoes and 
  Tight Shoes? Shoe::RELEASE_TYPE 
FIXED  current make/make.rb, make/linux/env.rb and tasks.rb copied to 
  make/x86_64-linux/env.rb and tasks.rb. Tweak Rakefile to deal with
  setup:x86_64-linux and then build,installer, etc tasks. 

FIXED Undo do cross compile changes to make/linux and then tweak to
   compile and link against host (rbconfig) targets and don't copy
   system libs around. Loose Shoes does this.
  
