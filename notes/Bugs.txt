Bugs/Status - stick with Ruby 2.0.0 and gtk2 until things get sorted
  out with GKt3

2014-01-14 -  Items to mention for 3.2.20
done: Ian fixed issue #15
done: Ian added a "Copy this" to the manual
done: Ian fixed issue #27
done: Clean up Rakefile, remove things that no longer matter to 3.2
      Can build on 10.6 (and w/o sqlite3 it will run on 10.6 up to 10.10)
      
2014-01-13
      much discussion about Shoes is not Ruby - the shifting 'self'
      
2014-01-12 Bug013
done: Gtk use GDK_SELECTION_CLIPBOARD in place of GDK_SELECTION_PRIMARY
      Fixes bug 013


2016-01-11
-----> Sqllite3 crash on OSX 9+ with 10.6 Shoes.
  
2016-01-10
Fixed: Weekly build failures:
       x86_64-linux failed.
       Mavericks - ruby is throwing a SSL_V2 hissy fit. old brew, ruby,?
       http://stackoverflow.com/questions/25492787/ruby-bundle-symbol-not-found-sslv2-client-method-loaderror
        
2015-01-09
      removed most of the osx stuff from Rakefile
----> Loose Shoes (darwin) doesn't work - copies more than needed.
  
2015-01-08
----> Issue invite to Ian to join Shoes4
done: get rake files to Build Shoes on 10.6
      test on 10.6 - runs
      test on 10.9.  libz issue. Fixed. Runs.
done: move my snowleopard make/ to xsnow and and Ians to snowleopard
----> add sqlite3 to the 10.6 build
done: move loose shoes osx build code from Rakefile to darwin/env & task
done: get rid of homebrew.rb and some old stuff in /make/darwin
  
2015-10-07 
done:  pango dir structure created wrong.
----> sqlite3 - there's one in Cellar, and one in SDK 10.6, /usr/lib 
        which one did extconf/install name tool compile, link with?
----> attempt to remove sqlite3 from 10.6 build. Failing.
----> rake package 'strip -x' says it will invalidate code signatures
----> two arches in some libs -  x86_64 and i386 wasteful, required?
done: When my 10.6 runs on 10.9: Cobbler/Packager selection from splash
      Gets an SSL error (Cobbler.rb:204)
  
2015-01-06
     Still need to fix panqo modules.
  
2015-01-05
====> Time to redo the osx:namespace in Rakefile and go back to the 
      Builder style for every Tight Shoes target and Loose Shoes build.
====> (re)Write darwin/* files for Loose Shoes.
done: snowleopard target uses the correct Cellar for compiling.
done: snowleopard target needs to use the correct Cellar for linking.
      fontconfig - which version /opt/X11 (no), SDK 10.6 framework?. brew? which brew?
      Applies to cairo and pango. 

  
2015-01-04
     10.9 compiling for 10.6 almost works. committed env.rb and tasks.rb
     even though they are incomplete.
  
2015-01-03
     Nothing useful happened

2015-01-02
     Much futzing with OSX 10.6 VM's.
     Build libz on 10.6 and 10.10
     Rebuild Ruby on 10.6 and 10.10 to use that libz
     Tar up 10.6 /usr/local/* and untar somewhere in 10.9
     Fix Snow rake files to handle 10.6 native or my 10.6 in 10.9
  
2014-12-30
    darwind.iso is a command line boot installer. easier than iboot
    osx 10.6 problem appears to be a bad .dmg. downloading 10.6.3 .iso
    In my case, I have to use iboot-ivy and Easybeast doesn't work (yet)
  
2014-12-29
----> Shoes manual, edit_box does not explicitly mention that Styles apply
     and Styles doesn't mention state: => enable, disable, readonly
done: remove Shoes/Wine menus. 
  
2014-12-28
     helping Ian with icon testing.
     Reference to Apple icns and other high rez screens handling. 
     https://developer.apple.com/library/mac/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Optimizing/Optimizing.html
     OSX icons are 16, 32, 128, 256, 512 (+ @x2 for 144 dpi) Max 10 icons.
     Write a wiki page about creating icons.
     It's one more reason not to implement Shoes on 10.6.
     
2014-12-26 
     discussion about moving shoes3 back to Shoes org.
     wiki mods
     updated raspbian. not happy with the new window manager, not a shoes issue
     but it's difficult to test if you can't run any thing.
     
done: Start 3.2.20
----> icons for full pack (can be) different from custom install icons.
        for full pack, replace app-icon in the outgoing build.
     
  
2014-12-25 Wiki mods
done: modify blog links for shoes3/shoes
done: outline for wiki
done: wrote a bunch of intermediate level doc.

2014-12-24
done: release 3.2.19. Just fixes the long string bug NSIS.
done: update shoesrb and issue pull
----  delete useless stuff (usedeps, deps) move the icons elsewhere
  
2014-12-23
done: Transfered ccoupe/shoes to Shoes3/shoes
done: test auto redirect
done: modify my local git/shoes to link to  https://github.com/Shoes3/shoes.git
----> need to re-enter username and pass word after git remote set-url
----> ccoupe/shoesrb is tied up with gitub.io and jeykl and github pages
        keep this under ccoupe for now
----> modify blog links for shoes3/shoes
done: modify README.md for shoes3/shoes
----> modify wiki articles for shoes3/shoes
----> modify shoes manual for shoes3/shoes
  
2014-12-22 
done: delete empty Shoes3 repo. 
done: add some detail to Shoes 3 org account 
     Transfer shoesrb repo from ccoupe/shoesrb to org Shoes3 (a test)
done: Then xfer ccoupe/shoes
     
  
2014-12-21
     The Tooth Fairy left me a 10.6.3 dvd .img Yea!
     
     Github. 
       Convert github://ccoupe/shoes to org  Shoes3 
       repo is still ccoupe/shoes

2014-12-20
      give up on the chroot. For now.
  
2014-12-19 
     setup a chroot for 10.6 brew install, ruby building

2014-12-18
     Ian says to configure zlib with both architectures. Would that fix
     the install_name_tool problem? The ssl exception?
     So far, no but I can't compile arch 'ppc' Has bundle format changed 
     since 10.6 and otool and install_name_tool so that 10.9 can't handle
     10.6 bundles?
  
2014-12-17 Still working on the 10.6
     My xsnow task.rb needs to fix up (install-name-tool) /usr/lib/libz*
     to point ruby's bundles (openssl, zlib) to  @executable_path/ 
     It's not changing any the bundles. Says it is, but it's not. Manual
     runnomg install_name_tool doesn't solve the openssl error. 
     
     Nothing is copying the /usr/local/opt/opensll/engines/ dylibs and 
     fixing them. This Should be a problem for all OSX.  It works because
===>  of /usr/lib/libssl.dylib.  Do I need brew openssl for 10.9, 10.6?
      My rvm ruby 2.1.2 does depend on the /usr/local/opt/openssl/lib/*.dylibs
      
      I need a copy of Ian's /usr/local[opt|bin|lib|etc] or I convince
      brew to have two Cellars. Or I don't support 10.6. I don't have Ian's
      ruby.
      
====> openssl/engines/dylib is still a problem (that nobody knows about)
====> rewrite issues with OSX mavericks. It doesn't change the Shoe      
     
     
  
2014-12-16 
      Ian's OSX 10.6 is very very close. 
      We both compiled zlib 1.2.8. because his libpng16.16 needed a newer libz
      that shoes/OSX 10.6 provideds (didn't include until now).
      Mine has an odd problem - when running Cobbler it throws and ssl 
      exception. - Related to not linking openssl with libz? 
  
2014-12-15
      Add BREWOCS to xsnow/env.rb points to ~/deps/10.6/
      Ian had to add 8 X11 related libs to 
  
2014-12-14
done: Produced a build for OSX 10.6. It runs on my 10.10
done: Use -DOLD_OSX 
----> Consider 10.6 as new platform target? Would need set of makefiles
      and some tweaks (he says) to the packaging code. 
====> pango-querymodues (and all of the homebrew deps) needs to be built
      for 10.6 (snow leopard) and kept separate from 10.9 OR I COULD copy
      Ian's and fix them up (already done as part of the build)
====> create rakefile target osx:setup:snow and rakefiles in make/xsnow
====> Just need to build the homebrew deps and Ruby with 10.6 frameworks 
      and cross coompile. 

2014-12-13
done: build osx with Ians copy of 10.6 sdk. Shoes fails when starting.
  
2014-12-11
done: build nsis from ubuntu repo, add long string. recipe:
      https://community.openvpn.net/openvpn/wiki/%3ABuildingMakeNSIS
      Install new and test. Hold/Lock package to prevent updates
      
----> Write a how to use icons and advanced packager wiki article.
      
  
2014-12-10
done: osx expandshy -  don't run or run from installer
done: osx don't expandshy - don't run or run from installer
      Custom icon on the ytm[-custom]-osx.app
done: dnlif -  advopts + icons, no advopts (Shoes icon)
----> repack - advopts + icons, no advopts - 
---->   Be careful to not confuse ourselves.
        We still share ~/.shoes/ and gems with any other Shoes app
      Dragons ahead for those who use this option.
====> Don't have  /home/ccoupe/.shoes/federales/package/shoes-3.2.19-osx.tgz ??

====> Make a better .icns for OSX ( include mutiple sizes 256x256x32 and..

     
RULES: Always have .png icon in your directory to be packaged. 
     
2014-12-09
     xdg-desktop-menu install --novendor ytm.desktop exists in ubuntu, 
     suse/xfce, fedora, Pi. if called w/o root it installs in users menus
     this needs testing and modify the Shoes.install template. In fact
     there is a suite of xdg tools for icons(suites) , creating menus categories
     and so on.
---->  Linux - Build a menu system similar to Windows with uninstall ?
done:  Building Linux shoes x86_64, i686, pi  - tasks.rb make_install_script()
       Debian 7.2 required a logout/login to see the menu entries.
       ytm-custom-x86_64 works on Fedora. Good luck finding Shoes. I hate
       that search interface of Fedora. 
done:  Also in Loose Shoes Linux aka rake install
  
2014-12-08 
     The problem may be the ytm.ico is a 32 bit 128 x 128 not 8 bit, multi
     sizes .ico. Redo icon (don't use completely transparent background)
     
     Online ico converters have issues creating 8 bit icons?
     
done: When creating ytm-custom.exe (the ytm installer) it should have the
     ytm.ico.  Gimp 128x182x8 ico works. 
done: Not displayed on installer title bar. Windows Caching - grrr.
----> expandshy=true and running Applications/ytm/ytm.exe seems to be
     not using the Applications/ytm/ytm.rb but something in the temp dir.
----> Taskbar icons are Shoes federales not ytm.exe (installer or generated)
     Which suggests that the winject inject_icons is not replacing what 
     Windows thinks is needed. ID # hard coded into shoes-stub.exe?
====> anal_pe seg faults on exe's that are winjected with icons. 

     Linux Custom icon Works well on Raspberry so it's not all wrong. 
done: i686 (debian 7.2) doesn't like gksudo. (icons may be good)
done: x86_64 - Suse/XFCE - no gksudo. Icons (so far, are good)
done: Fedora - no graphical sudo at all. 

     
     
2014-12-07
     use app.set_window_title - in Shoes.app {block} and subclass of Shoes.app
---->ytm-custom.exe appears to work but Applications/ytm/ytm.exe doesn't have
     getwd set to launch dir. 
====> Known Windows problem - For any Shoes app.
----> need ico inject for Windows to stick. 
  
2014-12-04
done: shy expand/don't expand works in custom installer
done: set_windows_title can hang the whole Linux system -- power off 
      when subclassing Shoes (myclass < Shoes) use app.set_window_title
      and app.window_set_icon_path. Works for Shoes.app {} and subclassing

  
2014-12-03 Default custom installer.  
      Tighten up app_package gui. 
done: Extract contents is an option. It needs written to {appname}.yaml
      and included in the outer shy along with the icons. 
done: Use HOME/Applications not Documents
done: app-install.tmpl use the icon and title facilities. Read the yaml
done: fix eval() and .desktop when expandshy is false


     Linux: it runs after shoes is installed. It should set the icon and
       title of it's installer screen. 
       It could copy  ~/.shoes/federales
       to the users chosen directory and fix up the icons etc
       Execept Gems will be shared and .shoes/federales is probably hardcoded
       (effectively). Same with OSX. No point in making a copy of Shoes.
       
     OSX: Need to copy the icon, generate the plists and shell scripts.
     
     Windows: it should copy shoes to the user chosen directory
     
done: Document default custom installer at the blog.
  
2014-12-02
     write/rename shoes_app_set_icon_path, and shoes_app_set_wtitle
     and the native's. Don't try to reuse the existing get/set title
     because that works weirdly from shoes_app_open)
done: Linux, Windows works fine.
done: OSX - write the shoes_native_set_icon_path and shoes_native_set_wtitle
---->  doesn't change the Finders display. 
     It's far from perfect (linux, osx, windows). It was never intended to be.
  
2014-12-01
      Shoes.app.set_icon works on raspberry pi theme & windows. Not Cinammon.
done: reimplement. Lost in git checkout;
done: shoes_app_set_title() - Shoes.app.name = "string" on gtk doesn't change the window
      and throws a error (all platforms) 0 args expecting 1..3
      BECAUSE its a hash arg to Shoes.app do :title => "Foobaz App".
       
  
2014-11-30
done: Linux app packager. It's good enough for now and better than the 
      marching ants.
done: It is possible for Shoes/Gtk to load app-icon from the app dir
      instead of the shoes dir - need an Shoes C/Ruby function to do it.
      Shoes::APP::set_icon(filepath.png)
      Gtk has a fallback (set by Shoes in world.c/gtk.c) provide a Shoes/Ruby
      way to call it. In ruby.c:
        rb_define_method(cApp, "icon=", CASTHOOK(shoes_app_set_icon), 1); # New in 3.2.19
        which calls shoes_native_app_set_icon (need implementations in gtk.c, cocoa.m)
     Success depends on the gtk theme?!
----> Check with Shoes4 folk about how they would do it.
  
2014-11-28
done: So close for Linux. Rewrite in packshoes replaces #{xx} with nothing
     if xx doesn't match. When copying app-install.tmpl that's an error.
done: Loose shoes linux doesn't copy exerb on 'install' task.
done: download and install shoe then run the app install.

  
2014-11-27
     app-install.tmpl needs to check for icons and do the right thing
     Linux, OSX, Windows.
done: not expanding the desired shy. Actually it is but the ytm.shy is 
     not what I think - it's the double shy.  Testing problem because
     I rewrite the original ytm.shy - don't do that.
---> how deep do I want to do the icon? - replace the one in shoes
      requires copying shoes (or symlink something) in Linux. So it's a
      lot like hackety hack packaging. 
===> the custom installer needs a rethink. Could this be done better when
     packaging instead of much later. NSIS problem. 
done Linux launch and desktop icon
  
2014-11-26 
done: Add icon chosing code to app_packager GUI.
done: create icons for ytm. for testing advanced packaging.
done: Create a ytm.shy with all the files inside.

  
2014-11-25 
done: icons_inject_from(iconf_path) in winject.rb works well enough for now

2014-11-24 replacing icons with exerb
      exerb throws away/mods info reading in a iconfile. 
      define a pack method for IconFile::Entry? 
      
2014-11-23
done: Commit Ian's patch for gtk.c - 

----- start 3.2.19
  
2014-11-20
done: OSX dlnif, test.rb OK, GUI OK.
done: OSX repack test.rb Ok, GUI OK
      repack Does not install shoes to /Applications (like linux)
done: 3.2.18 released.
  
2014-11-19
done: test.rb and gui packager for windows.
done: test.rb for linux dnlif - OK gui
done: test.rb for linux repack (full)
      it doesn't install shoes to ~/.shoes/federales.
--->  Note this in docs

----> Cobbler could have a "check updates" button. On the get info page?
      More effort than I want for 3.2.18. Still a good idea. especially
      if it could download and install the new release. 
====> Document Cobbler in the Shoes Wiki
----> Document packaging in the Shoes Wiki. Still needs work.

2014-11-18
     refactor app_package.rb. @options{} has everything. Move non
     gui code to Module PackShoes
done: Windows - full pack starts download, hangs, Cancel, Instals OK
      silly error in test.rb 
done: Linux
      test.rb dnlif
done: OSX
  
2014-11-14
done: building shoes.exe and cshoes.exe (w and w/o -mwindows)
      Works pretty well.  'cshoes.exe --ruby ' works!
done: QUIT_ALERT and QUIT_ALERT_MSG from ruby.h to the single
      place its invoked - world.c

2014-11-13
done: implement, test, commit Ian's tmpdir fix.
done: comment debug message in Shy loading.
done: install RubyInstaller 2.1.4 (32) and devkit (32)
done: raise SystemExit "message"  is used to write to the console
      for  (all platforms). Use fprint(stderr ...) for QUIT_ALERT_MSG in
      ruby.h
 
2014-11-11
----> I'm not sure the extra packaging step is worth the effort.
      Don't delete the code. Comment out for now. 
  
2014-11-10
----> try replacing icons with exerb. Projects/petest/iconcopy.rb
     Not as easy as I hoped. 
  
2014-11-09
done: Mock up a second level installer that saves the shy contents in
      User space. Needs work. It's ugly. 
     
2014-11-08
done: Fixed bug for Linux packaging (full)
done: Call custom_installer from dnlif, repack - 6 places in app_package.rb
----> Test - do no harm if advanced is not selected.
 
2014-11-07
----> Figure out jekyll and shoesrb/.
----> add user and password to github config for shoesrb/
Done: cache.rb Use ENV[LOCALAPPDATA] instead of [HOME/.shoes
      OK on windows and linux.
done: Full packaging for Linux never completes - single script
done: ML post about 3.2.17


     What could be in 3.2.18 ?
done: use LOCALAPPDATA to place .shoes/ .gems/ in APPDATA for Windows.
     - add the finish proc to OSX edit_line (properly this time)
     - gtk2 themes for Windows
     - Save shy contents in Documents/Shoes/<shy-name>/ All platforms
       Make this the job of the shoes-uber-installer script inside the package
     - OSX radio buttons default
done:  Windows/gtk App window resize bug. 
    Has to be done sometime:
     - compiler warnings and code/rake de-comment, remove puts/printfs
     - update Federales page on website.
     - update 3.2 pages on Wiki
     - Rewrite Build Shoes on Windows at wiki.
     - OSX/homebrew/rakefiles libgif.
     - Many glib-gobject warnings for Attempt to add property GtkSettings::
       This is the new Raspbian's gtk2     

2014-11-06
     write a ruby (no shoes) app 'petest' that doing the packaging thing.
     put a e.backtrace in the app_package rescue. and turn on all the
     debugging stuff (again) for windows.
done: Windows packaging for Windows -nt header error. Fixed by
     by open stub with 'rb' not 'r:ASCII-8BIT'
  
2014-11-05
done: base.nsi and stub are working together for Windows packaging.
      .shy or .rb, download if needed or include shoes. 
  
2014-11-03
----> osx bug was my edit for edit_line finish proc. comment out for
      now - then do it properly. 
done: stub.c should be working properly
done: found the loose -pg flag that was putting out gmon.out
  
2014-11-02 All the bugs to fix soon
done: find the gmon.out
done: NT signature bug
done: Try Ian's newest base.nsi ++ - 
      seems to work for install/uninstall but I need to fix stub.c
      to replace bat file for shoes.exe invoke.
      Ian's nsi doesn't work well with stub.c dnlif or full packaging
      it always (re)installs or downloads and installs.
      Can't find the magic to invoke shoes.exe either.
done: OSX #209 the bug is back - edit_line. related to something I did
      with the new method? Yah Think?
done? Ian says turning off the Avast! antivirus system stops the shoes
      reload/repainting.
----> Move .shoes to LCLAPPDATA in cache.rb. Make it more friendly for 
      Windows users. 
----> OSX/homebrew/rakefiles libgif. 
  
2014-11-01 
     write Projects/shytest inside is test.rb and dino.jpg
     Package dnlif shytest.exe - shoes console on windows complains 
     about S:1:Invalid char '\x01'  . Shoes is fine with the shytest.shy
     Is this a problem stuffing the resources into the exe.  UTF16LE vs
     utf-8 vs ascii. ?
done: Bring out the pe tools.
     The shy seems to be fine inside the pe RCDATA resource.
Done: shytest, ytm, isp is working (dnlif) stub.c was not properly
     getting the string resource - right where it said // cjc hack.
     Serves me right!
     
done: Compiling stubs.c - if ENV['GDB']  -DSTUB_DEBUG
done: Test full install (ytm?). Still downloads even if shoes is included.
     do I suspect stub.m? Hell yeh. Fixed, but kind of hacky.
     
done: Still has the nt sigature error when packing from Windows to Windows
done: gmon.out 

2014-10-31
done: gmon.out is being generated. Did I compile glib to do that?
done: Yes I did - see 2014-10-10 comment. I need to undo that.

     Need more rigourous testing of packaging with/for windows problems
done: Bug #1 Windows won't package for Windows
      Windows Ruby/exerb complains about nt header signature. Ian believes
      it's Stringio. It could be.

done: Bug #2 From Linux, package ytm dir
done: 1. dnlif works fine - double check - does it have the data and error 
         messages - NO. It's not creating a temp dir in Windows
      2. include shoes - the big ytm.exe downloads shoes! and then runs
        the ytb script using the Shoes inside the ytm.exe (discarding 
        the downloaded one). There is no data (or debugging messages)
        displayed by ytm.exe/ytm.rb

done: Blog post to warn users about Windows packaging bugs. 
         
   
done: Set the windows files to use the beta site.
done: upload the download.url and selector.url to the beta/share dir.
done: Cross compile ruby 2.1.4
done: Which gems version is included with 2.2.2. OK enough for Shoes
done: Change rake files to use /srv/chroot/mingwgtk2/usr/local
done: must install 2.1.4 (rvm) on build system. at least it didn't have
     a prebuilt binary!
done: didn't fix the nt header problem for Windows from Windows. 
  
2014-10-30
     Setup walkabout.mvmanila.com/public/shoes and /public/select as beta 
     test site. 
   
     Aha - bitten by Shoes class. @path is different in the shy window
     than it is in the packager window. 
done: Used a $global. It should be packaging shy as well as single scripts.
     

2014-10-29
    Ian insists his nsis installer needs to be used. I can test that again.
    Build 3.2.17 Ian's installer.  upload 3.2.17, 
    package up isp.exe and try again.
     
  
2014-10-28
    Blocked a .br site from downloading. How many times a day do they need
    to check that the file hasn't changed. 400 seems excessive. It inflates my stats
    and I do care what people choose to download. Bots? don't care.
    Also blocked 183.224.1.81, that fool checks for 3.2.14-gtk2-32.exe
    every three hours. - also no reverse lookup. I care even less for those.
    Add 117.146.116.136 to that list. 111.23.4.8
  
2014-10-27
     What would an installer script do? It runs on the native plaform
       inside Shoes.
     1. Unpack/copy the .shy to permament location - $home/.shoes/apps/<name>
     2. Create an exe like thing:
        Linux - create a menu entry pointing to the startup script. 
          associate an icon with that. modify/point the menu entry to 
          the launch script. 
        OSX - create App file structure (already have most of it) in 
          /Applications, change icons in the plists, point/modify launch script
        Windows - need to generate an exe/bat,  make the menus
          and change the icons. The menus are hard unless it can be done
          from powershell. I'll ask Ian.
          
  
2014-10-25
----> Radio button defaults in app_package. OSX bug? It appears so. 
done: Disable advanced options in app_packager for 3.2.16
done: compile and upload all 5 Shoes.
done: write blog post
done: write mailing list post
done: do more testing before updating shoesrb and issuing a upstream pull
Works  armhf: Package isp.rb for armhf. Test download and install. 
----> Many glib-gobject warnings for Attempt to add property GtkSettings::
      This is the new Raspbian's gtk2

done: mingwgtk2 - installs Shoes - doesn't run isp.rb. reinstalls - overwrites.
      is this ian's nsis? Yes. reverted to original. Working
      
done: osx packaged on Windows. Where the tarmodes hash do matter.
done: i686 packaged on OSX. Works. 
done: x86_64 packaged on i686

      
2014-10-24
done: dnlif packaging to osx is working. Just needed to get the shell
     script ENV decoded properly. 
----> somehow OSX compile can't find libgif.dylib. After yosemite install
     and I haven't done homebrew update/upgrades, still the files are 
     there. 
hack: Added -L /usr/local/lib -lgif to make_so and make_app
     tasks. 
----> Gotcha!  - the crosscompile mavericks build uses the make_app 
      in Rakefile, not the one in in make/mavericks/tasks.rb
done: Don't need winject in osx build. 
  
2014-10-23
done: Clean up the website (stats, block the exe leachers...)

done: Convert linux dnlinf for use with OSX install and package
      Modify osx-app-install.tmpl
done: Doesn't run from Info.plist ?
done? The isp-launch script can't find the right dir
      modify it in app_package.
yes:  It's dependent on hard coded /Applications/Shoes.app/
----> Is SHOES_RUBY_ARCH really needed on the launch cmd line? 

----> Clean up the naming mess between platform/* and static/stubs
      I've only made worse. What isn't used? 

----> handle the 'http://' better in osxdnl.m or app_package
----> All arch: play nicer with the selector url that the user might
      have in ~/.shoes/federales
  
2014-10-22

done:  osxdnl.m downloads from the server specified location
     1. its a tgz so NSURLDownload unzips it - 245% progress bar
        add delgate to not allow expanding. Now 100%
     2. hardcode the download destination to be something more
        useful: ~/.shoes/install/ 
     3. get site and path args from command line.
     4. terminate when download is finished.
     5. nslog error messages for download (check console app)
     
===> Note: the install script will need to mkdir -p ~/.shoes.install
     before calling shoes-osx-install <site> <path> which are rewrites from packager.
     
2014-10-21
      Rethink. The downloaded (dnlif) - Isp-osx.tgz --> Isp.App
      The info.plist will run a shell script - isp-intall.sh
      The script will check for /Applications/Shoes.app and
      ~/Applications/Shoes.app - if it doesn't find them
          execute "osxdnl {site url} {selector_path}"
          untar it, move to /Applications if needed
      Then use that to run Shoes -- <path-to>isp.rb 
      
      It's more like Linux dnlif - rewrite the SHOES_DOWNLOAD/SHOES_DOWNLOAD_PATH
      when packaging the {app}-install.sh
      
      NSURLConnection vs NSURLDownload - stub.m does both. I could add 
      some comments.

done: clone stub.m to be osxdnl.m and modify the rakefiles to produce
      shoes-osx-install. Yes. there is no good reason to change the names
       
2014-10-20

      dnlif packaged isp.rb produces a isp-osx.tgz which when uncompressed
done: by the end-user double click *SHOULD* run shoes-osx-install which is
      an osx native app that does the check/download of Shoes and runs
      isp-launch
      Plist has keys for SHOES_DOWNLOAD_SITE, SHOES_DOWNLOAD_PATH, and
      SHOES_APP_NAME that value is isp-launch which which is a shell script
      to run shoes and pass the 'isp.rb' or untar.shy ...

done: Rakefile mods to compile stub.m and copy to static/stubs/shoes-osx-install
      -o static/stubs/shoes-osx-install
       Added stubs.rb to make/mavericks - modifiy Rakefile. Only on cross.
done: modify hard code urls to be mine. test that it downloads
      http log shows it queries the selctor. Hangs
N/A : modify stub.m to pick out the Info.plist keys and modify the url
     it will fail doing dmg BS.
N/A : Remove dmg code and shell out to tar xf to unpack the downloaded file.
     The run it to install Shoes
  
2014-10-19
    some basic download if needed design and code in notes/OSX-Rakefile.txt
    
    Figure out what the Shoes osx packaging problem is. Downloaded may not
    work (.15 no .14 yes)
    
    Clean out multiple shoes on my box. Then download 3.2.16
    seems to work fine for me.
    
===> radio buttons on OSX don't have a default 
===> OSX packager the hide for advanced options doesn't work. 
     
done: update mac to 10.9.5. Shoes works. 
  
2014-10-18
done: Two reports that the 3.2.16 beta fixes the hang problem. I'm #3.

done: Gtk/Windows doesn't use fontconfig, freetype. I'm going to ignore
     the pango complaints. 
     need to create etc/pango and the pango.modules file in there (generated)
     need to create the pango.rc at Shoes run time (Shoes.bat)
       many need 
     need to create the modules (how?)
     need to copy them to the dist/
  
2014-10-17 
      Make a Magic GSource that handles the Ruby select() and add it to the
      the GTK main context poll loop.  Go figure, I need a refresher on
      writing C forward decls.
      
      there is a rb_thread_schedule() entry that might do what I want.
      try it in a g_idle. Works but cpu is 100%
      try it in a g_timeout_add(100ms). Works better, downloads OK.
      
done? Font issues  - Gtk/windows pangorc fontconfig dance do I need the
      pango-querymodules.exe - probably. Can it be run by the installer? Cobbler option?
      both? the shoes.bat (OSX style)
      
done: moved 3.2.15 osx to beta. 
  
2014-10-16
      Sigh. rb_fd_select IS NOT deprecated in 2.1.0 WINDOWS. Only Linux
      I wonder about 2.1.3? 
      fb_fd_select is returning -1, errno = 9 which is EBADF bad file #
        no surprise. I'd figured that out before checking.
      No love mixing select and fd_set stuff - ruby redefines things so
      plan A and B would get really ugly. 
      
      Plan C - don't set the g_poll function. Instead create a GSource
      and add that to the default g_poll loop. The GSource functions (there
      are several is what allows Ruby threads to run if needed. it's a 
      g_idle sort of thing with more control. 
      
done: Shoes/Gtk/win32 runs w/o a shoe_g_app_poll. Shoes initiated os thread
      do run, but slowly. No hangs!!
  
2014-10-15
      Since Gtk doesn't know what a Ruby fd is and and Ruby doesn't 
      know what a Gtk fd is, don't mix them together. Run two unique
      selects (ruby first, then gtk).
      
      We need to make sure Ruby doesn't block the process IFF there's a
      real gtk fd to read so we need to send in a fake fd acceptable to 
      Ruby that say's it has something to NOT block on. Make a note that
      we fooled the select. We have to copy Ruby's fd's and add our fake.
      
      If the only thing returned that needs action is our fake fd we know
      Ruby has nothing to do so then we can do a  g_io_channel_win32_poll() 
      of the gtk fds which could block the process until the mouse moves 
      (for example).  
      That is the number of events returned to GTK.  Will that work?
      Be careful. That g_io_channel_win32_poll is just a call to g_poll
      which might call me. 
      
      Call that Plan B. Plan A is convert gtk GPollFD's to Ruby fds.
      
      Plan A:    
      Test a few things. Count the the number of nfds that changed and
      compared that with 'ready'. 
done: Ah, rb_thread_fd_select is returning -1.
      Don't return more ready events than what we counted. Still 100%
      but it hangs faster. That might be progress. 
      
      Can I convert a Gtk fd to a Ruby fd so that rb_select will be OK?
done: 1. verify that rb_fd_init(&foo) copies Ruby fd's. defined in thread.c
         does_rb_set_t have a capa field and a fdest field; Yes. _WIN32 defined
         No it doesn't copy existing fd (sets)
         
      2. What does Ruby do
        Ruby FD_SET(fd, set) which might be a macro does a
        SOCKET s = _get_osfhandle(fd); 
        which is something I've seen in the glib_w32 code. It's not a socket!
        it could be but it's also anything that msft calls a 'stream', aka 
        open file. Perhaps a thread too?  
        
        FD_SET (or the real function) should be called FD_ADD_TO_SET or FD_APPEND
        because thats what it does. 
      
       3. What does Gtk do? It doesn't expose what a struct _GIOWin32Channel is
       
      
  
      
      
  
2014-10-14
      Ruby has its own stdio emulation and threading. Glib/mingw does too. 
      They won't match. Much head scratching.
      
      Perhaps I should read up on what select() is intended to do:
      If none of the fd's (which may be threads) has anything to do, then process
      is blocked until one of them (which may be a thread) has data available
      to read/write/exception(aka error or timeout and the number of fd's 
      passed in to select which wouldn't block on a read/write op is returned
      
      I prefer not to know the details of how that happens
2014-10-13
!!!!!> test to make sure Ruby doesn't compile windows threads.
      It does!!! It checks _#if defined(_WIN32) before HAVE_PTHREAD
      So it doesn't use pthreads but mingw is tied to pthreads.
      It's getting circular and depressingly deep. 
done: Gtk/linux poll loop needs more mods - even though it works now.
done: go back to compiling Ruby with default # of fds. Shoes is not Rails.
      the linux default is plenty. 
done: Integrate gtk/win g_poll with Ruby fd's.  Every time I think
     I know what to do, I'm wrong.
     

2014-10-12
    Ahh - in glib/win32 an fd can be a pointer, not a small int< 1024 or
    <2048. Glib/win32 and Ruby don't share the same FD table is my guess.
     
    The best thing might be to tell/compile gio to use Rubys fd table.
    OR add the gtk/glib/gio FD's to the ruby table. 
  
2014-10-11 
    DependencyWalker.com - shows what dlls call what dlls (some false errors?)
    My glib does not use pthread. Ruby does. One data point confirmed.
    
done: compile glib  https://developer.gnome.org/glib/stable/glib-cross-compiling.html
     set PKG_CONFIG_PATH
     
     glib/gmain.c:2047 looks likes now:
     #if defined(HAVE_MONOTONIC_CLOCK) && !defined(_WIN32) 
     
     gthread/gthread-posix.c:150 make it look like 
#ifdef USE_CLOCK_GETTIME
#ifdef _WIN32
 posix_clock = CLOCK_MONOTONIC; // cjc hack
#else
 if (sysconf (_SC_MONOTONIC_CLOCK) >= 0)
   posix_clock = CLOCK_MONOTONIC;
 else
   posix_clock = CLOCK_REALTIME;
#endif
#endif

----> need to strip libgpthread 'to external PDB' on glib make install
----> Compiles and links. Copy to Shoes - still hangs and 100%
----> it could still be dueling init's. Should have one thread model through.
      There's more visible and descriptive threads.
====> There's a cleanup method in libshoes.dll (cleanu) that's in wait:executive 
done: Add checks for ENV['GDB'] == 'profile' to xmingw32/env, task
     

2014-10-10
     Built a gtk-32 with profiling and w/o -mwindows so we get a console
     at launch 
     We have the usual suspects of reinitialized constants Encoding.ASCII_8BIT,
       UTF_16LE, UTF_16BE, UTF_32LE, UTF_32BE, USASCII
     maybe -enable-load relative does matter on Windows.
done: No, it was compiled enable-load-relative. check cache.rb. shoes.rb

N/A: does enabling the microsoft #defines help with pthread and Ruby.

     Two Pango warnings at startup can't load font Lucuna No Rotated 17.3339..px
     and 64.0009..px  - substituting expect ugly yada yada. 
     
     Need to specify the libshoes.dll to gprof not the shoes.exe
     Not that much wall/cpu time is attributed to Shoes so it might be
     in gtk/glib - which isn't instrumented. That is true of the msw too.
     That can't be co-incidental. Well, it could but I doubt it.
     
     I've had this thought before - it's Windows sending Shoes events (idle?)
     faster than necessary. Perhaps Shoes has a build setting that tells 
     Windows to do that? 
     
     OR Ruby, being init'd first holds a lock (mutex) that the GUI
     (msw & gtk) wants to set (or enter) so Windows continues to let the
     app run. I kind of remember that reversing the init's (gui first, then
     ruby) hung Ruby (Linux?). That's the theory - Ruby is holding something
     Windows (+- gtk) wants so Windows give it cpu time.
     
     How can we tell if the inits are fighting over a lock? can we tell
     Ruby to release it? That doesn't explain why Linux works and Windows
     doesn't.
  
2014-10-09
     I can't build a Ruby that doesn't depend on libwinpthreads.dll -
     this the MinGW 4.8.x compilers magic and 'just the way it is' according
     to net wisdom. 
       Wine doesn't like it.  
       Gthread.dll doesn't seem to know or it doesn't care or hasn't tried.
       
done: Cross compiling  glib-2.28 - 
      Thread options are win32, posix, none
      gmain.c:2058:24: error: '_SC_MONOTONIC_CLOCK' undeclared (first use in this function)
      
      This approach is not going well. BACK UP. TAKE A BREAK!
      
      gtk c apps are not linked with a phtread in the gtk-bundle.  We need
      to compile ruby to do the same.  That would be nice. Or I'm back
      to compile glib/gthread to use mingw pthreads (libwinpthreads)
      
      Does Shoes/gtk3  hang on windows? Can it use libwinpthreads ?
      It too runs 100% AND it's tied to the pthreadGC2.dll - Why? 
      
      
done: Can I cross compile gtk3/glib with the proper thread lib? Do I want to?


  
2014-10-08
====> Just noticed (remembered) that even the the msw variant uses glib
      (and gobject/gio/gthread has to be included)
      I should install 3.1 exe and see what it does (hang, cpu %)
      
done:  g_main_context_set_poll_func(g_main_context_default(), shoes_app_g_poll);
       g_main_set_poll is deprecated.  There are others. No errors were fixed.
       
       Does the poll works differently between Windows and Linux? It
       works well enough to run Shoes/Windows. The msw version also goes 100%
       Why does Windows send events so often?  Is Shoes not telling Windows
       that the event has been accepted? 
       
====>  Try to cross compile a simple Gtk C example - what a mess! ~/Projects/gtk
       Test it with Wine. Windows (cpu util) 
       
       -mms-bitfields is part of the Gtk cflags from  pkg-config gtk+-2.0
       so it has to be part of Shoes compile and Ruby compile.
       
====> Cross compile a later version of GTK (and friends)? with mthreads or
      whatever Ruby is using.
      
***** Frick! MinGW may already have Gtk2 stuff.
      
2014-10-07
done: Copy exerb when building, don't compile winject ext, fix some warnings
      with -Wno-unused-but-set-variable
done: w32-msw - it's still pretty out of date in the rake files (rbload, gems)
done: w32-gtk2 - still has symbols so it's 7MB larger! 
done: x86_64
done: i686 
done: armhf
====> osx
      
done: update raspberry - new os 
-----> Running Shoes 3.2.16 on new raspbian
       (shoes-bin:2539): GLib-GObject-WARNING **: Attempt to add property 
       GtkSettings::gtk-label-select-on-focus after class was initialised

       so update qemu chroot and rebuild Shoes 3.2.16
       same warning message 
       
---->  Should nfs mount Projects from raspberry
  
     Win/gtk32 hasn't hung yet. Still uses 100%. Hangs when in background
     and I start Firefox. Or media center. This may be good clue.
     
     try 0x601 (win 7) - No help. Reverting to 0x501 (XP). Call me intuitive
     or stupid but I thinks it's related to the 100% 
  
2014-10-06

      platform/mac/stub.m - this will be test. It assumes the download is
      a .dmg and I'm not going back to binject so it has to be changed to
      the tgz/tbz - Aka /static/stubs/cocoa-intall
      Need a stubs rake task
      in main()
        It needs to load strings from plist or commandline or ... for 
        site,selctor_path
        app_package.rb has to write them.
      We have to install in /Applications - if it's not there already.
        since I'm using a tgz and not dmg this might be tricky.
        
----> Clues: Cross compiled Shoes Windows (msw && gtk) doesn't specifiy 
       -D_WIN32_WINNT=0x0501 
       -D__MINGW_USE_VC2005_COMPAT
       -mms-bitfields

       
----> When compiling ruby
       -DFD_SETSIZE=2048 - might be a problem with gtk- might be a solution.
       -D__MINGW_USE_VC2005_COMPAT (as used by RubyInstaller) 
       
-----> clean up the warnings when cross compiling mingw - some are silly.
       some maybe not. 
       
       http://msdn.microsoft.com/en-us/library/6sehtctf.aspx 
       
====> now Shoes/gtk2/Ruby wants libgcc_sjil-1.dll. Could this be progress?  
       /usr/lib/gcc/i686-w64-mingw32/4.8/libgcc_s_sjlj-1.dll
       add it to SOLOCS- doesn't fix the hang.
       add SOLOCS change to msw variant
  
2014-10-05
done: download if need for Linux is working.
done: website is being converted to ubuntu. Further testing for osx 
      will have to wait. 
      
----> Can crosscompile glib w/o pthread - use win32. Would that help?
----> use -mms-bitfields compiler flag with apps that use glib -according
      to the 'old' dev notes. Does Ruby need to be built that way too?
      Native mingw compile does 
----> Ian's msw windows.c variant uses 100% cpu in shoes_app_loop and shoes_native_loop
      It drops to near zero if a modal dialog is up (shoe alert)
      Doesn't hang after many hours in the background/foreground 
  
2014-10-04 linux dnlif packaging

===> 3.2.15-osx appears to be a bad download from website or packaging
    mis-step. 

    Install part seems to work.  Starting shoes with script - not so much.
    unpacked script/shy in /tmp/untar.rb for this test.
    execute the .run twice and it works.
    
    On destination system, it unpacks the shy/script to /tmp/selfgzNNNN
    then download and runs the installer which unpacks to another /tmp/selfgz
    and installs

2014-10-03 -- linux dnlif packaging
done Get rewritten(sh-install.tmpl) to test for Shoes and download   
      from the cgi (selector)
done: runs installer
done: test for existing ~/.shoes/federales/shoes in sh-intall{.tmpl}
done: package up the script/shy and the rewritten sh-install and blank.run
     (aka makeself)
     
     What's in a abc.run? a makeself (blank.run) + abc.tar.gz
     In the abc.tar.gz is sh-install (rewritten) file or shy

  
2014-10-02
     world.c/windows.c appears to have no code for threading
     
2014-10-01
     Working with Ian. 
  
2014-09-30 - working on Linux download if needed processing
     I'm tired of Windows and the hanging problems. Even better for me,
     Ian has volunterred to try building and I'd rather help him than
     deal with the hang bug on Windows 
     
done: In app_package.rb, if 'Download If Needed' platform_dlnif - select
     from 3 new functions to create that kind of packaged script. 
----> Windows - probably works.
----> Linux - rewrite static/stubs/sh-install.sh to pass in
     download host name and path 
----> and modify the sh-install.sh to use the new scheme. It's only bash.
----> Copy sh-intall.sh sh-intstall.tmpl. That gets rewritttem and copied.
      That needs to be rewritten (Bash!)
        figure out if we have wget or curl. save that command
        do we have ~/.shoes/federales/shoes
          if not, download and install Shoes
            That requires using the {arch}.rb (rewritten vars)
        check again that we have shoes, if we do then
        use Shoes to run the script or shy (which could be a Shoes
          shy installer. 
done: need armhf.rb, x86_64.rb and i686.rb cgi scripts They return 
     /public/shoes/shoes-3.2.15-gtk2-i686.install (for example) 
  
2014-09-29
     Fixed compiler warnings (X86) for gtk.c and deprecated rb_thread_select
     seems to be ok on Linux (dist/shoes x86)
     On Windows - Shoes runs for a few seconds (30?) then crashes. Probably
     still using 100% before then. Windows says "Shoes asked to terminated 
     unusually"
     
----> Linux Ruby uses gettimeofday (tv->usec), 
      MingW Ruby probably uses clock_gettime (tv->nsec)
      The poll timeout value from GTK  may well be milliseconds.  
      The rb_thread_fd_select api uses timeval (tv->usec) so
      Shoes should be OK.   Doesn't crash Windows but still hangs.
  
2014-09-28
     You can tell I'm slow walking this bug. Sadly, I was informed
     Process Explorer (download from MSFT) will show threads and if 
     you select one (only 3 for an idles Shoes app) you can see they
     are often checking the clock.  Ruby dll pretty idle - Shoes is very
     busy getting the time and checking mutexes. Way too busy. 99%
     What is Shoes and Gtk looking for and why can't it wait?
  
2014-09-27
     get_time() only appears to be used in canvas.c debugging. and some 
     unused http code. Not thread a scheduling confounder. 
     Idle shoe app - 100% CPU - doing nothing - where does the time go?
       which thread is running and why?
     Windows event queue filling up so Windows stops shoes app (windows Events)
       shoes app still runs.
  
2014-09-26
====> Get windows packaging with download working.

====> Complaints about the Windows hang motivated me.
     perfmon says an idle Shoes app runs 100% cpu. Not Good.

done: wrote a sample unshy shoes app for demo purposes.
  
2014-09-25
----> move alt.rb changes to app_package.rb
      Add the option for download vs include - build a hash of option
      to pass to the lower levels.
----> copy exerb when building Tight Shoes
    X86_64
    i686
    armhf
    osx
    mingw32
---> add 'download if needed' option to app_package
---> Make all of the above work with OSX target.
---> Make all of the above work with Linux Targets (3 too test, 1 to write)
---> replace minitar for shy.
---> Talk someone into doing a youtube screen cast on how to package
---> Write a wiki article on compiling stub.c and pe testing apps
     like anal_pe and pefile.
---> add {myapp}-installer.rb to app_package for .shy with options
     to expand the shy in user file system and make links/menus/..
     bundle gems, deal with icons.  Shoes 3.3?
  
2014-09-24
done: on Win 7, packaged isp.rb - downloads and installs Shoes, starts it
      Get an error on the Shoes console:
      Invalid argument @ rb_sysopen - <box char> from shoes.rb, 459->475->475
      does the isp.rb file have a missing or extra char in the filename?
      Ascii vs unicode? Actually its the count DWORD in front of the UTF-16
----> Still need to handle SHOES_SETUP in stub.c
mostly: Clean up the compiler warnings in stub.c
  
2014-09-23
done? exerb can do RCDATA resources. It packs (alt.rb) anal_pe and pefile like it.
done: wine and win7 {packed stub} dies in the http code. charset ? 
      I don't see an http log entry on the server for either Wine or Win7
      a wprintf (wine can do it - yay!) says its dieing in shoes_winhttp
      The url looks ok.
      
      I thought that was working in MingW. ouch! Missing dll, wrong dll?
done: Nope, it was SHOES_REVISION being compiled into winhttp sent headers
      with a sprinf(%d). I went to %f because I don't have the old version
      numbers.
----> will have to do that for nsurl.m
  
2014-09-22

done: stub.c char * shoes_str_load(HINSTANCE inst, UINT resnum) 
      converts with utf16-le to utf-8. Not pretty. works for now.
      Probably not needed except for the debugging code. 
      stub.c is pretty Unicode aware. Irony exists!
      
done: Split download url to be more friendly to stub.c -- two resources:
      SHOES_DOWNLOAD_SITE ex: shoes.mvmanila.com
      SHOES_DOWNLOAD_PATH ex: /public/select/win32.rb
      Modify stub.c to use those resouces/
      
done? cgi script public/select/win32.rb returns a line/string like
      '/public/shoes/shoes-3.2.15-gtk2-32.exe'
       $wget shoes.mvmanila.com/public/select/win32.rb   Works.
      
done: Fix alt.rb to pack isp.rb contents

====> Update app_package.rb for windows (dnlif_exe, repack_exe ) to
     match  all of the above    
  
2014-09-21 Deeper and deeper. 
----> Guiding prinicples http://walkabout.mvmanila.com/2014/09/18/bootstrap-to-the-future/
----> Use new names for resource constants and numbers
done: in stub.c, load a string resource by number works.
      it's utf-16 which screws up the simple C string functions.
      Which means stub.c needs a Unicode upgrade.  I'll write a
      function that takes in a String resource number and
      returns an old school ascii. 
  
2014-09-20
done: The mingw rc string table is UTF16 with leading count. I can pack that
     of those and pefile and anal_pe are OK with it.
done: try a second string resource - the id has to change

----> Figure out how to do a 'named' resource id
  
2014-09-19
     Can just go with a STRINGTABLE for the strings in stub.c. int index
     use LoadString()?  Fallback
     
====> For each 'named' STRING inject there is one complete RT_STRING
     resource tree - the resource entry [string table] only has one entry. 
     Should simplify exerb. 
     Multiple [0x6] resources in the pe. One per named string.
     Not quite - there is one 0x6 in a pe - There are multiple resource_directorys
      underneath that. 
      
----> Get the named part working
maybe: Then the size.
     
     Multiple RC_DATA is the same. 
  
2014-09-17 
     Stop reading and Just do something! 
     in executable.rb , require 'exerb/string.rb'
     string.rb is a shallow clone of archive.rb.
----> pefile_dir$ python setup.py install. Write python script 
     bugs/winject/strings.py to list
     String resources in an exe (command line arg)
     
----> Package bugs/winject/packme.rb with x86/tight shoes that inject two 
     strings (packme.exe). winject.c and blank.exe.
     pefile seems to like it - two Directory entries. Of course blank.exe
     isn't written to use the second string. Bad news. Wine reports 
     bad format in the loader dialog box. Win7 says it's an unsupported
     16 bit app and to contact the vendor for a 64 bit app. 
     SO we can't depend on winject.c doing the correct thing. ICK!!!
     
----> Compile (mingw) with two string resource in the shoes-stub.exe. Start with
     something that works and build up from there.
     Even this is not so easy.
    
----> My string resource is not a NamedResource. 
     can't find the second injected string. size is wrong.
  
2014-09-16
     I should not replace winject.c just yet. I should only play with
     the dist/shoes version (Loose Shoes) when debugging winject.rb/exerb
     Shipping shoes can use the C code until I get my exerb mods working.
     I need to genenerate tests files with blank.exe (tight shoes)
  
2014-09-15
     In exerb I need to add code for RT_STRINGS (adding, packing, unpacking)
       for the toplevel and the internal storage which is a PASCAL string
       (DWORD length, then characters), or so I read which is 
       
     Then do RT_RCDATA
  
2014-09-14
     I'm Less lost. I need to write exerb 'handlers' for RT_STRING and
     RT_RCDATA resources. A problem because there can be multiples
     strings and mulitple Shoes files and PE is not the easiest format to
     understand. Which is why nobody has taken the time to do it.
     
     I want a lib/winject.rb (loaded by app_package.rb) that has
     methods new(path-to-stub.exe), save, inject_string (name, value) and
     inject_file(name, binary_contents)
     
     Obviously, this would replace binject/winject (the extension and rake
     files have to be modified to not build them
     
     modify rakefiles to copy shoes3.2/lib/exerb/ to builds, don't build winject
----> x86
----> i386
----> raspberry
----> windows
----> osx 
done: linux dist - symlink bewares, I link to directory exerb
----> osx dist
     
done: Winject.rb just front ends exerb. 
done:     alt.rb needs modification.
     

  
2014-09-13
     get lost in exerb.
     
2014-09-12
     exerb (defunct project?) might load/save PE files (and resources) with
     pure ruby. That would make lots of people happy if I can figure it out.
     https://github.com/snaury/exerb-mingw  
     Author info - https://github.com/snaury
     - of course the ruby installer folks knew about this.
     
done: get it to load from a file, loop through resources
done: get it to save to a file, compare.
----> get it to insert the Shoes resources (much testing ahead)
----> Add exerb to lib/ update all the rakefiles (task.rb to copy or link)
----> Fix the unpack/pack format strings to allow BigEndian rubies to pack
     a little endian.  Or don't bother, rasp and intel are LE.
     
2014-09-11
     I think it is confused about the extra sections (symbol tables)
     and may not be copying them. Actually, winject is doing OK, but there
     is something past the .rsrc section that doesn't have a section header
     but those sections refer to it (debugging for sure, maybe more) which is
     why a stripped shoes-stub.exe *almost* looks like it should work.
     
     Wine is OK with an mingw exe with debug symbols. So is Win 7.
     
     It looks like Mingw resources might have offsets higher than the section
     header suggests. 
     
     compare mingw vs 
  
2014-09-10
     wrote a test program the calls winject (without the gui) and
     copies blank.exe and then shoes-stub.exe without injecting anything
     blank.exe & copy are the same size. shoes-stub.exe wrong, very wrong.
     
     (see notes/Stubs.txt for thoughts and data)
     basically binj->datapos is incorrect after show_exe_rewrite 
2014-09-09
----> need to fix url in stub.c (cgi at site?)

      For a simpler test, I comment out all injects - so new and then save
      should produce nearly identical files - 
      It does when using blank.exe 81920 bytes in length. 
        although diff thinks they are different. Both work in Wine.
        anal_pe thinks they are different but similar. The resources
        are identical but they live in a slighly different order.
        
      Doing that on shoes-stub.exe results in a loss
        71513 -> 57344 ! 14169 missing
        
      It's not the icon that causes the problem. I tried the original 
      redshoes.ico.
      
done: Write a test prog '../path-to-shoes --ruby that does both
      blank.exe and shoes-stub.exe . call it bugs/winject/copy.sh [.rb]
      Must include a proc/block to exe.save and they almost print the same
      result (.rsrc section). 
look? blank.exe has a 260 byte and shoes-stub.exe has a 282 byte length
      
      
        
      It just occured to me -- the blackhat hackers probably have tools to
      inject resources into an exe. 
  
2014-09-08
----> also convert C++ to C, add unicode functions names and stuff
      clean up the warning errors - something probably is incorrect.
done: Compiles and links (C) - it works in wine (dialog says empty stub)
----> When packaging isp.rb for  Shoes/Windows
Segfault in winject_exe_rewrite (line 455) called from line 638
      I consider that good news. 
----> When packaging isp.rb for Windows but with the winject(isp.rb)
      commented out, it completes but wine says Bad EXE format so
      parsing of shoes-stub.c (mine or ashbb's) is failing in Winject.
  
2014-09-07
      definately a problem winjecting into a mingw compiled app.
      
      MinGW has a pe.h - it's different enough from the winject pe.h 
      to cause me some worry.
      
      FWIW blank.exe (msvc compiled) and shoes-stub.exe both run in Wine.
      Wine will also *start* isp.exe (shoes-stub.exe version and pops the
      the dialog with the progress bar half filled, caption "setting up shoes"
      and the an error dialog "Bad Format". That is similar to Win7 so the
      debugging just became a bit easier. 
      
done:  Fixed all the warning message in winject.c. Still more work to
       do to clean out the 1.8 useless code. 
       
====> cross compile platform/msw/stubs.c to be shoes-stub.exe. We have
      C compiler issues. I wonder how asshb was able to compile it. 
      It appears to be C++. That's just wrong. But it compiles with g++
      and it has something to do with winhttp.c, .h I'm going with C.
----> need one of those .def files?
----> shoes_get_time and diff_time (sigh) - in 
      
2014-09-06
      Set the wayback machine to 2007. (B|W)inject comes from anal_pe
      which does have a listing facility of sorts and it does compile and run
      in linux. 
  
2014-09-05
done: Add -x to mingw strip command
----> Hmm. I'm missing some tasks from the old mingw build. 
      make_resource(t)
      :stubs task.
done: copy the manifest to {dist} (in make_app) - where is this used? nsis?
        It appears to be unused - move to old/
====> using shoes-stub.exe instead of blank.exe. Windows 7 doesn't think 
      isp.exe is a valid executable. A mingw issue? Binject vs mingw ?
====> Yes! shoes-stub.exe (mingw version of blank.exe) runs (says it's empty
      which is correct. That means winject doesn't do the right thing on
      a mingw compiled stub.
      blank.exe works with winject , shoes-stub.exe doesn't
done: fix .gitignore
      
      get stub Cross compile before fixing winject.
done: modify Rakefile and add :stubs task for xmingw (make/xmingw32/stubs)
  
2014-09-04
      Before I get too carried away with the new packaging scheme I should
      fix some bugs in the current scheme.
done? Do a shy build on a directory (pick a script in the directory)
----> create an options hash for the Shy.desc in app_package.rb
      modify shy.rb and the unpackers (linux, osx, windows) to handle that
  
2014-09-03 Windows, Windows ...
      You can package a .shy (tested with ytm.shy on linux) and it works but it
      installs shoes and not the shy. (Linux)
      Works well on Windows - if Shoes is installed.
====> Fails (sort of) if Shoes is not installed - it installs 3.2.10 !!
      Where the hell did that come from ?! Some resource in the packaging/nsis?
        a left over hiding somewhere in Windows? It is 3.2.10 too. 
====> Find and include the Windows gtk2 theme
      start here http://sourceforge.net/projects/gtk-win/
====> Get the Federales icons into nsis
      
  
2014-09-02
     Interesting possibilities with jfxruby toolkit. When Shoes is too
     limited? The jfxruby wiki has good info. https://github.com/jruby/jrubyfx
     
     Might work for Android, iOS building. see:
     http://www.infoq.com/articles/Building-JavaFX-Android-Apps?utm_campaign=infoq_content&utm_source=infoq&utm_medium=feed&utm_term=global
     
     
done: select/pkg.rb cgi script sorts by file name. 
done: minimized winject to just Windows slinging . Test: creating isp.exe
done: dist:  9551872 Sep  2 23:13 isp.exe
      x86_64   9551872
      i686     9551872
      armhf    9551872
      osx      9551872
      xmingw32 9551872
done: yes Windows started working again. Not sure why (other than winject
      name change and try/catch
      which shouldn't have changed anything but it did
done: git commit
done: update issue 265
done: blog post
      
2014-09-01
done: copy binject to winject and remove the osx/dmg stuff.
  
2014-08-31 
      pay attention to the error message:
      '126: the specified module could not be found C:/Users/Cecil.../binject.so'
      
      If the file is actually missing the error is:
      'cannot load such file -- binject'
  
      Did I screw something related to gem building/handling when I
      did the hpricot/sqlite3 gem building and loading? I did write
      the packaging first and reading below I did have gem loading/path
      issues - perhaps I screwed something up?
  
2014-08-28 
===>: Bug #266 App freezes on Windows (backgrounding)
  
2014-08-27 3.2.15 release
done: Build all & upload
done: update shoesrb.mvmanila.com and issue pull request to mothership
done: Blog announcement

===>: Bug #265 reported. binject.so won't load on Win7. reproducible.
      co-ext's Ftsearch and chipmonk work fine. It's not the stripped
      symbols. No problem on Linux. 
  
2014-08-26 Wiki
----> place holder wiki posts for these topics:
     * Dude, where's the secret files?
     * Shoes command line
     * Shoes and Ruby Gems
     * Packaging
     * Cobbler
     
done: Update manual to point to 3.2 wiki, my blog and other schtuff.
  
2014-08-25
done: fixed mingwgtk build to name installer file correctly. hack.
done: Add crosscompiler strip of mingw symbols. No size diff from 
      x86_64 linux strip.
  
  
2014-08-23 Update the Shoes Manual
done: for Dist/shoes, changes inside static/ need a rake clean; rake. 
      dist/shoes/static should be symlinked to - copy them when installed
done: Update manual for edit_line finish= 
----> Many changes to manual and pngs to get it current. 
====> embed 3.2.{teeny} [app.yaml] version number in compiled in constant
done: Add a tips section at the end of manual - link to wiki articles on
      command line things, Cobbler, Packaging
====> Convert some of my blog posts/pages to Wiki (cobbler,  gems)
      
  
2014-08-22 bug860 done handler
done: Change Shoes/Ruby name to 'finish='.  
done: working in Gtk2 (Linux and MingWGtk)
done: OSX - too easy? add textDidEndEditing implementation
      that does	shoes_control_send(object, s_donekey);
      Works with the finish= proc. Works as usual w/o it. TOO EASY.

----> Update manual... ick
  
2014-08-19 Shoes4 bug 860 - handling \n in edit_line. 
    Gtk has an "activate" signal see gtk.c:1045 it works but the \n
    is not entered into the edit_line string. 
    NSTextField has a textDidEndEditing delegate thingy so it could work
      somewhere around cocoa.m:1218

done: Add  done= method to editline (in ruby.c) 

done: Add shoes_edit_line_enterkey() to ruby.c. 
      Store proc in attr hash
done: Need s_donekey symbol in ruby.c. h....
done: Gtk.c add a handler for the "activate" signal - handler needs
        to find the enterkey proc in the attr hash
done: Segfaults at gtk.c:1044 - 
        
  
2014-08-18  -- Linux packaging 
    When packaging, Create an 'apps' dir in the downloaded/extracted/Shoes
    and copy the 'myapp.rb' in there - might work for a hh.shy too.
----> This has to work for OSX and Windows too. 
----> Get 'Download if needed option' working for something like HH. That
    requires packing up binary dir tree (or shy)
----> sh-install needs some rewrites for arch handling.
====> Isn't it true that install first (if needed) then install/run
     app the desired state? and including Shoes is the 'if we have to' 
     case? (aka Windows). 
----> Make the shy packaging do the download if needed?

  
2014-08-15 
     Rethink the Linux packaging. Can I make the 'download if needed'
     work? Download & Install Shoes 3.2 to ~./shoes/federales (if needed)
     
done: Name the linux installers with suffix '.install' not 'run'?
      It will package a script in a .run
done: Will have to fix app_package.rb (always a good idea)
----> use gems zip/unzip instead of minitar in shy handling. ?   

 
     
2014-08-14 
done: Start 3.2.15

     Need to strip the ruby libs as well as ext, gems add code to tasks.rb
     Huge reduction in file size (x86_64, i686 and even more armhf). 
done:  MingW & linux 8 or 9MB. OSX still large at 14MB but it's stripped.
     
----> and remove some  of the rdoc/ri/ and never can be used Ruby stuff.
     except Shoes could use if someone really needed to. I guess.
          
     Add Nokogiri to built in gems for 3.2.15?
  
2014-08-11
    For Fedora, there's a feature named 'mock' which migth be similar
    to schroot & apt-get. FYI
    
    What next? There's a whole lot of compiler warnings on OSX? 
    clean up the distributions (strip gem binaries), remove useless 
    to Shoes code. Build the next Ruby 2.1.2 after p95? 
    Setup rake compiler to build Shoes gems (for pi, mingw)?
    Get rights to close bug reports on shoes.gethub.com?
    Write a 'Shoes on Pi" article ? Linux Mag? 
  
2014-08-10  - 3.2.14 released
Done: Shoes/OSX 3.2.14 works (sqlite3 and hpricot)
     Turns out there was a bug (gasp) in cache.rb that made gems kind of
     funky. 
----> Undo the OSX rake gem stuff from yesterday. Unless I want it for 
     a second gems process.  Comment out for now. 
----> Cobbler should not look inside specification/defaults or look
     through some indirection before displaying gems to test

done: Update hpricot to 0.8.6, (save the extconf.rb in fast_xs, hpricot_scan)
     Not so simple. Copy the code but not the extconf or gemspec.
     update the gemspec version.
done: sqlite 1.3.9 (preserve the extconf.rb)
     changed the gemspec for 1.3.9 to match the code copying.
done: Build, test, upload 
      osx
      x86_64,
      i683
      pi
      mingw.
====> expert-funnies.rb (XKD) causes image cache failure. 
  
2014-08-09
     Hmmm. Some built in ruby gems can't be 'require'd by irb. Not just
     a Shoes problem. That suggests Shoes has no business playing around
     in the Ruby gems directories. Something to think about:
       Can I create a new subdir in ~/shoes/federales 'shoesgems' build/
      copy the hpricot/sqlite there. It's easy enough to create another
      load directory in cache.rb  
      
      Try it with OSX. Directory will be 'builtins'. I'll create a rake task
			'gems' which will build against {TGT_DIR} Ruby. Only for Tight Shoes. Their
			will be a make/mavericks/gems.rb file that will do all the work - compile,
			and the otool, install-name-tool dance.
			
			Then modify cache.rb to add builtins to the load list.
  
2014-08-08
     It's ruby (or gem) problem for OSX and the built in gems. 
     Added a 'load test' button to cobbler that does a require -easier to
     test load failures. On OSX, there are several Ruby gems that don't as well 
     as the Shoes gems. Several don't load on Linux either. Hpricot 0.8.1 provides
     a clue. There is a console message:
     /home/ccoupe/Projects/shoes3.2/x86_64-linux/lib/ruby/gems/2.1.0/gems/hpricot-0.8.1/lib/hpricot/blankslate.rb:23:
      warning: undefining `object_id' may cause serious problems
      
 ===> Sqlite3 now fails in linux/cobbler. OK in if run from samples. Clue Stick.
     Spooky weird - I didn't change anything Linux would know about. 

  
2014-08-07
     GEM_PATH (and cache.rb) is the culprit. Disable it for Tight Shoes.
     x86_64 OK - chroot, non chroot, Suse.
     i686 OK - chroot, debian 7.2 (HH loads)
     armhf OK
     Win7 OK (HH wloads)
     OSX - fails on sqlite/hpricot. I suspect otool/install-name-tool 
       is missing (sqlite3.dylib is wrong, I suspect ruby linkage is wrong too)
  
2014-08-06 
     Worse than I thought. The linux built in gems don't load either.
     the specs need to be in specifications/default/ to show on the coobler
     listing but they don't load. WTF! It's working again (x86_64)
     What sort of magic have I found? 
     
     The difference is running chroot (works) or not.
  
2014-08-05 OSX Shoes gems
----> hpricot,sqlite3 are not showing in the list of gems in Shoes (OSX)
     all appears to be OK but obviously something is missing.
  
2014-08-04 Sqlite 1.3.9 cobbled.
done: raspberry build works. Not pretty inside the  extconf.rb
--->  Shares the US-ASCII problem
done: Mingw more troublesome. Use the binject/extconf method and force
      RbConfig load from the Mingw compiled Ruby.
----> Mavericks build doesn't handle hpricot, sqlite copy/lib linking
        appears to compile OK. 
  
2014-08-03 Sqlite
      Backup current gem.
      copy ext/ lib/ from 1.3.9
      apply my fixes to extconf, undo some of theirs. What could go wrong?
  
2014-08-01 sqlite 1.3.0 (existing Shoes)
      The sample/simple-sqlite3.rb script tosses up two errors of US-ASCII
----> comment out the line for now.
      sqlite3 working in x86_64,
      apt-get install libsqlite3-dev on i686 chroot. Works.
      
====> little problem finding sqlite3.h on rpi with the extconf 
      mingw issues. Can't link. Theory: to many -L overriding the one I want.
====> DAMN - don't use cross compiler for config tests. (rpi, mingw) -- 
      not going to work. Maybe use sqlite 1.3.9 source? 
====> I do need to use 1.3.9. 
  
2014-07-31 hpricot
      0.8.1 is the hpricot Shoes has. Stick with it - 0.8.6 build 
      is much different - do we care about hpricot versions? No.
      My chroot env makes testing gems difficult for x86 vs i686
done: samples/expert-funnies.rb - comment out feeds that don't work.
done: hpricot 0.8.1 (shoes default) builds,runs for x86_64, i686, rpi. mingw
--->  OSX seems to be OK but there's no image. No errors either.
===> ssh mini doesn't work but ssh 198.168.1.3 does. Linux issue?
        
2014-07-30 pi & Shoes gems: sqlite3, hpricot, ruby 2.1.2

done:  lib/ruby/gems has 2.0.0 and 2.1.0 - don't need 2.0.0
done:  site_ruby has 2.0.0 stuff. 
     rpi build is screwed up.  - sqlite3 compile failure but the 
       Shoes build continued -- bad.
     Then I looked at the extconf.rb - Ugly. But first:
----> That $ORIGIN thing can affect gem builds.

done: Rollback to 3.2.13. 
done: put symlink back in rakefiles. 
done: Rebuild all (still .13)
     
     
  
2014-07-29
     Playing with the missing gems (Loose Shoes)
     json has a Ruby compile problem. HH doesn't need it.
     Try hh/sqlite3 on pi
       it's trying to compile (shoes setup) 
     All kinds of things wrong with the gems.

2014-07-28

     Shoes ubuntu (default dist, Loose) can't find -lruby. 
     'rvm install --disable-binary 2.1.2 -C --enable-load-relative'
     It looks like -wl,$\{ORIGIN\} wasn't expanded - rvm bug?
hack: might work on the past and in the future. Loose shoes only.
  
2014-07-26

done: Implement ShoesTextView setEnabled: with bug authors solution. Took me
     a while to figure out what's happening.
  
2014-07-25

done: Rakefile (osx dist) - common build - don't ln -s to libruby if it
      exists in dist
done? OSX dist build doesn't know about NFS_ALTP. It does but
      sometimes OSX bash env isn't set correctly.	  
	 
  
2014-07-23 Bug 230 - OSX specific
     It may be an OSX bug but there's another problem - how to enable
     such a thing. sytle(:state = nil) is what the manual says. Doesn't
done: work on Gtk. Sigh!  @eb.state = nil does work. 
     Now we have better test prog. Bug author did provide a solution clue.

     Need a debuggable Shoes/osx. (default dist/ build on OSX)
     LLDB needs to be pointed at Contents/MacOS/shoes-bin
done: Then it works. 
----> generate a .lldb-shoes.init to point there? 
    
===> Looks like the App contents and the plist could use a lot of 
     restructuring. It's not modern. 
     
  
2014-07-22 Bug 264 - checkbox init. Gtk vs Osx. 
     I think Shoes/Gtk is wrong. the block should only run when the value
Done: is changed by the end user's mouse and not the script 
  
2014-07-20 Ashbb rocks!
     Old bug report: https://github.com/ashbb/shoes/commit/b9e86ffd6f2e7438d5aae733e9b6d80ffcee37eb
     has the clue and a patch from Ashbb. Worth trying now that I see
     whats going on. The rbfuncall to cShoes,s_run did bother me. Now I 
     know why.
DONE:  And it works for class-book and my ytm and many bugs

DONE: Shoes 3.2.12 released. New src tbz at site. 
  
2014-07-19
     shoes_app_visit gets called at startup (splash screen) and for opening
     the console '/' each time. In those cases the 
     rb_iv_get(app->self, "@main_app") succeeds (non nil). When entering
     from a script execution (like classbook) it is nil (both 3.0/1.9.1 and
     3.2/2.1.1. Shoes 3.2/2.1.1 console says
     'wrong argument type UnboundMethod (expected Data)'
     
     The external script will pass the unboundMethod check and use the
     exec.block of the method. Almost Doesn't make sense. I think
     it's supposed to xfer the current shoes canvas to the new (shoes) class
     and rebind the method to the new shoes::canvas.  I Think.
     
     Review changes in ruby.c between 3.2 and r1314.
  
2014-07-18
     Wrote a small shoes app (bugs/mod.rb) to show class/module heirarchy
     ccoupe@bronco:~/Projects/shoes3.2$ diff bugs/mod3.0.txt bugs/mod3.2.txt 
1c1
< Shoes::App  (Shoes::App @main_app=(Proc ||))
---
> Shoes::Types::App  (Shoes::Types::App "Shoes")
5c5
< Module  Shoes 
---
> Module  Shoes::Types 

     I don't remember the reason the change was required for 3.1/3.0
     but the new Types:: module is the clue to fixing app.c
     
     I'd list Shoes4 but it's dieing 
LoadError: Couldn't load backend Shoes::Swt'. Error: no such file to load -- swt
org/jruby/RubyKernel.java:1085:in `require'

  
2014-07-17
     Resurrected Shoes r1314 (Shoes 3.0? ).
     class-book sample runs. ytm.rb runs (except it has encoding problems
     with ytmsec.csv but the file is optional for startup).  
     
     Clearly, I've lost something in Shoes 3.2 and 3.1
     I suspect  app.c:362 is not returning what the rest of the code expects
====> This is fun. if you open class-book or ytm from the Shoes splash screen
        There is a shoes console message:
          wrong argument type UnboundMethod (expected Data)
        when run from shell 'dist/shoes samples/class-book.rb' it seqfaults
        Sigh. 
        
----> for additional confusion, my upgrade to 14.04 and autoremove caused
      libungif to not be linked up (dist/shoes only)

2014-07-16

----> Get ytm working with Shoes 3.2, package it for Demo purposes.
      Segfaults at app.c:316 (from 372,484,263,240) it maybe
      trying to raise and exeception (wrong number of args)? 
      Check the macro to see what's going on
      
      Real deal bug. samples/class-book also dies the same way.
      What changed ? url handling? Shoes context/modules stuff?
      
----> Manual makes no mention of the url command.

done: What's new in 3.2 (developer level) in Wiki.

2014-07-15

done? Website(s) favicon.gif and .ico
----> Wiki, main page at shoes.mvmanila.com - add links to
      What's new in 3.2 (user level)

      
----> Try hacketyhack.
      .run fails of course. 
      Get github source zip. Install hpricot, sqlite3 (Loose Shoes)
      Appears to work. Strange packaging. Not sure I care if the author
      has abandoned it. Then again someone filed a bug report yesterday.
      Tar baby. Do not touch.
  
2014-07-14
     Rearrange mvmanila.com
       create shoesrb.mvmanila.com
done:         DNS create
done:         populate with jekyll output
----> Need a sftp method for changes in _site to get to website.
       create walkabout.mvmanila.com with WP install
done:         DNS create
done:        wordpress db create  - re use 
done:         export/import shoes.mvmanila.
done:         wordfence, akisment ....
done:      Change shoes.mvmanila.com to be static
done:         jelkyll output (modify url)
done:         delete all wp stuff except public/ and wp-content/uploads

  
2014-07-10
done: Fork shoesrb.com (the website html...) so I can modify it and issue
     pull requests.
     
     Make it work with a local jekyll/webrick 
done: buttons/links don't work - missing .html
  
2014-07-08
----> Created issue 264 https://github.com/shoes/shoes/issues/264
     on Linux, checked: true causes the click proc to run when being
     setup instead of waiting for a user event. 
  
2014-07-02 

done: OSX packaging from Shoes-Windows. Copy the Linux code/intent.
     Should be easy (snort). Damn cache. Gsub to replace Shoes.app with
     <script>.app for caching.
done:  Sigh. OSX bash doesn't like dos file formats. Create the xxx-launch 
     script 'wb' seems to work for Windows. 
     
----> Should investigate/replace Red shoes icon with mine for Windows
      installer, but who really cares? 
  
2014-07-01
     Not likely to be zlib version issue. pkzip doesn't like the +tmp/run.gz
     file either. Copy it to Linux and unzip doesn't like it. Sizes differ
     for the run.gz on windows and linux. So windows is reading too far
     in Shy.hrun or the last block is not copied. Assume the first.
     Indeed Shy.hrun report two different values for pkgf.pos
     Linux 9411
     Win7  15977 The difference, 6566 is exactly the difference between
     the run.gz sizes. Why does Windows do it wrong? 
done: pkgf = open(@work_path,'rb')  I didn't have the ',rb' Duh!
     Works too.
     
done? Windows after it downloads, it doesn't move on to actually packaging
     Might be related to my testing or that warning message. Or not. Windows
     thinks its unresponsive. it is. Quit and restart works. Problem also
     went away. 
  
2014-06-30
----> Ruby/Windows doesn't think the +tmp/run.gz file is a gzip format. 
     I'm guessing it can't find it from LIB_DIR (on Windows). Wrong guess.
     So maybe it's a libz version mismatch with windows + linux + ruby.
     Certainly possible considering where my Windows came from and Ruby 
     cross compilie and the damn rake files for that. 
     
===> find out why/how cobbler and app_package swallow execeptions. It's
     very difficult to debug my typo errors without the shoes console.
     
done: Fix regexp in cache.rb LIBDIR replace Windows \ with /
     could effect all kinds of things in Shoes/Windows. Or not.
  
2014-06-29 writing .tgz from Zlib/Gem::TarWriter
     Harder task than I thought. Linux works on Linux. 
     Now Test it with Windows packaging a Linux.
  
2014-06-28
     Keep the OSX build/download as tgz. Untar it into dmg or hfs virtual fs
       That involves exposing (and much testing) of some of the hfs code
     Change the OSX build to dmg if that fails. That doesn't fix packing 
       Linux on Windows
done: Another solution would be to detect +x mode settings with extracting
       and creating a hash of the filename => settings
       and then when creating the run/osx-tgz the tarczf would check the
       hash.  Requires creating a Gzip::TarWriter.  I create a hash of
       all the input file/dir names => modes (yes hash collistions might
       exist) when extracting the run/osx-tgz
done: Write the gzip/tarwriter that uses the @tarmodes hash.
  
2014-06-27
----> Pi packaging when downloading has a screen re-layout every 3 seconds
      or so. Not sure I care that much.
----> OSX packager - clean out +dmg when done.
----> Windows oddities.
done: Shy.xzf is too slow even for Ruby. It's slow in irb so it's not Shoes 
Yay!  http://dracoater.blogspot.com/2013/10/extracting-files-from-targz-with-ruby.html
     The (recompressed) file is a little larger. That should bother me.
done: New fastxzf() stops copying after libruby2.1.0 dylib on Windows
     symlink? YES!. Do I need to create those symlinks for OSX? - NO.
====> Untaring in Windows (for pkging Nix or OSX) doesn't save the +x mode
     bits so shoes-bin, shoes-launch or isp-launch won't run. This is
     something of a show stopper. Dmg could be made to work again for
     OSX but Linux .runs? 
done: Make fastxzf() work with .run (Shy.hrun) - split the file? 
  
2014-05-26 Test packaging of isp.rb
----> Shoes/Windows build for
OK:   isp.rb runs in Shoes 3.2.11 windows
      osx - doesn't finish extract
      linux - doesn't finish extract
OK:   windows
      There are oddities on Windows. The isp.exe install 3.2.10 not 11.
      The installed shoes was built on 6/15/14

OK    Shoes/OSX build for 
OK    isp.rb runs in Shoes 3.2.11 OSX
OK    osx,
OK    linux - raspberry
OK    windows - builds exe. exe causes Shoes to be installed in system. Runs OK.
      
OSX   Shoes/Raspberry build for 
OK    isp.rb runs in Shoes 3.2.11 raspberry
OK    osx,
OK    linux_x86_64 - runs.
ok?   windows - same size. It'll work.
  
2014-06-25 OSX packaging
done: OSX basics: Untar the download, copy the 'packaged' script/dir into
     the Contents/MacOS (where shoes-bin and shoes-launch live) and then
     copy/modify some scripts in there. Then tar it back up.
     How hard could that be? 
----> Can Shoes Windows pack OSX and a Linux?
----> Can osx have two apps in one tree? isp.rb and shoes.rb?
done: Cocoa-launch tied to /Applications/Shoes.app
     may call cocoa-install which is a binary that downloads shoes (from heroku?)
     Don't want that. I want the shoes-launch to be copied and named
     isp-launch. 
     
2014-06-24  
done: modified linux packaging to include arch in the output file.
----> Shy progress (and minitar) is not up to snuff i.e. Doesn't work.
done: don't use shy progress. Sadly that doesn't improve the extract speed
----> can I use gem tar handling? 
done: Shoes linux can package an .exe that works on Win 7
----> OSX should be fun. bz2 instead of dmg. tgz appears to be OSX friendly
      so repack_osx could look a lot like linux? 
done: Include binject in the osx compile. Oops!

2014-06-23 packaging for linux
done: Armhf: One solution is to not create the extra libruby variants that need
      a symlink.  Worth a try.  Works OK with /tmp/selfgz, --target and --keep
      although the latter two get an extra full size copy of libruby.so 
      so the ln -s must be creating it. Changing shoes.launch affects
      any distributed linux. be careful. test a lot. It appears to work.
done: X86_64: modify tasks.rb 
done: i686: modify tasks.rb. 

====>   Using the pi, with a downloaded shoes - try packaging isp.rb for X86_64
        Downloads OK. Throws gdk error?!? attempting to use it. GUI wiring 
        not right for those Shy calls? Locale? 
        Gdk:ERROR:/build/gtk+2.0-x7uJoT/gtk+2.0-2.24.10/gdk/gdkregion-generic.c:1114:miUnionNonO: assertion failed: (r->x1 < r->x2)
./foo/shoes: line 22: 19394 Aborted                 LD_LIBRARY_PATH=$APPPATH $APPPATH/shoes-bin "$@"


2014-06-22 Package isp.rb (raspberry)
----> minitar is slow - gui/thread related I suspect. get the progress bar
      sorted out
----> No progbar reporting - hint for above.
done: Add arch to filename. isp-armhf.run
done: test isp.run on pi ./isp --keep bingo! the lack of symlinks in minitar
done: The 1.9 hack in shoes (.sh) fails.  Fix platfrom/nix/shoes.launch
done: Fix only works if /tmp/selfgz -- rethink how it should work (--keep) 
      or --target - Modify the bash script to check the libruby symlink
      and modify if needed extracted Shoes or not.
      
done: Didn't detect a changed armhf.run timestamp
      
      objdump -p libshoes.so | grep NEEDED could be used like install_name_tool?
  
2014-06-20, 21
done? Get downloader and progress bar working.

    Download is s.l.o.w. Really slow. 
    
done: Check dnldir file size => website, timestamp >= website
    Use cached download if user confirms.
    
===> Seriously confused. Now the download goes fast. I'm not sure what 
     I did. If gem handling worked that fast it would be really good.
     It has something to do with the Shoes GUI and download.

2014-06-18,19 Rewrite packager GUI
    Still not sure where I'm going with this. or why.
done: Basics - Get list from server, build buttons to pack them.
done: Download needs pretty progress bar.
----> Needs to work too!
done: Get the url handling 'better'.
done: Add info button to Cobbler.  
done: Add Packager URL's button to Cobbler.
  
2014-06-17
done: arm build - wrong ruby versions, twice the size.
done: osx - yup the switch to 2.1.2 from 2.1.0 broke the rakefiles because
      the copied ruby lib is still 2.1.0. Sigh. My bad.
  
2014-06-16 
====> Downloadable VM's images of MSW (XP thru 9.1), 90 day trial,
      can be re-installed after 90. Just what Shoes needs for win 8 and 8.1
      https://www.modern.ie/en-us/virtualization-tools#downloads
      
done Move Linux chroots to Ruby 2.1.x (osx, windows are 2.1.x so I should
      bite the bullet. Theres talk of EOL for 2.0.0 already. Might fix
      the pysch.so problem (I doubt it, but it's possible).
      It's libyaml.so.... That was updated (debian update) since last test
      My cleverness with auto update on the chroots. I didn't think about
      Rebuilding Rubies to link to the newer libs. Yes, upgrading to 2.1.2
      would have fixed it but I wouldn't have discovered the real problem
done: Also have to copy libyaml-0.so.2 NOT libyaml.so
      Install-name-tool is looking smarter than I thought. 
      
done: i386: Modify rakefile for 2.1 (/usr/local/ and ruby2.1.0.pc)
done: x86_64 " 2.1.2p95  - Ubuntu OK, Fedora OK. Suse OK. Open-Fedora is a pig.
  
2014-06-15 Testing 3.2.10 (first non beta) VM Tests:
done: Windows - Shoes OK - Ruby 2.1.0 - installer thinks its 3.2b5
      The b5 thing is Windows remembering the last install of Shoes. NBD
done: armhf - no problem other than speed for gem handling.
done: i386 - Cobbler/Gems can't find pysch.so. Ruby 2.0.0
done: X86-64/Suse - Shoes OK. Ruby 2.0.0 
done: X86_64/Fedora - Cobbler/Gems can't find pysch.so. Ruby 2.0.0
done: OSX/Niresh - doesn't have /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib
      need the install-name dance for Ruby's *.bundles
  
2014-06-14 osx shoes/cocoa.m
      Fixed shoes_load_font.  
done: runModalForDirectory:file - replace with runModal
done: Maybe I can fix ask_save_directory. I want the new folder button
      and that's not available for OpenPanel. It's working OK enough. 
done: setTitle in file/folder dialogs
----> should fix Gtk2 save_folder dialogs (if possible)
  
2014-06-13 OSX shoes/cocoa.m
done:  shoes_load_font(filename) is fun. Switch to url instead of FS, ATS
---->  lldb is the command line debugger.  complains
        error: '/Users/ccoupe/build/mavericks-x86_64/Shoes.app' doesn't 
        contain any 'host' platform architectures: x86_64, i386
      Is that a plist problem? no debugging info in files? Yes, Yes and
      still doesn't work.

2014-06-12  OSX shoes/cocoa.m
done: shoes_font_list() appears to work.  Using CT (core text)
 
2014-06-11  Do something easy on OSX code base
     OSX Font handling deprecations produce a lot of warning messages.
 
  
2014-06-07

done? undo the damage from installing gtk2 with homebrew.

====> Rakefile:osx_bootstrap_env just seems wrong. Is there no better way?

2014-06-06
     add export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig
     tweek Rakefile to use /opt/X11.. capital X damn it!
     add SHOES_GTK_OSX  use to condition shoes_get_time
done: Shoes compiles.
done: Link shoes.dylib, shoes-bin
----> install_name doesn't want to fix libcairo for libz
      Why are we copying /usr/lib/libz.dylib at all? Tweek to not copy/mod
      if /usr/lib.
done: Execute: osx/gtk wants a display. It does use env DISPLAY but what's
      the value for what I've got.  Much googling. Known issue - weird 
      solutions that are not appropiate for Shoes users. 
      
done:  Abandon the experiment. Now link failure for shoes.dylib. I suspect
     brew install gtk altered something. Grrr.
  
2014-06-05 OSX GTK2 experiment
     Note the ENV var warning (see notes/OSX-Rakefile.txt)
done: Modify env.rb. Good luck and remember to have fun.

done: rewrite 'What is Federales' for blog,
----> wiki page.
     
2014-06-04
     Did I know that 'brew install gtk2' and 'brew install gtk3' is claimed
     to work? That screams "Try me Cecil! Try me" I must resist the urge
     to create another set of rakefiles in make/
     
done:  Get ~/bin/build-shoes-osx working via ssh 
       It was harder than I thought.

done: Get ssh from mainbox to mini working w/o password prompt
done: PITA cron/ssh/bashrc/bash_profile 
done:  Add to weekly build script. 
----> Cut down the warning messages from clang. Good Lord does it complain!
      It's because they use Ruby's -W settings.
  
2014-06-03 Wrapping up B9 on OSX - Rakefile and B9. Next will be 3.2.10

Done: Fixed Tight Shoes rake files. Works in VM (w/o homebrew or xcode or
      an installed ruby). 
----> Disable homebrew patchs/git ...
----> Loose Shoes
done:   Rakefile - declare Loose
done:   Different launch stub w/o/ the pangorc/modules/query
        Copy libruby.dylib or -id/-change the linkage to it's home.
---->    Or hack: create a softlink. Fix it. Still not right but Good enough?
done:    Don't allow 'rake package' or rake 'installer' for Loose Shoes, OSX. 
        Add -c cobble to Shoes.app menu 

----> Readme.Source
      how to compile, run Shoes from command-line .... to be written
  
2014-06-02 Mac Rakefiles

Done: Got tight shoes 3.2b9 working for OSX. 
Done: Setup OSX Test VM guest on mac mini (not an ubuntu guest).
     pango.modules file is still not correct see below:
     
done: need to copy/install_name_tool fixup on ruby's ext deps like
     openssl.bundle They are linked to homebrew's /user/local/opt or 
     /usr/local/Cellar or ...
     do this in pre_build where I copy ruby. Two phases
     copy and fixup (-id, -change) Note: otool works on .bundle
     
----> Set up Loose shoes (default) build. No extra copy of ruby, or gems
     or install_name_tool. ftsearch ext needs cache.rb love, prebuild/copy
  
2014-06-01 Mac Mini shoes dev
----> Don't use the rakefile homebrew install. It's out of date.
     Update wiki, rakefile to not do this.
     
done: pango-querymodules depends on an /opt/X11/lib/libXft.2.dylib thats
     not copyied and cross linked to pango-querymodules. so pangorc doesn't
     get created at Shoes.app startup. 
done: remmina is an OK VNC client. Works OK with OSX. 'Remote Desktop Viewer'
     (ubuntu) also works nicely. 
done: b7 osx doesn't have the font problem. has pangorc and pango.modules
     contents are correct for the context @executable_path.
  
2014-05-31  Real Mac Mini
done:  Tight Shoes: Still needs some libtool work for pango-querymodules
        Borrow from Rakefile. 
done: Font problem returns. Pango, oh my Pango.
----> Loose Shoes: Needs copy ftsearch.so + rb into the proper place.

  
2014-05-30  Cobbler
done: Read the rubygems/code: spec_fetcher.rb is called from
     commands/query_command - does the reqexp (-n) search.  Not clear
     how to do that from API. I don't think the wildcard search is
     worth the effort. 
     
done: use Specification._all instead of .all -- keeps the warnings
     away. Better: .each works.
     
----> OSX: pango-querymodules copy - permission problem. Weird. Try again
    and it's OK.  Neither source or target is NFS. Weird. I think it's
    rake clean. Must rake clean after rake osx:setup:maverick. 
----> Something is creating NFS/dist and it shouldn't.
    Minor problems.
----> 
  
2014-05-28  Cobbler
     Acting OK thread wise and flow of control wise.
done: Need to get the status messages working.
done? Deal with gem exceptions
done: Test simple-rubygems. still works unless called from Manual.
      It probably never worked - setup calls visit to return/restart the
      script. That's a hack.
====> Deprecate Shoes.setup (change the manual)
      
done: Need the replacement for Specification.all
done: and wildcard remote search - won't do this.
  
2014-05-27  Cobbler
====> I think the best thing for cobbler is to NOT re-purpose Shoes.setup.
    Just add a progress box to search & install - borrow the code for sure
    but rewrite it to do what Cobbler wants. Shoes.setup would be 'Legacy'.
    Non trivial because Shoes.setup was never really finished (by me or
    the original author).
    
  
2014-05-26  Unravel Shoes.setup problems
done: Major Huh? looking at shoes.rb:124. Copy the whole thing to be
    a cobbler funtion.  Ah, I see what's happening. Shoes@setups is a cache
    so that you can't have more than one 'Shoes.setup' block in a script. 
    That illusion doesn't apply to Cobbler. 
    
done: Move 'manage gems' button to be avail on loose and tight shoes.

2014-05-24
done:  Release b8. Not much different from b7. Cobbler improvements.
      maybe some OSX stuff. 

2014-05-22 Cobbler/Manage Gems

done: search works with exact names. Good enough for now.
done: catch search failure
done: Test: installed sqlite3 (which requires a compile). It properly
     showed an error and suggested I apt-get install libsqlite3-dev.
     Then it installed it via Shoes.setup and compiled it and then
done: write the uninstall code for Cobbler.  Works OK.
done:  should not allow deletion of System gems. It doesn't. Should
       catch the exeception. 
done: Not refreshing after install
done:  spits out a console message confirming deletion. Need a GEM::UI. ick.
done: OSX Cobbler - can only install once.

done: Need a better download mechanism on my website.  Wordpress Plugin?

done: Figure out a better remote search like 'gem list foo -r' does.
     5-30-14: decided not to.

2014-05-21 Do something fun
done: Display existing gems in Cobbler?
done: Rescue search failure
done: Find all remote gems by name (wildcard)
  
2014-05-20 OSX Tight Shoes
done:Missing the main font. How odd. Be careful. Pangorc ????
     pango.modules/ nothing inside. copy code from Rakefile.

done: Can't link against {TGT_DIR} for -lruby.2.1.0. test 2.0.0

done: simple-rubygems works OK  bluecloth compiles and installs. 
      - some errors on console shoes.rb:124 (from help.rb:142)

done: Add bz2 installer instead of dmg. 

----> Redo Rakefile/OSX for a loose shoes compile. Lots of cruft
    in there and my Tight Shoes rake files. 
      
----> Should x11 stuff be there? redo homebrew with the --quartz ?
     Take notes this time.
     
  
2014-05-19 OSX - Tight Shoes cfg

done: copy libruby.dylib to dist {$TGT_DIR} in prebuild 
done: Link with that dylib
     Have enough ruby working to get splash and right-option-/ 
     brings up the shoes console with box glyphs for the error messages.
done: Tied to /System...Ruby. It's the shoes-bin linking (make_app) 
     Ordering of _-L and -l? BEEN HERE BEFORE. Be wery wery careful.
done: Get symlinks working before twisting the LDFLAGS/LINUX_LIBS
done: Copy include dir in prebuild and use for compiling. 
  
2014-05-18
    One thing that might help is to copy Ruby dylibs, includes, to dist
    in a prebuild step (as I do for the cross compiles) and compile with
    and link with them. Would need to set things properly in make_so but
    tinkering there is a given no matter what else happens. 
    
    Even better, set up the Rakefile to have separate sections for OSX:
    Loose Shoes and Tight Shoes.  Tight Shoes will use the old_build
done: style with make/mavericks-X86_64/env.rb , tasks.rb and do all the 
    clever re-jiggering of paths
    
    Loose shoes currently exists inside the Rakefile. It should be moved
===> to make/darwin/?? 
    
    
    
2014-05-17  RVM, OSX
    First, one must learn about install-name-tool and the hurdles it 
    inflicts and the improvements - @rpath
    At this moment, I've copied libruby*.dylib separately but not fixed the
    path nor told libshoes.dylib about it.  A good place to start:
    https://mikeash.com/pyblog/friday-qa-2009-11-06-linking-and-install-names.html
    
    It think I'll undo my changes and see if I can fix dylibs_to_change
    
  
2014-05-16 OSX and RVM
    installed RVM and then 2.0.0p451 and 2.1.1. 
===> compile shoes OSX with 2.1.1. 
    Rakefile Doesn't copy libruby*.dylib to dist. RVM fun? Been here 
    before - but different. OSX tries to find the dylibs linked to 'shoes-din'
    and copy them. dylibs_to_change () Fails to copy a rvm ruby because 
    it's not allowing for relative paths. The quick fix would be to copy 
done: it from EXT_RUBY 
done: (and the includes dir needed for gem building)
done: Also need to run install-name-tool on the copy. 
    
done: Part of me wants to rewrite all the too clever functional code with 
    something that's less fragile. Should do both. Probably won't. That's
    how cruft accumlates and no one knows if its right, wrong, unneeded.
  
2014-05-15 
    Cobbler option to copy Samples. Test with Win7 
done: WTF? cache.rb (tight shoes) doesn't handle ruby 2.0
     actually that's leftovers from extconf which does things differently
     in Shoes 3.2
    OSX is a Tight Shoes. It's using System's Ruby not the included Ruby
    DYLD_LIBRARY_PATH ? Plist?  cache.rb ? C startup code? 
  
2014-05-14 OSX tbz
done: fix tbz naming in tbz_create. 
---> fix internal/menu naming for - not so easy for OSX. 
     OSX,
     Windows (2), 
     Linux (all 4 of them)
===> Jail break for OSX - GEM_DIR setting?
     
---> Ask_save_folder is barely usable (Linux: theme? ), crippled (OSX) 
  
2014-05-13 Fooling with OSX

done: Perform many thought exercises about next step for OSX. Try to
    buy used mac mini. Fail.
    
    Back to creating an OSX installer (mo' betta) Rakefile
done: 1. Copy the samples into the .app tree (copy_static_to_dist?) 
        They always were. still are.
done: 2. Revert my changes. setup_system_resources belongs in build not
       install task. - For now.
       VERY IMPORTANT - must 'open Shoes.app' do not do './shoes-bin'
       Now keyboard works, console works, things quit. 
--->  3. For install, just create a tbz of the app. - no dmg BS
        Revise and review NAME & APPNAME constants and dist filenames
        for osx/windows/linux. 
--->  4. Cobbler option to copy samples/ to a user directory. (all OS)
--->  5  review the launch scripts 
--->  6. what is bundler helping me with?
--->  7. Univeral build. Why ? what does rvm ruby do on 10.9
    
2014-05-08

done:?  I think the ds_store file has the name embebbeded in it so I just
    can't change names and expect it to work.  I've managed to get the
    Federales icon show up on the old installer background. 
===> For OSX, samples in the manual don't exist. That's a shame. It
     Why can't they be stored in ~/.shoes/federales . Sure they can't be
     inside the app/contents. Hmm. That would be good for windows, too. 
===> Both OSX and Windows Installers (and the Rakefile) are very frustrating
    about what CONSTANTS are used for what purpose. 
    
  
2014-05-07 OSX stuff

done: finished rakefile mods to help speed with NFS.

done: Used http://iconverticons.com/online/ to create federales.icns in 
    icon/ 
---> background image in .app installer is blank (not found). Odd. 
---> The Hackinosh VM is frustrating. 

  
2014-05-06 - OSX stuff
    In OSX, Rakefile checks for ENV var NFS_ALTP which if set, contains
    a local path for pkg and dist directories. That way the NFS write
done: traffic is reduced.  "$ export NFS_ALTP=/Users/ccoupe/build/"
     Is what I use. That trailing slash is critical. 
     
---> Installer seems to work. 
---> Should use Federales icons. Deep dive there.

done: Should have 'Shoes 3.2' installed name so it doesn't install on top
     of an older Shoes. Decided to use 'Shoes-federales' instead. 
     
done: Do the same NFS thing to dist/ PITA but would save me time - I'll be
     building shoes often. Sadly, TGT_DIR is what I'll use. 
     which will contain dist/, pkg/, dmg/
     
done: setup_system_resources task should use /tmp instead of implied dist/
done: Should be in package task, not build task. dist/shoes-bin runs fine 
     without all the .app building overhead 

===> Known bugs with samples
===>   accordian, menu, menu1.
===>   dialog - color - hangs. must be killed. 
===>   editor, form - others:  Keystrokes are not delivered to Shoes
===> Doesn't exit

  
2014-05-05 Cinco de Mayo! 
  Fixed some bugs identified yesterday. The Manual works, many samples
  work. Some have OSX unique bugs (accordion, menu)
--> Whats the key chord to open the console in OSX
done: Write a README.Federales and include with binary downloads. 
--> Shoes doesn't exit. Have to pkill shoes. 
--> Shoes cursor doesn't highlight clickables
  
2014-05-04 OSX Shoes

  Homebrew dependecies needed a lot of work and may still be incorrect.
    A lot of deps are 'kegged' which is a real pain. 
    Xquartz deps in cairo, pango are worrisome. 
==> For certain, the instructions to install xquartz before attempting
   homebrew install needs to be added to the Wiki.
   Glib was a pain. had to copy glibconfig.h to 'main' includes
   In Rakefile, add GLIB_PATH, PKG_CONFIG_PATH 
==> Yes the rakefiles need a lot of love and attention. Grrr.
done: Seriously slow to compile and link and copy stuff around.
    Helped a bit with rsize=8192,wsize=8192 in /etc/automounts/nfs
    Move the dist and pkg dirs to local disk helps a lot.
done: Don't build with bloopsaphone/portaudio, sqlite, hpricot,json.
done: need to arrange dist/lib the Federales way (no dist/ruby in 3.2)
--> Right/meta (right/Fan on Apple keyboard) on linux Virtual box
    switch to Left/meta somehow?
==> Pango/modules don't copy - permission problem. Rakefile?
    It's trying to copy them twice /usr/local/lib and /usr/local/Cellar
    Homebrew kegging issue? 
    My hack doesn't work that well.
==> Install rvm and Ruby 2.0.0
==> Why build a Universal version (x86_64, and i386) when Mavericks only
    runs on X86_64

2014-05-03 Hackintosh.

done:   automount working. 
  Found the MacOSX10.9.sdk deep in /Applications/Xcode.app/Contents and
     fixed that in make/darwin/env.rb (10.8 too)
     
  compiling app.c:5 tries to include glib.h. I think it's homebrew time!
--> Home brew failed to install (see notes/homebrew-output.txt) some libs
--> lockd hang on OSX writing about to Linux (output was finished though)

    I might have missed the homebrew part about install xquartz. Oops.
      Ick, there's some ugly I didn't need to think about.
  
==>   could not find libpng not in pkg-config search path. when
   compiling cairo. 
    
    make/darwin/homebrew.rb has the formulas.
done?  fix make/darwin/env.rb to use RbConfig.  
    Why the bundler bs? need xml2 for nokogiri. why is that need to build
    Shoes? 
  
  
2014-05-02
   Hackintosh. 10.9.2 upgrade. Xcode installed. System Ruby is 2.0.0-p451
   which is good. Should really try rvm though.  The OSX VM (IP:10.0.2.15)
   can talk http and ssh with my 192.168.1.x network
   
   Get osx automount to work.
   

2014-05-01
   Hackintosh in VirtualBox. 10.9.0
  
2014-04-30
   Trying hackintosh again. I know, I know, but there are hints of
   fake root and cross compiling from Linux. 
   Lots of trouble with the niresh dmg using 10.8 and Virtual box/Linux
   Download his 10.9 iso. 
  
2014-04-29
   Basics of Cobbler layed out for jailbreak and image cache (clear)
done: Cobbler works for Tight Shoes Jailbreak
done: Cobbler works for Tight Shoes cache clearing. 
---> Make cobbler pretty with colors and swirly stuff.
---> Memory leak in animate?
  
2014-04-28 Status Report
---> Fix compiler warnings / flags on the ext's. 
done: Handle 404 errors in image.rb (samples/simple-image.rb)
---> need abort method in rbload.c
---> Cobbler ideas:
done: 1. Image cache clear
done: 2. Jailbreak - need to fix cache.rb
---> 3. Gem manager?
---> 4. OS dev dependencies install (apt-get, yum, ..) 
       Extra points for MinGW and RubyInstaller.
done: 5. Command line option, splash screen link. -c --cobbler
     shoes/cobbler.rb
     
===> Get ytm.rb working with Shoes 3.2/Ruby 2 because it's multi-screen
    and I need to test that. 
fixed: Failing on CSV.open (Ruby 1.8 syntax) use CSV.foreach.
---> I didn't pay attention to the memo about url and visit.  url 
    deprecated to vanish land and visit is not so easy to grok (app.c|h)
  
2014-04-24
     I can't handle the Apple eco system. Been there - don't want to go
     back. Virtualbox provides little support for Hackintosh as a a guest
     OS. 
  
2014-04-22 
     I wonder if I can install osx 10.8 in virtualbox? And get the tools
     need to compile and test shoes? I'd need that for Shoes 3.3 walkabout
     I used to be an registered Apple Dev. I wonder if I can find more 
     distractions than Jesus had jews?  I installed 10.8 w/o too much
     trouble. 10.9  and then xcode, is a different story
 
  
2014-04-21
     b5 released. 
===> add image cache clear option to mythical Cobbler app (specs)
===> Need to handle 404's in sample/simple-image.rb, rbload.c 
---> Need to update the wiki and shoes pages to offer Shoes 3.2
done: Need to tar up the source code.
done: Shoes/Windows Manual & Console complains about 
     static/shoes-manual-apps.gif It's the only gif in shoes and used
     twice in each of the en and ja. It is broken on Win7.
     Convert to png. change the manual-en.txt. Works on Win7.
---> create a fixed/ dir with bug report snippets that have been fixed
     and need to be closed at github. Created a bugs/ dir that has samples
     of old bugs that do need to be fixed. 
---> Updated the github issues with 3.2 answers. Maybe Steve will wake 
     up and clear them.

2014-04-20
done:  sbdm working.
done:  rbload.c working - I should clean up the code but..
done:  download.rb working for download command (still no fix
      for the length reporting of an html file (compressed?)
done: Test the 'run this' examples in the manual
done: Fix header files to not require curl.h 
--->There is a typdef warning on a function that's never called.
done: fix the dist build to not include curl.so or curl.h. tested.
done: fix the pi build to not include curl.so or curl.h. tested.
     windows msw -- not sure I care about this one.
done: windows gtk2 Builds. Runs. Tested
done: x86_64 Builds. Runs. Tested.
done: i686, Builds. Runs. Tested.
 

2014-04-19
done: rbload.c has converted the status code and ready to stuff it into 
   req->idat->status and make the next calls to see what happens. 
   
   stepping through with gdb. It works. now finish freeing the headers
done: and stuff in rbload so we don't leak memory. 
done: missing etag from the download. Back to rbload. not quite so simple.
done: do the sdbm version of data.rb
done: datetime. sigh. 

2014-04-18
done: Hookup Shoes.image_download_sync (in image.rb) inside rbload.c
   Download to /tmp/file works. Now turn it into a Shoes image.
   
done create a shoes_image_download_event (canvas.h) and call 
    shoes_catch_message (ruby.c) which calls
      shoes_image_downloaded (image.c:834) which calcs the digest value
    and then calls the notify_cache_of in my data.rb 

done: don't forget to test and fix download.rb re:Threading
done: Write the sdbm cache code. 
  
2014-04-17
    Time to pause and lookabout. Using thread.exit is a hack that indicates
    lack of understanding. Setting thread priorities would be even worse.
    
    Still more flailing around. My arms are tired. 

done: I'm going to create a new Shoes::image_download_sync method in
    image.rb can call that from deep inside Shoes (rbload.c)
    Then download.rb and it's progress reporting can work (or not) with
    out the complications of internal image handling double duty.
  
2014-04-16
    download.rb - it fulfills the contract in Shoes manual. Kind of sucks
    at at progress reporting. 
    
    The imgage file is in /tmp/ now I need
    to finish the download the way curl/nsurl.m/winload does so shoes
    displays the image. May need a working sqlite/sdbm cache
    
    Plan C - fix curl cross compile on pi, test gtk2 on windows with
    opened fire wall. 
    
    Plan D - only the hackety folks might be using 'image #{url}' so
    deprecate the image.c downloading (and curl and sqlite cache and ...)
  
2014-04-15 image loading
    Tough sledding down the ruby.c image.c curl.c slope in order to
    get rbload.c written. I'm worried about the threading issues.
--> Need to find cShoes and make a cDownload object and call it.  Hard.
--> Hack ahead: use the DATABASE constant which acts as a singleton so
    there may be trouble ahead with ruby versions. see backup plan below
--> can I use the existing Shoes class Response (see ruby.c) in download.rb
    and what is the right value for status? 
==> data.rb - need to wait for the download thread to finish.
--? Backup plan:
    Possible to write the image download as part of the data.rb?
    on a cache miss, call download and then return the etag, hash
    Just have to figure a ruby version of the hash & copy the file there
  
2014-04-14
    Add RUBY_HTTP to make/linux/env.rb which adds -DRUBY_HTTP which I'll 
    use to #ifdef curl (or winhttp) out of the compile. 
===> When working, use RUBY_HTTP in all the env.rb and change the link 
    libs. For now, there is no harm for linking against curl even if it 
    won't be needed. 
===> Replace sqlite with sdbm in lib/data,rb
     My loose shoes (dist/) has sqlite3. gem install sqlite3. so
--->  For now, just return 'not cached' so it always downloads.
===> write replacement for shoes_queue_download in http/ruby/rbload.c
done: modify rake file to build http/ruby/rbload.c. Links w/o error.
     the stub in rbload.c is called. req->uri is the full url
     req->filepath appears to be where I should write the contents 
     commit to git and call it a day.
     
  
2014-04-13
    Add msw-gtk build to weekly build.
done: Test b5 downloading on Windows and Pi - works.
    Note: Windows firewall doesn't always connect shoes up. Set manually.
done: upload b5 to site for pi and windows-gtk2. Write a post.
---> the headers from download.headers are not http.headers. 
---> test the open_uri options to set headers (agent ...)
done: Test image http://shoes.mvmanila.com/public/images/dino.jpg
     and script is sample/simple-download2.rb
---> Which fails because it can't find sqlite3 - Huh!?!! who required
    lib/data.rb ? image.c:951     rb_require("shoes/data");
    Jesus A Chr.. It uses sqlite to cache downloaded images. 
    See Download.txt
  
2014-04-12
done: Get @percent progress working
done: get file save working
done: get headers, status, body working
  
2014-04-11
     Many things are not correct. I suspect thread deadlocks. 
     at the moment, deep burping on Shoes console from net/http about buffer
      
     Oh sweet Jesus. Different errors for 1.9.3 vs 2.0.0/2.1.0  
       content_length is reported differently (site compression?) 
       syntax errors not reported differently - parse that twice.
         
     Getting close to working. 
2014-04-10
     Played with adapting shoes4 downloader to 3.2
     
2014-04-03
    Started notes/Download.txt to describe what needs to be done to
    replace [canvas]download and image/download. 
    
2014-04-02
--> This project might be worth poking around in
    https://github.com/spooner/releasy
    
    Sigh. MingW/gtk3 build fails ftsearch/extconf. Been here before.
done:  That rake file hasn't been updated for quite a while. It builds.
    And it runs surprisingly well! Hung Once - doing nothing for 5 min.
Gtk3 bugs: 
    simple-menu/menu1 work OK
    simple-accordian, simple-slide Not Ok. It's all about clip (vertical)?
    
Windows bugs
    Console complaint when opening the manual - static/shoes-manual-apps.gif
      may not be a gif?
    simple-downloader crashes Shoes. I think it fails in native widgets too
    version. Given how well the newer http works with setup.rb, perhaps 
    we don't need windownload or curl. That would be a win for all platforms
    -g/--gem/--ruby doesn't work from command line (-m does)
    simple-rubygems works almost as expected
       Complaint in Shoes console - DL is deprecated, please use Fiddle.
       metaid downloads and installs
       bluecloth fails - as it should - it needs a build env.
       nokogiri downloads and installs it's binary payload - I think.
         fails on require - ruby or C version mismatch?
         
    MinGW/gtk2 build -- seems to work just as well (w/o gtk3 bugs of course)
    
==>  It hangs when covered/uncovered by another window!! ON WINDOWS. 
    Big find! Solution?
    
    
2014-04-01
    Time for a status report blog entry. End of b4?
2014-03-31 
   Started a rapsberry pi level tutorial blog post about Shoes gem handling 
done: and ran into a libyaml.so bug in the rake files. Easily fixed but
   damn this is annoying. 
done: Another bug on the pi. su doesn't work on a default raspbian. 
    workaround 'sudo passwd root'
--> Need to strip rubies ext so's. Might help reduce download size.

2014-03-30
  Haven't done much which shoes for a while now. I'm not sure I
  want to deal with packaging any time soon.
done: got my ssh config sorted out across the desktop, pi, nas, website
  and github. (ssh-copy-id was  very helpful) Also got sudo working on
  pi, & nas.

2014-03-29
  Weekly build (b4) went fine. Good. I should fix something to prevent
  success. 
done: Installed pi OS from scratch again. 
--> delete the x86_64 chroot /site-ruby/1.9.1/.  then again no one cares.

2014-03-27
  Haven't done a thing with Shoes. Read some GTK3 docs that suggest it
  and Ruby threads will never co-exist on Windows. Or maybe I just want 
  to believe that. 
  
2014-03-25
  Just had a thought. Can the Shoes/Windows code get a thread from whatever
  mechanism Ruby uses?  Wouldn't help gtk2/gtk3 windows variations but still
  if Tk/Ruby can run on Windows, Shoes should be able to.
  
2014-03-23
done: Change Windows build (package) to include -32 in the arch position
    for file names.
  
2014-03-21
done: Fix build-shoes cron job scripts - 
     you can't rake clean too many times. add 'rvm use 2.1.0' to build msw32

    Looking at static/stubs/sh-install, pack.rb. Much to be done. 
done: Get select/pkg.rb working at the website. 
  
2014-03-20 
   Fix the binject rbconfig so it doesn't invoke the wrong ruby to build
   the .def file. Save/Restore bindir & ruby_install name (MAKEFILE_CONFIG)
done: It compiles and links with MinGW. It's still not pretty but their
   is nothing pretty about binject (other than it's audacity and hackiness) 
   and its for Windows which doesn't work. 

  
2014-03-19
   Now I remember. rbconfig is now really picky. I can't load the mingw
   2.1.0 rbconfig with a 2.1.1 or 2.0.0 Ruby. It's crap like that just
   makes things harder than need be.  Good thing I have a lot of disk 
   space on the new machine so I can have rvm install these. That's just
   to test if ruby -r <path-to-mingw>rbconfig works. Sheesh.
   
   -r <path>rbconfig.rb does work (with complaints about TOPDIR, RbConfig::
   CONFIG and MAKEFILE_CONFIG - I expected those) It created a Makefile
   and an empty binject-i386-mingw32.def and then died trying 
/bin/sh: 1: /srv/chroot/mingwgtk2/opt/local/bin/ruby: not found
make: *** [binject-i386-mingw32.def] Error 127
   manually invoke 'make' compiles all the .c to .o and craps out on linking
   the binject.so because of the empty .def. I call it progress.
    
  
2014-03-18
    Day's comments lost in power failure. Good. I was really annoyed about
    getting binject extconf.rb working with Mingw. 
  
2014-03-17
    Felt more like debugging the arm extconf.rb today.
    Well ain't I the clueless hacker. In extconf RbConfig::CONFIG is
    used for Compiling/linking the conftest progs that mkmf.rb uses.
    and RbConfig::MAKEFILE_CONFIG vars are for create_makefile. 
    Except it's not that easy. But, it's one hell of a clue. 
done: binject compiles for arm (raspberry pi).
    It needs to be less hacky and more pretty and tested
    x86 compiles. i686 compiles, arm (of course). MinGW - not so much

2014-03-16  Status, in no particular order.
    1. simple-shere (blur) on 64bit linux.
done: 2. extconf for binject. Getting packaging working is a much deeper
       hole.  
    3. running sample-rubygems from Shoes manual works but pretends it
       didn't.
    4. distributing nokogiri and sqlite3 (for Ruby 2.0)
    5. Get gtk3 working.
    6. Windows threading bugs.
    
    Some of those are hard. (6.) may not be possible for me to solve.
    3. is the easiest but least useful.  Still, a bug is a bug
    lib/shoes.rb:      eval(code, TOPLEVEL_BINDING, path) --> works.
    lib/shoes/help.rb:  
       Dir.chdir(folder){eval IO.read(file).force_encoding("UTF-8"),
        TOPLEVEL_BINDING}  --> works but empty error console is shown.
    the 'path' is optional 
     

    
  
2014-03-13
   If only ln -s could confuse me more. 
done: I think I have the default (LOOSE Shoes, build from source) set up
   properly. No need to rake build after editing a .rb in lib/shoes in order
   to copy it to dist. With symlinks, just edit and run dist/shoes. 
   rake install to ~.shoes/federales is more complicated than I like
   but you can rake install as often as you like with/o clean and builds
   and multiple rake cleans in a row and multiple builds. 
   
   Manual bug ASCII-8BIT vs UTF exists with 1.9.3 - I only thought 
   I fixed it. - Select elements/image from the manual. 
done: Well that's embarrasing. I must have lost an edit to help.rb:load_docs
   now reading the file in utf-8 and all is well. 
  
2014-03-12
done: set locale properly in chroots. didn't solve manual problem. 
--> Still have some left over 1.9.1 in chroots (site-ruby..)
done? build/pkg fonts can get doubled up so there are fonts/fonts
--> remove docs from Ruby that Shoes can never use. lib/ruby/2.0.0/rdoc
   in pi's chroot. Annoying to see but it's not that much disk space.

2014-03-11 - still have these bugs:
  Blur on 64 bit.
done?  symlinks on dist (default build)
  Manual and UTF-8:
    Check ftsearch.c for the TODO and FIXME comments.  Not my comments
    _why's?
    Looks like Shoes4 folks rewrote help.rb like I was contemplating. Can I
    borrow their work? It uses nokogiri which is a binary gem to me so
    that's a small problem. It also fails in Shoes4 when searching. 
done: I should report that. Bug #604
    Still their code could be better than maintaining ftsearch in
    a UTF world.  I like that its a separate app (mostly)
    So the work to be done is:
--> replace hpricot with nokogiri and include it in Shoes3.2 binary builds
--> requires shoes enhanced extconf.rb for nokogiri
--> copy their ext/highligther code into 3.2 lib/shoes/ I'll change their
    help.rb to have a different name so they co-exist for a while
--> possible to use rakecompiler to build nokogiri in chroots? for arm and
    msw? Chipmonk is rumored to be a gem. 
--> use TIGHT_SHOES or LOOSE_SHOES constant. 
done? Get the default dist/build working again with symlinks. That would make
    all of the above much easier to write and debug. 
  
2014-03-10
  No warnings when compiling effects.c -Wall w/86_64 gcc.
  Going way up top: simple-sphere.rb it's the first blur (30) that's failing
  The other blurs are OK. Using 20 instead of 30 works. 40 fails. 24 OK
  26- OK. 28 - Fail. 27 -Fail. I have no idea why that would trigger
  a 64 vs 32 bug unless it's related to cairo (we are drawing into a surface)

==> Blur is part of canvas.effects
==> lets see what the shoes manual says about blur. NOT A GOD DAMN THING.
  
==>  It also appears I've got a ASCII-8BIT vs UTF-8 issue again with the 
  manual. I'm not gaining on the b4 bug fixes. Going backwards. This one
  was expected. The ftsearch indexes can't be both index and content. 
  Rewrite the manual handling so it doesn't use mem.io/pack/unpack or 
  or it uses wchar and wb_ calls or remove the unicode content from the 
  manual so that utf and 8bit are the the same for pack/unpack purposes. 
  Fix or hack? Or write the ftsearch in Ruby with hashes and such.
  
2014-3-06
  Started looking a effects.c to find the 64 vs 32 bit fail. It's not
  popping out at me with a "Look here". I might suspect the RAW_FILTER_START
  macro - maybe Gtk2 uses different sizes. Or intermediate promotion to long
  and silent trucation? Grasping at straws. Run x86 and 386 under gdb and
  compare? Ugh. 
  
--> sigh. dist/ default still has symbolic link issues in pre_build
  rake clean, before rake. 
  

2014-03-05
   Sigh. I missed a bug. When simple-rubygems is run from the manual
   it installs gems just fine (if the system has the tools) but it
   throws an error. No error when run from cmd line or splash screen.
==> Not really that big a deal.
   
==> There is a 1.9 vs 2.0 hack in shoes.rb:451
   Leftover from 1.8.7 vs 1.9.1 days and my hacking.  Not sure @shy 
   should matter. 

==> Fix the 64 bit bug in blur (sample/simple-sphere)
  
2014-03-03 & 04
done: Setup shoes.mvmanila.com and import the Shoes related posts. 
done: Futz with google analytics, plugins, 
done: setup static page at www.mvmanila.com w links to blogs beneath
--> delete shoes content at www.mvmanila.com 
done: add blogroll at shoes.mvmanila.com
done: About page/menu
--> Download menu -ick!
done:  directory: public/shoes/federales/
--> Fix links between pages on the build env posts.
done: Do the mime thing on the new blog so .run are presented as binary.
    AddType application/x-makeself .run
    
done: b3 needs to delete/not copy all the doc/gems stuff and get rid of 1.9.1
   debx86, deb386. Shock! Ruby-2.0 is still bloated on the pi. +4MB on
   x86_64. Similar on i686. I shouldn't but I'm ignoring it.

done: declare done with b3. 
    
done: some of the builds are copying some 1.9.1 stuff.

--> Write Raspberry oriented post/article about Shoes 3.2
  
2014-03-01
done:   Ahh! Ruby-2.0.0p451 changed the arch to "armv7l-linux-eabihf"
   -- they added the 'hf'. Now I can compile ftsearch. Dies linking.
   can't find -lruby. Fixed. Odd, chipmunk compiles and links w/o
   changes to extconf.rb which means I didn't have to futz with extconf.rb
   Still, I like the changes to extconf.rb - less hacky.
   
--> Setup.rb is painfully slow on the pi and just tolerable on faster
   systems. Part of it is the shoes animation (it and xorg = 50% of the pi)
   I also suspect there is too much IO going on. Then again, no one should
   need that feature on linux. 
   
--> I added binject to the list of exts built on the pi version. This
   is mostly to test my extconf.rb hacks. There is an issue. have_library
   doesn't use the CC hack that create_makefile allows. Fixed. Doesn't link
   to os libraries like /srv/chroot/debrpi/usr/lib/arm-linux-gnueabihf/libz.so
   It's a mess for binject/extconf.rb 

  
2014-02-28 extconf.rb (pi, mingw*)
   It would be less hacky to set the Configs before requiring mkmf.
done: Good Lord. I still have crap in pi rakefiles. curl from /home/cross?
    apt-get install libcurl4-openssl-dev in the chroot. set env.rb 
    accordingly. 

2014-02-27 
   Is it possible mkmf.rb changed from 1.9.3 to 2.0.0? envgem.rb isn't
   working like it did in 1.9.3. Set a few more configs in envgem.rb and
   i386 version can build and install Bluecloth Gem. 
   x86_64 builds and installs Bluecloth
done: pi - ftsearch fails to compile. extconf/mkmf. sigh.
   I may have pushed my extconf hacks over the breaking point.
--> mingwgtk version needs the changes for ruby 2.1.0 - even though it
    won't work. Or Maybe it will.
--> Madness. Running simple-rubygems from the manual gets an console window
   after successful installation. No error messages in the window.
  
2014-02-26
done: Ruby 2.0.0p451 does't create the ruby-2.0.pc. 'make ruby-2.0.pc'
    works. Copy it manually. x86_64. i386 does the right thing. 
done: update chroots to Ruby 2.0.0-p451
done: update rubygems to 2.2.0 (rvm/dist, x86_64, i386, pi)
done: interesting issues with gemenv.rb and i386 environment. Thats where 
   the .shoes/+gems/x86-linux comes from. should be i(3|6)86-gnu-linux
done: Verify pi version of Shoes behaves (fix env.rb, task.rb)
  
2014-02-25
   That was almost easy. A few tweaks to the extconf.rb and env.rb and msw32 
   builds with Ruby 2.1. Will it run? Will it hang? 
   Oops. need to fix tasks.rb/common_build
==> AND IT HANGS downloading gems. And crashes simple-download. On the bright
   side it did trigger a dialog from windows 7 to allow it to download. 
   so that's interesting and might point to something. 
   
   Make the same changes to the mingwgtk env.rb. and task.rb
   Ruby 2.0.0-p451 released yesterday.  I'll use that one for linux. 
   It appears that 1.9.3 is now in security fixes only status. 
   So 2.0.0p451 is the base for Shoes 3.2b3. 
   Jumping ahead to 2.1.0 wasn't what I wanted to do and didn't help Windows.
   
   Harmonize my linux chroots. (64,32,arm) 2.0.0-p451 in /usr (not /usr/local,
   not /opt/local)
done: x86_64 -> Ruby 2.0.0.
    WTF? - there is no ruby-2.0.pc, anywhere? 
done: i686 - has a ruby-2.0.pc - go figure. 
    Curl linking in shoes-bin. Nothing shoud have changed but obviously
    something did. apt-get remove dance. install libcurl4-openssl-dev
done: Armv6
  
   It might be interesting to see what a GTK3 does re: hangs on windows.
   However, I don't think this a solveable problem by me. 
   
2014-02-24 MingW/Ruby2.0.0-p353
--> Need to change env.rb to find ruby in /opt/local and use ruby-2.1.pc
    msvcrt-ruby210.dll. No need to copy libyaml.dll
--> Ruby: socket doesn't configure. --enable-wide-getaddrinfo.
    now it configures, fails in compile. 
    In file included from rubysocket.h:103:0, from init.c:11:
       addrinfo.h:175:13: error: conflicting types for ‘freeaddrinfo’

--> One the bright side, --enable-pthread is obsolete, suggesting that
    windows/ruby2 might have some improvements in threading. Another 
    benefit(?) is the extconf.rb for socket demonstrates how clever (tricky?)
    extconf.rb can be.
    
done: Yikes.  Cross Compile Ruby-2.1 for mingw32 works w/o 
    --enable-wide-getaddrinfo.  I'm pleased about that but I wasn't
    ready to jump that far ahead.  Still hangs with Wine (1.6)
    
done: Need to fix default build for 2.x before tackling mingw and chroots
    Fun: rvm thinks 2.1.0 is a preview. 'rvm get stable'  Now have 2.1.1 WTF?
    Start the 2.x bug hunt with default (dist) build of Shoes:
done: ftsearch failed. Fixed in cache.rb.
done: envgem.rb needs to handle 1.9.1, 2.0.x, 2.1.x. Note: it's easy to 
    get confused with all the chroots and rvm versions. Even though it 
    works for some who downloads a binary shoes.run it's fragile to me.
    
    Don't forget to update Rubygems (to 2.1.xx or better)
done: x86
done: x32
done: crossrpi

done: OK for rvm 2.1.1 ruby. 
    
2014-02-23
done: Set libdir in CONFIG and MAKEFILE_CONFIG. Both. Go figure. envgem.rb
done: Declared Shoes3.2b2 is finished. Available on the website.
  
2014-02-22
  Success. Bluecloth builds and links and installs in a Tight Shoes 
  (aka binary distribution) if you have all the tools installed on
  Linux. x86 and schroot.
  
done: armhf/bluecloth can't find -lruby for link of mkmf test prog.  Indeed.
   -L /home/pi/.shoes/federales/lib -l ruby  is a /lib too deep to find
   the libruby.so. Also happens for x86_64 on Fedora (it has gcc).
   
--> Why doesn't the shoes/pi console have the gem.out error messages?
   Duh! It does when started from a terminal. Doesn't when started from
   a menu. That seems fixable. 

2014-02-21
  So shoes/envgems.rb fails to setup a build. Parity with cache.rb! Same
  error. mkmf.rb is doing something odd with RbConfig settings. The clues
  are in the extconf.rb that I hacked for ftsearch and chipmunk Only
  those were done in the extconf, after the require 'mkmf'. Now I have to 
  do them before extconf and mkmf. Will that matter?

2014-02-20

  After much tweaks and undos and confusion I think the way forward is 
  to not use cache.rb for 'shoes --ruby'. Use a separate script when
  Shoes needs to compile a gem: 'envgem.rb'. 
  
2014-02-17 Still working on Shoes/setup.rb and Tight Shoes. 
done: Bluecloth gem should be able to finish the extconf/mkmf step. It might
    fail for other reasons but it ought to to create Makefile. I suspect
    Gem::DependencyInstaller.install is not paying attention to the running
    RbConfig or the Shoes hack to @ruby isn't doing what the author thought
    it would do. 
  
2014-02-16
     From the /home/cross/gemtest/lib dir copy everything to the site-ruby/1.9.1
     directory. Build Shoes msw32 and copy it to Win7. Check with simple-info.rb.
done: It's updated. 

==> The gem download triggers the Thread deadlock bug on Windows 7.
    I'm done with Windows and Ruby. Only the ruby maintainers can deal 
    with the issues. Maybe with Ruby 2.x. It appears work has been done
    there.

done: Re-examining the issues with C source gems and linux. The pi (e.g.)
    has a ruby and gcc so it should be able to build some gems. 
done: Include the ruby .h files with the .run (x86, i686, pi)
    Now fails to compile bluecloth because it can't find config.h (pi)
    because the gems extconf.rb generated Makefile doesn't have a 
    -I <shoes-include><arch> which is where the config.h is. There is 
    an error 'uninitialized constant PLATFORM'  from extconf.rb. I can't
    touch a gem's extconf.rb and the problem appears to be in mkmf.rb.
  
2014-02-15
     Gem::Commands::SetupCommand is what I think setup.rb calls
     $ ruby setup.rb --prefix=/home/cross/gemtest --no-rdoc --no-ri --verbose 2&>test.log


2014-02-14
     There's a load of issues with Windows and gem setup, downloading
     from Shoes. I want to think to about dealing with rbconfig (for both
     extconf and gem setup.rb. I'm going finish up the Linux b2 release
     before dealing with Windows details. 
-->  Test armhf. It fails to install bluecloth but it says error. expected.
     Nothing in the console window however. 
     Just install metaid - it installs (very very slow) and a new blank
     console window? Half success - it can download and install. 
==>  Rework setup.rb to only use one Gem API and get rid of the 
     'it works' hacks. 

Done: Still double up on samples for xarmv6 -- a bug that happens if
     your rake package, twice.  
-->  getoutofjail.card parsing. -  make the contents arch specific
     arch:path where arch is Ruby arch or 'any'.
     Jailbreak isn't going to be that useful if there is a Cobbler
--> Win7: - I do have ruby installed (but not devkit or msys) 
     gem install metaid is lightning fast from the cmd.exe prompt.


2014-02-13

done: Overnight build failed for msw32 - chipmunk compile/link. 
      It's a Cron job so source the right paths. That did it.
      Also fixed nsis error.
      
done? Error window after gem install
      doesn't in dist compiled, x86, or x32.  I wonder what changed?
      
--> get msw32 updated to rubygems 2.2.2 (different setup.rb)
    Only 2.1.11 available for download as tgz. Same as rvm. It'll be OK.
==> Confirmed Wine and Ruby do not mix. Same thread deadlock attempting
    to use wine/ruby.exe setup.rb --help. Join a forum/mailing list/report
done: Be careful. There is a --prefix=<path> - that's only for the /bin/gem
    script. I probably overwrote my .rvm 1.9.3 gem code. It seems ok.
    ***set GEM_HOME shell env before setup.rb helps but not enough.  For me:
      /srv/chroot/mingw32/usr/local/lib/ruby/gems/1.9.1
    Thats where the make install of ruby puts it and shoes copies. 
     It needs to copy to site-ruby at /srv/chroot/.... it doesn't (mingw)
     Probably another rbconfig mess.
    
==> Win7: it hangs downloading ANY gem from shoes/setup.rb 
   I captured the Shoes/Win env from simple-info - lots of clues and huh?
   If I cared about Windows. 

==> Definitately have a gem setup problem on Windows. Now hanging with
   Preparing message. Is this a Windows thread problem? 
        
--> read gem paths from getoutofjail.card (cache.rb)
  
2014-02-12 Gems again
    So, it turns out that Ruby 1.9.3+ may include rubygems but it doesn't
    actuall include *recent* rubygems code, but the docs might.
    Updating rubygems is a separate process - an additional step for
    ruby installation/cross compiling. 
    
    http://rubygems.org/gems/rubygems-update shows the commands to
    update ruby gems. 
    
    There is no value in supporting the older GEM API for Linux/Shoes so
    have to pick a Gem version to include with Shoes (binaries). It might
    as well be the latest: 2.2.2
    
   In debx86 chroot:
done: need LANG env set. 
done: Unable to require openssl, install OpenSSL and rebuild ruby
--> fails to compile bluecloth because 
/home/ccoupe/Projects/shoes3.2/x86_64-linux/shoes --ruby extconf.rb
mkmf.rb can't find header files for ruby at /home/ccoupe/Projects/shoes3.2/x86_64-linux/lib/ruby/include/ruby.h

   That's an interesting message. I could copy the includes to go with
done: the ruby. The shoes --ruby extconf.rb indicates that it might work.
   I have my doubts about how many gems can built on a minimal system?
--> None! It would be possible to detect a build system (ruby, gcc) at
   gem install time but that doesn't make sense for Linux. If they had
   all that, they could build Shoes from source. Or use the Jailbreak.
   Might be worthwhile for Windows and pi.  
-->Better to move all that into  ShoesCobbler. 

   In deb386 chroot.
done: installed openssl,libssl-dev, libyaml-dev, libgdbm-dev, libcurl4-openssl-dev
   rebuild ruby (no missing options now).
done: Fail to link Shoes because .... Curl. Oops. I had EXT_RUBY as /usr
   but my ruby was at /usr/local. Who the hell wrote that? 
done: Also have a lovely message at Shoes startup about curl version numbering
   change env.rb to copy the system curl.so.4 that I installed a few hours ago
   instead of the minimal curl I compiled weeks ago. So many ways be wrong.

done: installing bluecloth gem fails to compile (expected behavior)
  it fails appropriately on the Debian VM. All is good. 
--> Oddly enough samples/simple-sphere.rb does not segfault. 
    it doesn't seqfault when run in 32 bit chroot either.
==> It's a 32 vs 64 bit problem. blur or gradient. 

done? After shoes/setup installs a gem it throws up the console window (blank)
    no errors on the starting terminal. Then it stopped doing that.
    
done: Update debrpi with rubygems 2.2.2. And latest libyaml-dev. 
    Rebuild ruby. Gawd awful slow, but it works which is still amazing.
  
2014-02-11 explore Ruby Gems Deep Hole. Must climb out.
--> Nsis installer and rakefiles. APPNAME, NAME and my confusion.

    Should have seen this happening: The gems version is much different
    between my rvm installed rubys (2.1.11) and the gem code in the rubies
    I compiled and bundle with shoes (1.8.23) 
    The gem API is different and rubydoc.org says 1.9.3 is something else.
done: I'm drawing blanks about how to detect what is available at runtime
    other than an ugly hack (works for 2.1.11) 
    
    I don't want to handle older gem versions and for the linux
    chroots it *shouldn't be that hard* to update gems to something current
    that supports the newer api. Can test for Gem.rubygems_version - it doesn't
    exist until gems 2.0.0. See:
    http://rubygems.rubyforge.org/rubygems-update/History_txt.html
    
    How to update rubygems code for a Mingw Ruby fake-not-a chroot? 
    Wine doesn't appear to be that smart.
  
2014-02-10 
    Pi build fails to link ftsearch - yup. 
done: Turns out my build script (for use under cron) needs to source 
    the rvm script like .bashrc does. That's not comforting!
--> somewhere/somehow I can end up with samples/samples/ in xarmv6 
   (and in the pkg)
done: Great clue: On the pi, samples/simple-rubygems hangs just like Windows
   does. Message on the terminal 'undefined method pick_best!' 
   Could that be a Ruby 2 method? It's not listed in 1.9.3 docs.
--> Oh hell! Now the fancy symlinks in dist/lib have disappeared. 
   Good night, Gracie. 
     
3.3: Time to fix the ext builds (the fakeruby Luis suggested?)
3.3: All of the cross builds env.rb have some 1.9.1 hardcoding inside. 
  
2014-02-09
    Gems and Win7 
--> Hangs looking for Bluecloth gem (samples/simple-rubygems.rb)
--> .gem in home, +gem is not inside the .shoes folder along with .cache
    nsis to the rescue after a deep dive?
    Perhaps that funky setup up code is needed?
--> No .shoes/federales either.
    Fix the platform/msw/base.nsi and xmsw32 tasks.rb to play better with
    my version scheme. God that was ugly!  
--> Now do it again for win/gtk2 and get the Shoes/shoes case correct
    
    Fix the pi cron build.
done: builds from terminal with rake. doesn't build with bin/build-shoes-rpi
  
2014-02-08
done: tweak Rakefile and app.yaml 
     NOTE: NOTE: I've modified app.yaml to have major-minor-tiny and
     modified the Rakefile to use them and still be backward compatible
     if an OSX developer should appear. Or a Windows developer. 
done: use cron job to apt-get update chroots: ~/bin/update-chroots
    Source a script on chroot "user" login, interactive or from cron.
    .bach_profile copy of .bashrc and some edits to source ~/bin/bash-chroot 
done: sets things up for debx86 and deb386 
done: but doesn't work for debrpi. Not a big deal for the pi.
done: If that works, I should be able to build x86_64 and i686 Shoes from
    cron.
done: Write a cron job to build the raspberry pi Shoes.
done:  Write a cron job to build the MinGW Shoes (native, and gtk2)
  
2014-02-07
    manual-en.txt has 3 Japanese characters at line 470 that iconv claims
    is an invalid sequence. They look fine to me, terminal and editor
    and Ruby 1.9.3. Why would that choke Ruby 2?  Easy way to test: Make
    a backup, edit the file and see - I See that isn't the problem. Time
    to instrument deeper.
    diff ft1.log ft2.log
    273c273
    < FragFinish! 127439 127439
    ---
    > FragFinish! 126991 127439
    That's the fulltext.size and fulltext.bytesize values for
    Ruby [1].9.3 and [2].0.0
    
    Now I just have to find where that matters.  Like maybe that sort_by?
    You think? Sadly, that didn't fix it. But, I know what I need to look
    for [stringio].size. On a educated guess I set 
      util.rb in initialize_in_memory_buffer
      @memory_io.set_encoding("ASCII-8BIT")
done: IT WORKS. In 1.9.3 and 2.0.0. And it makes sense:  It's a binary file
     using pack, unpack so anything unicode aware should not think it's
     UTF-8 (a default for 2.0.0). 
--> Remove the debugging code in ftsearch/lib, help.rb, search.rb

 
2014-02-06
    back to ftsearch and 2.0 @memory_io has a different size in 2.0
    by the time the error is reported. Lets figure out where it's changed.
    I also know the number of loaded bytes from the source file is the same,
    and the numbers of sections,methods,mindex,suffixes (in help.rb) is 
    the same.
    
--> in fragment_writer.rb:101 dumping fulltext to disk (f.write) produces 
    in both Ruby 1.9.3 and 2.0.0 identical files 127439 bytes long.
    BUT ruby's size method returns different values for 2.0.0 - 126991
    but in 1.9.3 they are the same.  In both, the file produced is the same
    127439 and no diff for the files.  A difference of 448. The question is
    why ruby 2.0 does that. fulltext is a (mem)file from pack calls. they are the 
    same in the buffer - not the same when ruby asks for size.
    Do I suspect encoding? Hell yes. Ftsearch knows nothing about UTF-x, it
    wouldn't be hard to confuse it. 
    
    Opening the manual in "UTF-8" or "ASCII-8BIT " gets the same error in 2.0
    Opening the manual with "US-ASCII" gets an invalid byte sequence. Do
    I suspect some CP-1252 crap? Do I vaguely remember this was a problem
    discussed on the mailing list and not fixed the way I would like? Maybe.
    
done: don't use Shoes.read_file for the manual at help.rb:215. I think in 
    Ruby 2, everything is UTF-8. This helps isolate the problem.

    Now that setup works and jailbreak, Do we really need better gem 
    handling? Not for linux. Osx isn't a consideration until someone 
    steps up to that task. There's no Shoes solution if the user doesn't
    have the build environment to compile gems, although gems are appearing
    that have mulitple arch binaries inside. 
  
2014-02-05
done:? Rakefile changes for linking to lib/shoes works oddly. rake clean
   can delete it and/or two rakes in a row. I might have fixed this.

done: Setup.rb works with 1.9.3 and 2.0.0
   Bluecloth is not very good sample to download a gem that can't be built
   on most windows, many OSX?. There are binarys gems for some windows though
   if you bump the bluecloth version up. 
   
   Of course RbConfig can be damn near useless for Shoes that move
   around in the file system. 
   
done: can compute the progress bar better - we know the inital size and the
    the amount (bytes) downloaded so far at each update()
  
2014-02-04
   Shoes.setup
     ex: Gem.source_index.refresh! . Not only was source_index deprecated
     it was deleted and there isn't much on the net about how to replace it.
done: $ dist/shoes -g list --local now working. by commenting out #27
     in setup.rb where it installs the 'sources' gem. So what does sources 
     do? Good Question it's base64 encoded (see notes/Gem-Handling.txt)
     I don't think its needed for modern Rubys. 
     
-->  Need to test setup with jailbreak y/n
     Shoes.setup do
        gem 'bluecloth =2.0.6'
done I seem to have a shoes/setup.rb that is buggy or incomplete.
 
done: It's got a blueshoes icon - where is that dialog created?
    Right there at setup.rb:47 dumb shit.
    
done: terminal reports a couple of [:download_reporter] messages
   and then an undef method 'fetch' for nil from net/http via 
   rubygems/request.rb:139 in block fetch. 
   HINT:
   gem list --remote bluecloth
       BlueCloth (1.0.1)
       bluecloth (2.2.0, 2.1.0 x86-mingw32 x86-mswin32)
hint: there's a shit load of bluecloth versions available. None of them
    install. 
done: So which bluecloth ? >= 2.0.6 perhaps? - makes a slight difference.
    It really can't handle multiple possibilities. Actually it can. 
    It's more explicit now but it still fails to download. At least
    I know where and what I'm feeding it.
    
    I suspect that the :download_reporter callbacks are not wired into
    the Setup Gui properly and it tries again after the connection is 
    closed. Just a guess.
   

  
2014-02-03
done: Save the manual issues for the Mailing list or the Meetup.

   Started looking at the gems problems - Ruby 2.0 forces this. 1.9.3 too
   A lot of changes. It doesn't look *too hard*, just tedious. 
   
done? So I don't want to build shoes every time I edit shoes.rb or setup.rb
   Can I set up symbolic links instead of copying files and then when
   installing, copy them? Add 'pre_build' task and the use 'copy_files_to
   dist' as dependency of install (removing any softlinks first)? 
   Watch out for lib/ruby/... Still need 'common_build' to copy that. 
   This is fragile - if you don't get it exactly correct then you
   can end up without lib/shoes.rb or lib/shoes.  Make backups if you play
   here. It's easy to do it wrong. Just Ask how I know that.
    
  
2014-02-02
done: US-ASCII problem loading manual which is the hardcoded 1.9 test
   in Shoes. But thats not the only problem. Now, 2.0.0 throws a hissy
   in sort_by (the tsize value is different 126991 for Ruby 2 and 
   127439 for 1.9.3) which suggests that something is not parsing 
   correctly. Both load the same number (str.length) of 112844 'things'
   Oddly enough file sz is a bit larger 113073.  Best not to worry about
   that oddity. Both have the same number of sections, methods, mindex.
   
   In ftsearch/lib/util.rb is the data method of fulltext_writer. It's
   a StringIO.new stored in @memory_io. So, something previous to that
   is writing more/or less data to @memory.io. Good Luck with that Cecil!
   Is it possible a flush() is needed? It's less than 512 thingies diff.
   Not likely. its fsync() before close. flush changes nothing. 
   
   Back out. Restate the problem. Fails inside 
    search.rb:20 - @index.finish! ->
    fragment_writer.rb:101  - > 
    suffix_array_writer.rb:48 (fulltext differs) -> sort, sort_by
   
   Can I use the Shoes 4 code for manual? Surely they reimplemented this
   nightmare? No ? There's a commit for 1.9.x hash syntax which might
   be helpful (and about the right size) - seems like a stretch.
   
   https://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/

2014-02-01
   What to tackle next?
--> Gkt3
--> Gem Manager (for binary, windows versions of Shoes)
--> cron updates/upgrades for chroots
--> smarter building of Shoes/ruby exts - or convert them to gems
--> update the many wiki pages about building from source. Assuming
    my commits are merged into the mainline. 
    
    Update to Ruby 2.0 (Gtk2) 
done: Source build on Linux (aka Loose Shoes) can use Ruby 2.0.0
    There's a lot of reasons not to do the following anytime soon.
--> Binary build for x86
--> Binary build for i686
--> Binary build for pi
--> Binary build for MinGW

I'm leaning towards the Ruby 2.0 work (at least for the default build)
  mostly because it could purge some known uglies in the rakefiles/cache.rb
  and it might help Windows Threading (or not). 
done: Add checks for RUBY_VERSION make/linux/env.rb
done: Loading ftsearch fails. cache.rb - it even said FIXME: in the code.
     

2014-01-31 Misc cleanup. Declare Milestone - b2 next? 

done: Review/close open bugs in this file.
done: commit and issue pull. May God help Steve in his time of need.

2014-01-30 Linux Desktop - ick.
    Of Course. There's a spec for those .desktop files and where they
    belong. Sort of. Fedora implements differently. Sigh.
    http://standards.freedesktop.org/basedir-spec/latest/ar01s02.html
    
done: Best to just copy to /usr/share/applications and let the user figure
    it out.  Using gksu to copy the desktop file.  Nope. gksu not available
    on OpenSuSe or Fedora and sudo is isn't bare Debian. Just su it is.
    
done: for .desktop files the category is 'Development' not 'Programming'
    Which debians may show as Programming. Or Not.  Grr. 
    
done: Raspberry Mostly OK. In Education and Programming menu, not in Others?
    Others is for apps that don't have pre-defined categories. 
    Who knew?
    
done: Copy the su/desktop stuff in the default [dist] install. 
done: Debian 7.2 (32 bit) Works. In Programming menu. Bless Debian.
done: OpenSuse/64/XFCE - Working. Menu item is under 'Development' 
done: Fedora 20 - Works on the strange Unity like desktop. Search for Shoes
    drag it to Activities.  
  
2014-01-29 
    Finish raspberry install script (cp, sed), deb creation.
    Grr - bundler leftovers. I'm not going to tie shoes to a shit load 
done: of gems it doesn't need.  Renamed Gemfile(s). fpm now works.
    
done:  Remove the :build task from packaging (deps can be wrong arch) 
    plus it's not helpful for testing deb. Already enough trouble with that
    
done: dpkg needs to be root. installs pkg in / and USER is root, plus HOME
    may not be where I want. Not sure what to do. deb/rpm isn't it
    unless I want shoes in /usr/lib/, /usr/local, /opt or such. Not that
    it couldn't be done, trivally. Just not what I want.
    
    Makeself.sh is pretty clever but can it deal with moving the
    shoes.desktop file to where it should go?  Raspberry does have gksu
    so other linux probably do too. 
done: add 'AddType application/x-makeself .run' to .htaccess at 
    www.mvmanila.com
    
done: generate bash script to run after .run is executed on users system



  
2014-01-28
    All the gtk3 linux seem to have the needed gkt2 libs so no additional
    deps for deb/rpm to deal with.  All that worry and delay for nought?
    
done Install basic Raspbian on SDcard.  Build raspberry shoes. 
done Doesn't look like I built gdbm in the Pi chroot. libgdbm-dev
done Rebuild ruby (that'll take a while). Still amazed that qeumu works.

    Then we can test what dependencies are needed.  Freaking none. 
    I should be happy that I won't have to learn and test fpm built
    debs and rpms that have dependecies. 
    NOTE: Pi version of Shoes uses my minimal curl compile. 
 
  
2014-01-27
    rather than deal with Windows and Threads I'll do something more
    Linux useful - fpm packaging of debs and rpms. 
Done build i386 versions of Shoes/Gtk2.
    It *appears* that the libgtk2 libraries are in Debian 7.2/386 but not
    part of any 'package' to remove (install presumably does nothing)
    There are no additional dependencies for Debian 7.2. Shoes/gtk2/i686 
    works fine. OpenSuSe 13.1(64) doesn't have 32 bit libs.
Done build x86_64 version of Shoes/gtk2. Works on opensuse and fedora.
    No additional dependencies for deb/rpm. 
 
2014-01-25 
    More thinking about windows threading issues with ruby. I suspect
    the Wine hang is related to access to the main thread (duh) but
    what is being accessed is a little more difficult to understand.
  
2014-01-22
    Seba reported the windows/gtk2 b1 did hang on him once. sigh.
       
    Setup a rakefile linux:setup:msw32 (native Gui) - it makes sense in
    some circular back to failed future way. On the plus side I can
done: get rid of the crossmingw file and the make/xmingw from the previous
    failure. Updating the fail to current fail. It makes sense.  I can
    already see the problem: gthread requires pthread. Same as GTK2/3.
    A little bit of grunt work and it links. AND it has the same deadlock
    in Wine. Pkg it up and try it on the Win 7 VM (it has some dll's that
    probably aren't needed - least of the problems). It does run on Win 7
    and it does have SOME bugs in common with the gtk2 version and it also 
    has it's own peculiarites. It's a bit faster. It has more huh? bugs.
    I'll upload to the website to complete the circle but It'll be easier
    for me to deal with the Gtk2 version.
    
==> Big Clue: can gthread be compiled to use whatever ruby is using???   
    I did some research on Wine threading. I need to do more research.
    See Gthread clues, compare to ruby win32/win32.c clues. 
  
2014-01-21 
done: openssl cross compile for Ruby. Looks simple. It's not. 
done: still to have build minimal curl (even if it's not really used)
done: I already had icoutils installed - it deals withs msw .ico. Who knew?
    I must have installed it for my website favicon.ico. 
    I Have a nicer icon (256x256) that should scale down. Created a
    federales.ico with 16,24,32,48,64 h/w images. Updated the icons in
    static/  It looks better in Windows 7.
--> get some help on writing Shoes-Cobbler (gem manager)
--> ffi-5.dll or ffi-6.dll is this a gtk3? 
  
2014-01-20 Ruby dependencies
    knapbuild/knapsack is described here
    https://groups.google.com/forum/#!searchin/rubyinstaller/knap-build/rubyinstaller/-D9vNo459RU/r81EycDOfyYJ
    https://groups.google.com/forum/#!searchin/rubyinstaller/knap-build/rubyinstaller/4ulo3o1bQOM/2F1f24XWWaQJ
--> Sadly wine doesn't like that exe (thread deadlock, same threads involved
    as Ruby/Gtk<n> There is no gui involved but its got to be ruby/rake 
    inside.  I should look into the Wine forums about threading issues.
--> If knap-build is off the menu that leaves mini-portile which is a little
    more infrastucture work for me than I want to get into. 
--> For some reason, patches listed on github don't work when when running
    patch by hand. So, I do them by eye. I suspect its tabs/spacing and 
    some vicious hard to delete hidden characters. What a waste of time.
    
done: gdbm compiles, links (must sudo make install and sudo make install-compat)
    That was BRUTAL. Nor do I care if a Shoeser tries them and they fail.
    dbm and gdbm: DONE ENOUGH!
done: iconv-1.14 - again, nothing I would expect Shoes folks to use. But
    Ruby finds it when building. 
done: openssl - there's a reason I saved this for last.  And once again
    the patch is related to work from the rubyinstaller folks. 
    
done: These dlls need to be copied by the rakefile into the target dir
    
  
2014-01-19 Ruby dependencies
    It finally dawned on me that the reason ruby can't find the libyaml
    and the like could be that pkg-config isn't correct for the cross
    compile. That isn't the case (but doesn't hurt)
done: ffi (ruby fiddle ext) compiles and links. Needed to manually copy
   ffi.h and ffitarget.h from {prefix}lib/libffi-3.0.9/include/ffi to
   {prefix}/include. The pc. isn't used by Ruby?
done: libyaml
    NOTE: NOTE: NOTE: Luis Lavena (of rubyinstaller) has plowed this
    ground well and left bread crumbs for me, to mix a metaphor. I'm still
    amazed that wine will run these test .exe's. 
    
    Anyway. Luis has two (related) projects, the gem mini-portfile and
    knap-build both which use "recipes" to build autoconf stuff that Ruby
    needs: https://github.com/luislavena/knapsack-recipes. This could be the 
    infrastructure that I need to maintain the shoes and ruby dependencies.
  
2014-01-18 
    Shoes builds Gtk2/Windows. it does require pthread and it hangs
    running in wine. Works in Windows and doesn't complain about themes.
    I Call that success. 
    
    There's some potential dll hell between rubyinstaller's ruby and gtk2 
    (probably gtk3 too) so it is important to compile a copy of ruby
    to use with Shoes. Since Gtk2 bundle provides some libraries (older)
    that gtk3-bundle. I should build a ruby to go with Gtk2 after building
done: jpeg, jpeg-9
done: gif  giflib-4.2.3
done: yaml, Frick! 
done: ffi  libffi-3.0.9 which creates libffi-5.0.dll. Were there any adults 
      in the version number room?
      Fails to install ffi.h in $prefix/include 
done: gdbm gdbm-1.10:
      flatfile.c:23:24: fatal error: arpa/inet.h: No such file or directory
      Oh God, the flashbacks! Make them stop!
      #include winsock.h patch  to flatfile.c 
      testgdbm.c:30:23: fatal error: sys/ioctl.h: No such file or directory
      PLEASE Make it stop!  Are these in MSYS? I remember this crap when
      installing gcc on Solaris. 
done: iconv      
done: openssl   
done: ruby 1.9.3

 
    
    If I've got two windows dists (gtk2, gtk3) then I need a better build
    infrastructure. Fortunatly, gkt2 & deps is unlikely to get any updates
    and I can hold the Ruby to 1.9.3 for federales. Might as well use it
    to learn what's needed.  Off to build the deps. 
  
2014-01-17 Gtk2 Windows
    I chose this one first for several reasons. (1) it's pretty easy
    to delete on Windows after a failure. (2) I really want to see if
    Gtk2 works on Windows (3) Windows might attract a few more testers
done: (4) it might remind me to fix some of the missing ruby libs
    
done: Make /srv/chroot/mingwgtk2. Populate with gtk2 bundle and symbolic
    links into the GTK3 dir. Tweek rakefile env.rb to make
    it work. Link to libjpeg, libyaml. 
--> compile the gtheme schema.dtd? 
--> Note the README for the gtk2 bundle about themes. I should read the
    gtk3 README too, me thinks.
done: redo the pgk-config fixer-upper sed script
done: Soft links to include for jpeg.h and friends. 
done: Add -lfontconfig to make_so [LDFLAGS] if gkt2
done: We have a link of shoes.exe ! and a link failure of ftsearch - I wonder
    if my extconf hack fails somehow? ya think? Yes and easily fixed. 
==> Do better with extconf.rb like Luis suggests. Kind of low priority.
done: Just a matter of copying the dlls for Gtk2.  Wine is good at reporting
    missing dlls.
    intl8 was intl.dll in gtk2
    pixman was gdk-pixbuf
    libxml2 was libexpat-1.dll
    
  
2014-01-16 Cleanup before packaging experiments

done Rakefile: task 'install' is only for source builds and task 'package'
   is only for cross compiled builds. Might screw up MinGW on MinGW 
   or OSX on OSX, but no one is doing those. 
   
--> Try fpm with i386/Gtk2 and debian VM.
--> Try fpm with x86_64/Gtk2 and Suse VM
--> Try again to distribute Gkt2.so's in a Linux binary.
      if require dependencies with fpm doesn't work.
      Suse, Fedora, Debian.
--> Do a Gtk2 Windows installer.

done: got rid of VERSION.txt
  
2014-01-15  Git and version numbers research
    VERSION.txt file is incorrect in soo many ways. 
    I developed a hard on about getting rid of VERSION.txt. It just
    seems to clutter things up and its only used when processing the
    command line '-v'  (MacOs doesn't even ask shoes to do that - it
    uses Version.txt in a shell script to handle -v. 
Done: New constant Shoes::RELEASE_BUILD_DATE (a string YYYYMMDD)
Done: Modify shoes.rb to use the constants instead of VERSION.txt
Done: Remove VERSION.txt rule from Rakefile.


    
--> While researching VERSION I came across this jewel (shoes.rb:447)
    if RUBY_VERSION =~ /^1\.9/ and !@shy . So much lurking cruft. 
    1.9.1 is also in cache.rb, rakefiles and god nows what else.
    

2014-01-14 Get Tight Shoes (aka source build) correct.

    Remember when I said Gtk2 would confuse things. I've changed my mind.
    I think a working Shoes (Gtk2) is more important than proof of concept
    See Packaging.txt

Done: Wasted two days chasing the wrong problem.
    The ruby I copy is hard coded to look in ~/.rvm for rbconfig
    not the one I copied. 
    
Done: shoes/lib/chipmunk.rb - require 'chimpmunk.so' works for Loose Shoes
    
    
Done:  Set jailbreak location to HOME/.shoes/federales (same as user install)
    
--> Running info-startup.rb in x86_64 in it's schroot runs into some
    theme issues (I think). Runs fine if not in the schroot.
  
2014-01-13 Loose Shoes (source build)

kindof: require 'chipmunk.so' works but require 'chipmunk' doesn't. 
    Some sort of namespace issue based on load path? 
    
    Rethink Loose Shoes some more. Can't depend on it being load-relative.
    so we have to copy it and rewrite rbconfig.rb in the copy. 
    Plan A (I have a lot of plan A's)
done (1)Move make/linux/* to make/linux/loose for safe keeping. Copy
    make/x86../files to make/linux and tweek (rewrite and fail)
    (2) in pre_build we copy the EXT_RUBY and then we link against it.
Yes   have I mentioned how much I hate these rakefiles? 
fixed  Does not run chipmunk yet. 
-->  Theme weirdness Max h and w for info-startup.rb in gtk3 but 
     not in gtk2
    (3) add a step to rewrite the (copyied) ruby's rbconfig so it points
      to where we are building (~/....dist/). DESTDIR or TOPDIR ?

  
2014-01-12

done: use a Federales Icon for platform/msw/shoes.ico when I get bored. Also 
--> figure out how to tame down the nsis progress messages. Damn wordy, that
   
done: Get those missing Ruby ext/libs working on the MinGw cross compile.
    or use the rubyinstaller's libs since ruby on windows doesn't 
    respect --enable-load-relative nor am I likely to get 
    --enable-pthread in place of win-threads. 

done: Do a simple packaging for Linux. fpm? Nope - makeself

done: Do a Gtk-2 binary package for Linux? No. It only confuses things.  Same
   thoughts for a Gtk2-Windows. Fun (perhaps), interesting but lets put
   that in the Plan B file.
   
done: Need to think about the "Loose Shoes" native/source linux build.
    (1) compile and move the exts into the ~/rvm tree? Don't like. Shoes
       shouldn't screw with installed rubys. It's a hack (that would work)
    (2) copy the libs out of rvm into shoes and hope the duplication 
       doesn't trigger error messages. I kind of think I did that before.
done: Chipmunk fails. 
done: The static lib might be the wrong thing to do. It's ok.
done: Don't allow a binary package (tight shoes) to be packaged from Loose
    shoes (ie needs crosscompile file to package)

DONE: Figure out the GSettings for Windows. 
   ccoupe@bronco:/srv/chroot/mingw32$ wine bin/glib-compile-schemas.exe \
   share/glib-2.0/schemas/
   ccoupe@bronco:/srv/chroot/mingw32/share/glib-2.0/schemas$ ls -l gschemas.compiled*
-rw-rw-r-- 1 ccoupe ccoupe 1317 Jan 12 20:35 gschemas.compiled
-rw-r--r-- 1 ccoupe ccoupe 1317 Sep 21 13:55 gschemas.compiled.sav
   That needs to be copied to share/glib-2.0/schemas in the package tree
   and then all the dialogs work. Very Good.
   
Done: While I am at it, figure out why Windows shows the generic icon in its
   menus. Pretty sure I left something out in the rake file.  I did.
   Works as expected on Windows 7. Uploaded to shoes-3.2a1.exe because
   it's equivalent to a1 on Linux - same errors and ommissions. 

2014-01-11
   Whoa! On a whim I copied the Windows Shoes directory to my Win 7 VM
   It Works - sort of. If I select open an app, it complains that there
   are no GSettings installed. True. It then croaks gracefully. I could
   browse the manual and bring up the console. Left alone the slash screen
   eventually gets a 'not repsonding' message.  Good news, bad news. 
   Good: Gtk3 mostly works on Shoes/Windows. The Wine deadlock is partially
   a wine issue. Bad news - the bugs above. I'm not ruling out thread
   problems under windows either. 
   
done: Restore the init seq back to ruby first, then gtk. See if thats better
   or worse in Windows. 
   Much Better. No crashs or hangs. samples from within the manual work
   except for the known gkt3 errors until you try dialogs/color which
   dies from the GSettings not installed problem.
   
done: Figure out the GSetting stuff.

done: Do the packaging thing. 
    For some reason, it puts the Shoes Manual Icon/short cut in programs
    and you have to wait for the all programs to pop up to select shoes.
    This is probably something to do with nsis choices.
    
done: Do Gtk2 for Windows? 

   Figure out the winedbg. Won't help debug threading though.
   
half done: world.c -- don't do the sysinit(0,0) it's already been called
   Now I have a thread blocking problem. Looks like the same problem
   that stumped me two years ago using native windows gui.
err:ntdll:RtlpWaitForCriticalSection section 0x116838 "?" wait timed out in thread 0009, blocked by 0000, retrying (60 sec)
err:ntdll:RtlpWaitForCriticalSection section 0x116838 "?" wait timed out in thread 0009, blocked by 0000, retrying (60 sec)
^C
(shoes.exe:8): Gtk-CRITICAL **: gtk_main_quit: assertion `main_loops != NULL' failed

--> VERY IMPORTANT CLUE:  Gtk caught the ^C. So Gdk/Glib is running
  (or trying to). I think Gtk needs to start it's threading before ruby
  does it's threads. The doc is clear about Gtk and the main thread.  
  Shouldn't be a problem to init the gui(s) earlier (he says) except for 
  the legacy --ruby <args> processing. AFIK, thats to handle Shoes.setup
  which I don't need. Who wants to bet there is a Ruby.thread(shell shoes?)
  that will burn my ass later. 
--> That didn't help. still hangs as above.  Some instrumenting printfs
   and it's hanging in   v = (VALUE)ruby_options(3, argv);, called from
   shoes_ruby_embed. 


2014-01-10
   After looking at ruby code win32/win32.c I can see that I'm 
   not going to convert that to pthreads.  It's also very clear
   that code needs to be initialized the way Shoes/windows does and
   not the simple gtk way (in fact, both are needed).
   
   May run afoul of threading problems. See note about deprecated:
   https://developer.gnome.org/gdk3/stable/gdk3-Threads.html
   
--> Why does bin/main.skel get copied to bin/main.c for every rake?
   to rewrite %defaults% - who uses that? Hackety? 

done I'm getting a Wine graphical "page fault" display. That's kind of
   good. 
   WinMain bin/main.c:88 ->
   shoes_init world.c:117 ->
   shoes_ruby_embed world.c:98 ->
   ruby_sysinit ruby.c:1872 ->
   rb_w32_sysinit win32/win32.c:680 ->
   rb_w32_cmdvector win32/win32.c:1638  ptr to zero. 
   
Done: Note that rb_w32_cmdvector can be called twice from
   gtk.c I suspect the windows startup is buggy. Ya think? Time to see
   what works (in the ruby code, it's got to do the start up for ruby.exe)
   or maybe dig up some working shoes code from long ago. Perhaps my
   changes with #ifndef RUBY_1_8 was incorrect for windows (ya think?)
   
   
   
2014-01-09
   I get a seg fault running shoes.exe in wine:
   <internal:gem_prelude>:1: [BUG] Segmentation fault
--> gdb is not setup to work properly with wine loaded code.
   
-->I'm re-learning more than I want about mkmf.rb. HACKED it so it
   works just well enough to compile and link. I'm not proud.
   Really need to use the TGT's rbconfig in extconf and my rakefiles.
   
done: Ruby/Mingw doesn't --enable-load-relative . Might not matter 
   on Windows, but what do I know? [Update: It works, so who cares]
    
--> Ruby/MingW DOES NOT use pthread. This is a problem because Gtk does.
    Could be a problem. Likely. I wonder if newer rubys address this on
    Windows? 

   

2014-01-08 MinGW
    Curl vs http/win*.c. We don't use curl or pthreads. Need to do
    Changed some timer defs in gtk.c & config.h, Many #if were added.
    
--> How much of the Windows init/close stuff has to be done 
    for a Gtk3 Windows app? In gtk.c:101 is
    int shoes_throw_message(unsigned int name, VALUE obj, void *data)
    It's only called by image.c. Convert to gdk_idle? and not deal
    with pthreads.
DONE: Need to populate the lib/ruby/ dir
DONE: Copy the deps -- see Gtk.org list
DONE: GTK3 requires pthreads - can I build ruby to match?
    in theory, yes --enable-pthread in cjc-ruby-cfg.sh. 
    Which means I should be able to use pthread.h and friends in gtk.c
    which means I could use curl instead of shoes/http/win*.c  and
    undo many changes I made to gtk.c
DONE: Build ext's. Ickk! ldflags, LIBS are wrong in generated Makefile.
DONE Resources, icons and what not
DONE NSIS app packager. 
--> If it works, then I need to do much tighter integration with Gkt3 
    and windows/glib.
  
2014-01-07 MinGW
    So Gtk3 works well enough. 
    Rake-compiler? - no joy same problems as my cross compile.
done: I'm going to ignore the missing Ruby ext/s for now.
DONE: Build minimal curl. Really should handle gnutls and openssl.
    Did I remember shoes/windows doesn't use curl. No, I didn't remember.
Fixed:  can't find -lc ?? -- always use --host and --build when cross
    compiling.
    Modify the xmingw32 rake files.
      where is ruby-1.9.pc? It's not created by ruby/mingw cross compile?
      I edited the one from Windows and it's likely to be wrong for linking
done: Copied libyaml.dll from the Rubyinstaller. Need to build my own.
    Modified config.h to not include gdk/gdkx if Windows. Added 
     -DSHOES_GTK_WIN32 to env.rb and an #ifndef to config.h
Done: Dies in image.c looking for gif_lib.h
-->  Does any shoes-er use gif? We should scrap it. If someone did the
     hard work in image.c. Put this on the futures list. For now, I'll 
     cross compile libgif. Grrr. Complains about missing xmlto tool. 
     Make install works and the compile continues.
Done Dies in world.c. Now it gets challenging mixing GTK and Windows
     Expect issues with app.c and kin.
     Hack Alert! search for SHOES_GTK_WIN32. Don't use SIGQUIT in
     world.c.  Expect to undo and redo this several times. It compiles.
Done  Dies linking libshoes.so. I predicted that, earlier.  Link 
     libshoes with -lmsvcrt-ruby191.
     Dies linking because gtk.c wants pthreads.  
-->  I should add all the cjc-xxx-cfg.sh scripts to git.
Done: Recompile one of linux variants to make sure I didn't break anything 
     with the mingw changes. 

2014-01-06 MinGW 
    Plan A is to not use a (s)chroot for dependencies.  I may use
    rake-compiler to build ruby. Or not. 
    
    I also plan to use Gtk3/Windows instead of _why's windows code. (or
    gkt2 or both). That will make for a larger download but the benefits
    are large (when it works).  Might even convince the OSX folks to try
    compiling Shoes3.2 with Gtk3/osx. 
    
    A cross compiled Gtk3(windows-32bit) test program works on Win7(64) VM
    AND with wine. See CrossCompiling.txt. I know a cross compiled Ruby
    can be made to work and curl is an speed bump but the dream of 
    cross compiling Shoes for Windows (with gtk3) seems very achievable. 
    
 
  
2014-01-05  MinGW, Github
DONE: Before I go crazy on the MinGW stuff, I should 'get right' with git.
    Moved a bunch of stuff around and generated a massive commit. As far
    as I care, github is current. I promise to commit more often. 

2014-01-04  MinGW
    Fired up the Win7/64 VM and install Msys/MinGE, RubyInstaller (32)
    Then copy c:\msys c:\Ruby193 to a shared folder. Import that to
    /srv/chroot/mingw32 (not a chroot though)
    
DONE: Install or build latest version of Wine. Ubuntu is pretty far
    behind - 1.4. Will have to configure Wine properly. I expect some
    trouble. Installed 1.6 via ppa update.  
    I got Adobe Digital Editions installed in wine. 
    
DONE: Sadly, rubyinstaller built Ruby w/o the load-relative that shoes
    needs. I'll attempt to cross compile it. Ruby/Windows has it own
    ext/dl code so it may cross compile where it wouldn't on the pi.
    
--> It does cross compile but I need some dep libs/headers/defs
    See CrossCompiling.txt
    
 
2013-12-31 Cross Compile (pi)
    Hacked away at extconf.rb for chipmunk and ftsearch extentions so
    they are built with the cross compiler and linker and the proper
DONE: Ruby includes. The mods are kind of brute force. I'll make
    them elegant in the future, ya sure.
    
DONE: Backport those changes in env.rb, task.rb
DONE: i386 - because this is build in chroot, only the TGT_RUBY_ARCH 
    matters.
DONE: x86_64 
DONE dist 
    chipmunk fails for other reasons. But the ext compile is good.
Done: Do a simple packaging. cd to pkg/. mkdir shoes3.2a1-{arch}. 
    cp ../{arch}/* shoes3.2a1-{arch}. Tar and zip. sftp to the website.
    
--> This should be automated even if it's alpha. 
 
2013-12-30 Cross Compile (pi)
    I can give up and require a ruby that's been compiled on the target
    (with --load-relative) OR
    Dig into that ext/dl/mkmf.log before declaring failure. The mkmf.log
    is pretty clear:
Using 'dlopen' in statically linked applications requires at runtime the
shared libraries from the glibc version used for linking
/srv/chroot/debrpi/usr/lib/arm-linux-gnueabihf/libdl.a(dlopen.o): In function `d
lopen':
(.text+0xc): undefined reference to `__dlopen'
    There is a libdl.so next to libdl.a, it's link to 
    /lib/arm-linux-gnueabihf/libdl.so.2 which has no symbols? uses
    $ ldd libdl-2.13.so 
	    libc.so.6 => /lib/arm-linux-gnueabihf/libc.so.6 (0xf6694000)
	    /lib/ld-linux-armhf.so.3 (0xf6fd9000)
    That link can only work if you are inside the chroot. 
    
    One solution would be to get the x86_64/arm cross compiler and the ruby source
    tree inside the chroot (/opt/src/ruby). That would require some qemu
    magic to emulate both. Might be possible? 
    
    Or, do the ruby compile using the emulated gcc-4.6.3. 
    I t ' s  s l o w ,  r e a l l y   s l o w . But it's working. 
    It's quite a test of qemu. I'm impressed.
    For giggles and future fun, the arch ruby chose is 'armv7l-linux-eabi'
    I have NO IDEA where that triplet came from.
Fixed: Shoes/pi works with that ruby. I suspect curl opts would croak
    things. 
    
    A crude hack, would be to use a hard link or just copy the ultimate 
    libdl.so where the cross compiling stuff wants it. I'm not going to
    do that because it's really easy to bork your system if you make a
    mistake.
    
    A simpler hack would be to comment out the lines in ext/dl/extconf.rb
    that look for the functions. It compiles. Will it run shoes? No
    does the hack fail - yes, in serveral ways
    
==> Curl - just apt-get install the damn thing in the schroot. Copy the
    least heavy weight libcurl.so to Shoes.
    

==> Chipmunk.so is a X86_64 ELF. Could explain some problems if the ext
   aren't compiled with the correct compiler. Fixing it is an adventure. 
   
  
2013-12-29 (pi cross compile)
    You'd think I'd see this sooner. Add -I/usr/include (or your-chroot
    equivalent) early in the gcc flags.  Compiles and links but
    still has a couple of warnings that aren't right. 
--> curl related: complaints from bits/socket.h
--> infinity, nan redef - ruby related. 
    But, it works! - it's slow to get started and it's gtk3 so there 
    are known bugs. But the cross compile effort is OK. 
--> Try using the cross compiled ruby instead of the rvm ruby:
    Same compiler warnings.
    Shoes.tar is 7MB smaller - I wonder what is missing ? - Lots of doc,
    bundler and rvm stuff. 
    
    It dies in ruby init-prelude - can't load rubygems.rb.
==> ext/dl missing on pi, for certain. It might well explain require
    failures. What does my raspbian choot need that a real raspbian have?
    In the ruby src code, ext/dl/mkmf.log has the clues. It found dlfcn.h
    and -ldl is ok, but dlopen() is missing when building/running a test.
    Do I suspect --sysroot ? Is the Pope Catholic? 
    
Fixed: chipmunk.so is missing but there is a 'x86_64-linux' file on the pi
    see line line 87 (or so) in tasks.env. Damn rakefiles, Bad Cecil! It
    works for i386 and x86_64 because they run chroot and report as 
    expected.  
    
   
    I discovered where the shoes.desktop file should go on the Pi. 
    See that dir named 'Desktop'? it has all the users launchers.
  
2013-12-28 (pi cross compile)
    This could have saved me a week or two of foolishness. Gcc has
    a --sysroot=<dir> flag in newer compilers. gcc-4.8 for sure and I think
    gcc-4.7 and net wisdom says maybe in 4.6. Major score for cross compiling.
DONE: Fixes the jconfig.h issue. 
    
DONE: Compiling ruby gets much more interesting. It Can't find -lcrypto 
    when linking digest/md5.so because you have to use it on both CFLAGS
    and LDFLAGS. It compiled socket w/o complaining, pysch, openssl, etc.
    This the first cross compiled ruby that includes everything normal 
    and that I feel confident about.
    
    --sysroot is a Big Deal if I ever get to the mingw cross compile. 
    
FIXED: Different include file errors using --sysroot compiling shoes but 
    that's OK - it was a mess before and it is less messy now.
    
--> because the pi compile uses the Ubuntu x86_64 pkg-config, if that
    gets screwed up by something apt-get (ie me) it can confuse 
    pkg-config <long-path-to.pc> to not work. Nasty hidden gotcha.
    Yet another reason to not trust it.

2013-12-27  (pi cross compile)
==> The features.h/stdc-predef.h errors are back  because the compiler
    is gcc-4.8.  This time I found a solution and I understand why it 
    should work https://wiki.mozilla.org/Mobile/Fennec/RaspberryPi
    That doesn't fix all problems. seems that the raspian includes and
    libs uses names like 'arm-linux-gnueabihf' and the new compiler uses
    'arm-linux-gnueabi'
    
    Generate a new compile with 'hf' on the end. Doesn't help when 
    cross compiling ruby dies in file.c:2276 which is bracketed with
    various #ifdef EVIL TIME CONSTANTS.  I know that hell but I'm tired 
    of gcc issues, although I learned a lot.
    
    Time for plan B. The Qemu emulator in the chroot works well enough
    to  'apt-get install libreadline6-dev libyaml-dev libssl-dev' and then
    'apt-get install ruby1.9.3' Time to find the rbconfig.rb and see how
    it was built. It's at {CHROOT}/usr/lib/ruby/1.9.1/arm-linux-eabihf/rbconfig.rb
    Sadly it doesn't appear that was built 'load-relative' and Shoes needs
    that (Tight Shoes). 
    
    I also have the pi's rvm built 1.9.3 and 
    is load relative. It's also 'armv6l-linux-eabi' so it might not
    use hardfp or it might. It may also conflict with character set in ways
    I don't want to consider. I'll use the rvm until I can my cross compiler
    sorted out. 
Done: Cross Compile a minimal libcurl.so
Fixed For some reason, the .pc files in chroot are not indexed together
    
Fixed jconfig.h in /usr/include/arm...eabihf/ in chroot and pi.
    Add with that -I include I get the <bits/predefs> bug so it's
    related to the features.h (which I copied from x-tools/sysroot)
Done: Does the jpeg8 install put that in the compilers sysroot? instead
    of the os directories? That would explain a lot. Something like that.
    
    Do I have a Plan C? (yes, I do) Get the tool chain that worked best
    http://elinux.org/RPi_Kernel_Compilation - moved parts of the download
    to ~/x-tools . Undo the {chroot}/usr/include/feature.h hack. 
Fixed: Works better until it gets to jconfig.h.
    

2013-12-26
   Created a schroot for the raspberry (debrpi) and did the debootstrap
   thing for raspian. And the debian deps that shoes wants.
   Installed the qemu-static in the chroot /usr/bin - it works well enough
   to run many things (slowly) but n
   
   I really want a x86_64 crosscompiler to armv6-.... and after much
   futzing I have one in /home/ccoupe/x-tools . That's not the ideal
   spot, but good enough for now. Don't fight the defaults. 
Done: Add it to the regular path.  It will not run in the chroot. 
Done: Clean up a bunch of other compilers that almost worked. Screw up
    and rebuild ct-ng and compiler. 
    
   
   i386 and x86_64 cross compiles work well enough (for Shoes-Gtk3)
  
2013-12-25
   Installing Suse/XFCE-64bit in a VM. Easier to deal with than Fedora.
     libgif.so.4 missing from the Shoes pkg. And the libcurl-gnutls.so.4
     vbox permissions on the shared folders.  Mostly a Oracle
     problem not Suse,Fedora or Debian.
     
   Setup an debian/64 schroot. Compile ruby and curl in there.
   Build shoes in there.
   Verify that it works on Ubuntu-64 -Yes
   Test on Suse
    missing libpcre.so.3 
   /home/ccoupe/x86_64-linux/shoes-bin: symbol lookup error: 
   /usr/lib64/libgobject-2.0.so.0: undefined symbol: g_unix_fd_source_funcs
      Why didn't it use the libgobject the came with shoes?
      I suspect a lib version number issues but I'm giving up for now
      
   Test on Fedora
   /home/ccoupe/x86_64-linux/shoes-bin: symbol lookup error: 
   /lib64/libgobject-2.0.so.0: undefined symbol: g_unix_fd_source_funcs
   Hmmm. same error message but slightly different from Suse.
   After I removed libgobject from the shoes dir, it still has the error.
   
    redo the i386 curl, ruby build after getting rid of libcurl-gnutls
    and git pkgs. Works fine in the chroot and on the debian VM.
==? i386 Fails to run on Ubuntu-64 bit - cascade of missing libs...
    not sure I care that much but it did work once. 

    Retry the x86_64 on ubuntu. Works fine in the chroot.
Done: Fails when run outside chroot. Guess what the error is. Go Ahead
    /home/ccoupe/Projects/shoes3.2/x86_64-linux/shoes-bin: symbol lookup error:
    /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0: undefined symbol: g_unix_fd_source_funcs
    That turned out be a name issue with the copied libgobject
    Now complaining the libffi.so.5 is missing. Who call for that? Fixed
==> /home/ccoupe/Projects/shoes3.2/x86_64-linux/shoes-bin: symbol lookup error:
   /usr/lib/x86_64-linux-gnu/gio/modules/libdconfsettings.so: undefined symbol: g_mapped_file_get_bytes
   Could this be related to the curl config -disable version symbols ? Nope.
   
==> Don't copy all the Gtk2/Glib stuff - then x86_64 works both in the 
    Debian chroot and outside it in Ubuntu. Clearly I'm missing some
    critical knowledge. If gkt2 is on the target system (this case), don't 
    include my own libaries. It can break multi-arch/lib handling and really
    there's no good way to know from here where any of the libs are kept in
    Suse, Fedora, Ubuntu and more.  Give up on Gtk2.
    
==> Shoes binaries might be slightly easier for Gkt3 through.
    Install gtk+-3.0-dev in chroots deb386 and debx86 and try again
    Yikes - a lot gets dragged into the chroot for gtk+-3.0-dev (libssl,
    libcurl-gnutls)
    Don't recompile curl yet but don't be surprised when it pop up again.
    Status: 
YES 1. From inside deb386 chroot
==> 2. From outside deb386 chroot on Ubuntu 64 
    I have broken apt-get pkgs:i386. sigh.
YES 3. From Debian 7.2 32bit VM
YES 4. From inside debx86 chroot 
YES 5. From outside debx86 chroot (ubuntu 64)
YES!6. from Suse 64 bit
YES!7. from Fedora 64 bot


   

2013-12-24

Done:  Tight Shoes 386 works fine in the shcroot.
   
Done:  Loose Shoes 386 (gtk2) works on Deb 7.2/386 that doesn't have
   gtk2 installed. 
   
Done: Need the X86_64 equivalent. I can't really test it w/o a 64 VM
    and if I was going to do that, I'd pick something non-debian. 
    This was too easy. I only needed to fix the env.rb where libungif was.

Next:
    Fedora 20/X86_64 does'n want to run in OracleBox. Because some idiot
    at the keyboard didn't select that in the install. Try again.
    Working much better. Yikes - its been infected by that damn Unity
    interface. After much futzing getting guest additions installed in 
    Fedora, and root copy from /media/sf_cross because groups is wrong
    for vbox:
$ ./x86_64-linux/shoes
/home/ccoupe/x86_64-linux/shoes-bin: error while loading shared libraries: 
libcurl-gnutls.so.4: cannot open shared object file: No such file or directory
    and
$ ./i386-gnu-linux/shoes
./i386-gnu-linux/shoes: /home/ccoupe/i386-gnu-linux/shoes-bin: 
/lib/ld-linux.so.2: bad ELF interpreter: No such file or directory
   So it doesn't have i386 multiarch out of the box. Clearly there is
   some hidden versioning going on with curl - try a rename.
==> mv libcurl.so.4 libcurl-gnutls.so.4 - works but can't find
==> libpcre.so.3  - copy it from /lib/x86_64-linux-gnu/libpcre.so.3
==> librtmp.so.0  - copy from /usr/lib/x86_64-linux-gnu/librtmp.so.0
==> libssl.so.1.0.0 - anybody see the pattern ? Curl? Don't use the one 
   in the build system. /lib/x86_64-linux-gnu/libssl.so.1.0.0
   it will be faster and easier to build a new curl. No - it isn't.
==> Really should chroot a x86_64 linux and build curl and ruby using
   its headers and libraries.
   
    
Next:
    Suse 13.1 netinstall did notice it wasn't running in a 64 bit system and 
    put up a warning screen. Good for Suse. Install with XFCE because
    ah, why not? I need to figure out the menu options for shoes. 
    
    Try the X86_64 and i386 versions of Shoes on Suse/64
    Figure out how to chroot Suse and if Shoes doesn't run.
    mount -o loop ~/Desktop/openSUSE-13.1-NET-x86_64.iso /mnt/cdrom
    cd into mnt/cdrom/boot. Several squashfs files in there.
    Hung during downloading of components
    
Next:  Raspbian version. That one is a little trickier to setup the
    chroot and the rakefiles properly since the compiler (and ruby/rake)
    have to run outside the chroot. 
    
Done: Someone ought to tell gcc to stop complaining when compiling 
   chipmunk. Add -Wno-declaration-after-statement to xextconf.rb
   Helps a lot with clutter.
    
2013-12-23
   The schroot approach is working well.  I compiled ruby in the chroot
   using the chroot's gcc-4.7/386 compiler. Compiled and ran shoes (loose)
   
   I want to build Shoes from a normal environment.
FIXED: {chroot}gcc doesn't like be invoked from outside the {chroot}
   Build a compiler that can be (crosstools-NG) OR build shoes inside
   schroot. Today, I'm going to do the schroot way because I'm more
   interested in building tight shoes (gtk2/386) and updating the
   rakefiles to build a shoes that runs (i386) on both the host system
   and the debian VM.
   
done: Copy the rest of the deps - not very elegant code in env.rb
   
==> setup a cron job to do a schroot apt-get update once a week. download
   and install the latest updates. both i386 and raspbian. 
  
2013-12-22
   I have found a well known issue with gcc-4.8 vs 4.7 that explains
   the  STDC_ISO and other failures when building the 32 bit Shoes.
   I could downgrade to 4.7 on my Ubuntu 13.10 64 bit system, or I could
   set up a chroot (and possibly build the compiler) or poke around with
   existing mulitlib/multiarch and hacks. I've been fighting with the
   Shoes rakefiles and I'm tired of mindless hacks.
   
   Long term, dealing with chroot might be better. See CrossCompiling.txt
   
2013-12-21 - i686 cross compile
    Copied some more headers and libs from Debian VM after install gtk3-dev 
    and other deps on it. 
    
    Moved the dep lib copies from pre_build to copy_deps_to_dir. Since
    I haven't fixed the -L link flags, here's the list of deps
/usr/bin/ld: cannot find -lgtk-3
/usr/bin/ld: cannot find -lgdk-3
/usr/bin/ld: cannot find -latk-1.0
/usr/bin/ld: cannot find -lgio-2.0
/usr/bin/ld: cannot find -lpangocairo-1.0
/usr/bin/ld: cannot find -lgdk_pixbuf-2.0
/usr/bin/ld: cannot find -lcairo-gobject
/usr/bin/ld: cannot find -lpango-1.0
/usr/bin/ld: cannot find -lcairo
/usr/bin/ld: cannot find -lgobject-2.0
/usr/bin/ld: cannot find -lglib-2.0
/usr/bin/ld: cannot find -lungif
/usr/bin/ld: cannot find -lcairo
/usr/bin/ld: cannot find -lpango-1.0
/usr/bin/ld: cannot find -lgobject-2.0
/usr/bin/ld: cannot find -lglib-2.0
     Add ruby and curl to that list (and a couple more for windows)
     
     Im getting that #define __STDC_ISO_10646__ warning. What did I do
     to correct that before. Rebuild ruby? Didn't fix it.  I think
     it's an include file - somehow /usr/include/stdc-predef.c is being
     used. See http://gcc.gnu.org/gcc-4.8/porting_to.html. gcc 4.8.1 is 
     used for the cross compiler and Debian Wheezy is 4.7.x . This problem
     went away when I switched pi cross compilers. Add -ffreestanding to
     LINUX_CFLAGS. And recompile ruby. And fails differently but still
     dragging from /usr/include/i386-linux-gnu instead of where I say.
     Hangover from the Multi-arch ? 
   



2013-12-20
    Of course some of those i386 libraries were reinstalled by software
    update. So far, no harm.
    
done: Copy the /lib /usr/lib /usr/include from the Debian i386 VM. 
    Sigh. The drive/shared folder is mapped strangely. Claims to be ro
    when creating softlinks. I have to manually create the soft links
    so "ln -s libjpeg.so.8.4.0 libjpeg.so.8". Shoes only cares about the 
    major number.  No doubt this will be an issue. 
    
FIXED i386: Need Curl, cross compiled from source for i386, no ssl version. 
    We don't need gopher, imap, pop. smtp, telnet. Keep TFTP for 
    the embedded folks although I don't think shoes can use it. PITA.
    
done:  Cross compile Cairo, Pango. Sigh. It has to be done. Good practice
    for Mingw32
    
2013-12-19
FIXED: It is possible to get worse. Installing curl:i386 screws up the
    compile for x86_64 (dist and the crossbuild version). Thank you
    curl and multiarch Ubuntu. Removed with synaptic. Reinstall the 64 bit.
    
FIXED: linking dist/shoes.a "-lungif" not found. What is with this ungif crap
    I can see the lib, right next to libjpeg.  I removed the :i386 version
    of libgif and reinstalled libgif-dev.  Boo multiarch. Bad Unbuntu.
    
FIXED:  I think I'll remove multi-arch from ubuntu (64) - I have to build the
    deps for cross compiles (pi, mingw) anyway. What's another arch? 
    ungif/gif, curl, ruby, glib, gobject.. what could go wrong?
    OR I could configure multiarch better. What a dreamer I can be.
    There is still buttload of /usr/lib/i386-linux-gnu files after removal
    I'm going to ignore them. Maybe ubuntu needs them. 
    
    
==> Here is the Shoes Mentality. I decided to write a dependancy manager in
    Shoes so the rake files will just grab the <arch>.yaml created by this
    brain fart and the rake files would be less ugly and more elegant. 
    Why? Because its fun. And it might work and I really don't want to fix
    the GTK3 code. I'd rather be scripting in style than find the root problem.
    Its DepManager.rb and it is brilliant, although 95% unfinished. You 
    can't abstract your way out broken reality. 
    
2013-12-18
    Taking a break from the pi cross compile suckage.
    Gtk3 hint from the web" The docs for
      # gdk_window_begin_paint_region give more details on how this
      # works.
    i386:libglib:  Look at what Calibre does (/usr/local/lib/calibre)
      it includes all the shared libraries of Qt and more in it
      There is the copy_deps_to_dist task for this. Just need a list of
fixed: If it works glib-2.0, will have to do this for X86_64 and xarmv6-pi
      Still Fails - its curl.so.4 that is linked to glibc-2.so.specific.version
      Curl! Damn thee Curl! Down Curl! Down! Bad Curl!
      
==> What would a "system" install of shoes look like
     /usr/local/bin/shoes -- the shell script pointing to --->
     /usr/local/lib/shoes -- everything else in dist/
     
==> Thinking about the deps. I hate that the rake files load the pkg-config
    -- it never changes and if its wrong, I have to unfix it somehow. 
    Danger! Danger! Will Robertson! I'm about to re-invent dep handling
    before fixing that curl problem. See Deps.txt
     
2013-12-17
    Totally frustrated with linking Shoes for the pi.
    I suspect the curl config is not helping. 
    
2013-12-16
FIXED    Libgif.so.4 has the code. Need a soft link from libungif.so.4 to it.
==>  Sigh, I wish I'd switched to cmake instead of whacking on the rake files
FIXED!!! i386 version loads and runs on 64bit multiarch. A couple of Gtk theme
    warnings but thats gtk-2/386 running under Gtk3/X86_64 shell.  
    No warnings or whines from ruby. 
    
    YES it was a "DUH!" moment. I was passing -shared to the link of shoes-bin
    you only do that for the link of libshoes. DUH!
    
==> On Debian 7.1 wheezy
    ccoupe@elvis:~$ ./i386-gnu-linux/shoes
    /home/ccoupe/i386-gnu-linux/shoes-bin: /lib/i386-linux-gnu/i686/cmov/libc.so.6: 
    version `GLIBC_2.15' not found (required by /home/ccoupe/i386-gnu-linux/libcurl.so.4)
    
    I could have many missing dependencies.  Wheezy does have
ccoupe@elvis:/lib/i386-linux-gnu$ ls -l libglib*
lrwxrwxrwx 1 root root      23 Jan  9  2013 libglib-2.0.so.0 -> libglib-2.0.so.0.3200.4
-rw-r--r-- 1 root root 1031056 Jan  9  2013 libglib-2.0.so.0.3200.4
    and the build system has 
ccoupe@bronco:/lib/i386-linux-gnu$ ls -l libglib*
lrwxrwxrwx 1 root root      16 Dec 15 01:51 libglib-2.0.so -> libglib-2.0.so.0
lrwxrwxrwx 1 root root      23 Oct 19 00:45 libglib-2.0.so.0 -> libglib-2.0.so.0.3800.1
-rw-r--r-- 1 root root 1059744 Oct 19 00:45 libglib-2.0.so.0.3800.1
fixed:  Hmm. That should work.

fixed: arm pi link of shoes (main.o) is failing - can't find lungif.
    
    
2013-12-15
    same seg fault when the i386 (Loose) runs on Debian 7 VM
    Something is wrong with the linked main (shoes-bin)
 
2013-12-14
    Loose shoes builds on raspberry (if you don't compile bloops since
    I don't have portaudio on the pi or care to). Runs OK. 
    
    Tight Shoes (cross compile) for pi finally builds. Dies with a 
    seg fault before it gets to main(). Built with rvm ruby.
done: Curl sys/socket  warnings on compile
done: Trying cross compiled ruby (no openssl, readline, pysch)
    Still with the bit/socket.h warning from curl
    math.h warning about redef of INFINITY and NAN
done: I'm using the headers for the PI, should I use those headers for
    the cross compiler? Which did ruby use? 
    
done: Many issues with getting Ubuntu 13.10 set up with multi-arch libraries
    See CrossCompiling.txt. Don't trust pkg-config.
    Compiles and links now.
    
done: i386-linux-gnu/shoes fails. Seg faults (0x1). JUST LIKE THE armv6-pi
    cross compiled version of Shoes does. Suggests a common fault might 
    exist in the linking. Do you think? I bet its a face palm discovery.
    
  
2013-12-13 arvm6 building
done: Lot of issues building the arvmv6 ruby. No Sockets or openssl !!
    Need to use the pi include files and rebuild?
    New compiler is slighthly better but still don't have openssl,
    pysch, readline. Do have socket with --enable-wide-getaddrinfo
FIXED Removed Ubuntu's arm compiler toolchain. Used this one
    http://stackoverflow.com/questions/19162072/installing-raspberry-pi-cross-compiler
    That fixed the warnings about character sets. 
FIXED: Should test compiling shoes on the pi (default loose shoes, rvm ruby)
done: Still using the rvm rbconfig, there are some warnings curl related.
    for the cross compile. no curl warnings for native build.


2013-12-12
   The default build, (Loose Shoes) Works. Mostly.
FIXED Modify make/linux to use the standard ruby layout. Copy shoes
    extensions to shoes dirs. Set up a gem loading path for those exts
    in cache.rb
==> Hardcoded 1.9.1 in cache.rb
==> $ dist/shoes -g env
    undefined method `source_index' for Gem:Module
==> simple-chipmunk fails on require chipmunk so ext's are not correct

done: Setup rakefiles for i686-gnu-linux cross compile
done: Build 32 bit Ruby (i386-gnu-linux). Works, w/o readline.
    Might need more configuring. 
done: Get the env.rb more correct (see the armv6 env.rb) 
done: Need 32 bit pkg-config, hdrs, libs for cairo, pango, gobject, glib


apt-file -a i386 search libXXX.so

2013-12-11
FIXED:  Rewrote the rakefile for x86_64-linux to copy the normal ruby directory
  structure for Shoes. Now ruby finds rubygems when it inits and thats
  more important for future compatibility with 2.0 and 2.1. It looks like
  {dist}/
        libruby.so
        libshoes.so
        {deps}.so 
        shoes (script that runs shoes-bin)
        shoes-bin (linked main.c)
        /samples/
        /fonts/   Move these three to lib/? 
        /static/
        /lib/
            shoes.rb
            shoes/
                cache.rb, packrb, ... 
            ruby/
                1.9.1/
                    x86_64-linux/
                    rubygems/ and more
                gems/
                    1.9.1/
                       gems/
                       specifications/
                site_ruby/
                vendor_ruby/
            
Fixed: world.c:shoes_start() to mangle the $: path appropriately
   For apps/scripts not run under the shoes tree, we still need the '.'
Fixed: Dies on ftsearch (from shoes.rb:150)
   rakefile - compile and copy ftsearch ext
done: clean up cache.rb hacks, debugging..
done: Expect issues with font, image loading? 
done: Apply the lessons to building dist (default).


 Open
  Loose Shoes Ubuntu
    once Shoes causes ruby to load from dist/lib (first 'require' ?)
    then the odds for getting a second loadpath for gems code is high.
    Everything should work OK, but the console messages are annoying,
    particularly with gems like fpm.
    
    it would be nice not to copy/pkg all the duplicate Ruby code in dist/
    
    ftsearch ext would have to be a gem to get rid of the dups ruby/lib
    rake compiler?
    
    installing the Shoes.desktop file requires root priv. (fpm would be
    Ok since it's going to check for dependencies it has to sudo anyway)
  
  Loose Shoes Pi
    Gawd awful slow compile. Ruby is slow too (not the pi fp version?)
    Utf-8 and US-ASCII and .... Complier warnings and runtime.
    Lxterminal and even terminal(ssh) sometimes looses contact with rvm.
    Don't know how to create a desktop icon/menu link.  
    Many dependencies to apt-get (of course that fpm's job) but requiring
    ruby is a big thing on a slow machine.
    
  
  Tight Shoes Ubuntu
FIXED:    Compiling my own ruby (--enable-load-relative) fixes the duplicate
    rbconfig but ruby complains at startup 
    <internal:gem_prelude>:1:in `require': cannot load such file -- rubygems.rb (LoadError)
	from <internal:gem_prelude>:1:in `<compiled>'
    However, it can load gems (the Shoes built/dist ones and the stdlib)
    so the error message is mostly noise.
    
    Possible gem jail break scheme for tight shoes:
    Have to set the ": and 'require rubygems' 
FIXED: Sadly a gem load on that new path spits out those lovely 
    already initialized constants messages for .... guess who ?
      UTF_16BE, UTF_16LE, UTF_32BE, UTF_32LE
      
FIXED: Need to implement the standard Ruby directory layout. At startup
    Ruby determines the path to libruby.so and then it wants to load from
    lib/ruby/1.9.1 and lib/ruby/1.9.1/x86_64-linux. No amount of ln -s
    seems to convince ruby_init_loadpaths() otherwise.  
    1. copy /home/cross/{arch}/lib/[libruby.so.1.9.1] to {tgt} (x86_64-linux)
    2. ln -s libruby.so and libruby.so.1.9 to that
    3. copy /home/cross/{arch}/lib/ruby to {tgt}/ruby
    4. link libshoes.so as before, into {tgt}
    5  copy shoes.rb and shoes/ into {tgt}/lib
    6  may need to adjust shoes.c/world.c to load shoes.rb from there
    7  will need to fix cache.rb to include the dir with shoes.rb and 
       shoes/

    
  
  Tight Shoes Pi
    Need to cross compile many of the deps (jpeg, [un]gif, curl-dev and
    include them with Shoes. PITA but I had to do that with Mingw and 
    am still alive to remember it.
    
    I can also pkg-config on them using my copy of the Pi files. Which is
    what has to happen even if I built the damn things myself. And also 
    has to happen for any cross compiled Shoes with dependcies. 

==> The ubuntu cross compiler has a /usr/arm-linux-gnueabi and eahif 
    includes and libs. These need to be included (in the proper order)
==> Consider building a more complete toolchain for arm  and mingw
    (be nice if there was a pkg-config). There are more complete cross
    compiling systems that would help manage the dependencies. MXE for
    mingw, crosstoll-NG and CMake. CMake could/would replace the rakefiles
    
    Need to cross compile Ruby. Eventually. 
  
  All Shoes (Ruby 1.9.3, gtk2)
    The make/xarmv6-pi/env.rb executes the pkg-config on loading
    
  MingW32
    Not yet - there is enough to do with Linux.
  
  i686-linux
    I do have that Debian 7 32 bit virtual box so it could provide the 
    libs for cross compiling and to test things. 
    see cjc-configure.sh - just reverse build and host and build 32 bit
    with the 64 bit compiler.

