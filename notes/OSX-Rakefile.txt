OSX rake steps/tasks (as of June/2/14)

Old Shoes 3.1: In Rakefile 
   in order with funky syntax to explain. These are rake tasks.
   build_tasks:pre_build
   :build_skel
   "#{dist}/#{shoes}"		# compiles and builds shoes-bin
   "#{dist}/VERSION.txt
   copy_files_to_dist,		# copys static, samples, etc
   :common_build, 			# builds exts, shoes gems if any
   :copy_pango_modules_to_dist # copies pango-modules and pango-querymodules
   :copy_deps_to_dist, 		# Create list of all libs used by shoes-bin,
			# and pango-querymodules and all libs used by those libs
			# checking for duplicates. Then copies them
   :change_install_names, 	# from a list of shoes-bin, pango-querymodeles, 
			# all dylibs and pango/modules/*.so do the install_name_tool
			# dance of -id and -change for each lib use (and subordinates)
   :setup_system_resources, 
   :verify
   
Loose Shoes (in Rakefile)
   build_tasks:pre_build	# sets up path structure for dist/lib/ruby/n.n.n/x86_64-
   :build_skel
   "#{dist}/#{shoes}"		# compiles and builds shoes-bin
   "#{dist}/VERSION.txt
   copy_files_to_dist,		# copys static, samples, etc
   :common_build, 			# builds exts, shoes gems if any - copy to
        # dist
   #:copy_pango_modules_to_dist # copies pango-modules and pango-querymodules
   #:copy_deps_to_dist, 		# Create list of all libs used by shoes-bin,
			# and pango-querymodules and all libs used by those libs
			# checking for duplicates. Then copies them
   #:change_install_names, 	# from a list of shoes-bin, pango-querymodeles, 
			# all dylibs and pango/modules/*.so do the install_name_tool
			# dance of -id and -change for each lib use (and subordinates)
   :setup_system_resources, 
   #:verify
   NO INSTALLER/PACKAGER - Error message instead
    

Tight Shoes (in make/mavericks/tasks.rb, env.rb)
   :pre_build, 
   :build_os
    Then the following procedures (functions in tasks.rb)
    common_build			# builds exts, shoes gems if any
    copy_files_to_dist		# copys static, samples, etc
    copy_deps_to_dist
      copy_pango_modules 	# copies pango-modules and pango-querymodules
      # Create list of all libs used by shoes-bin,
	  # and pango-querymodules and all libs used by those libs
	  # checking for duplicates. Then copies them
      change_install_names, # from a list of shoes-bin, pango-querymodeles, 
			# all dylibs and pango/modules/*.so do the install_name_tool
			# dance of -id and -change for each lib use (and subordinates)
    Builder.setup_system_resources
    
    Need to copy and process the ruby dependent libs like openssl.bundle
    bundle is the key ext. (in pre build where ruby is copied)

Here's my homebrew list - installing rvm installed homebrew (autoconf, automake, ..) 
and rvm added yaml, openssl, libffi so ruby could build. 
a few more. The rest I added, with and without the help of the Rakefile

~/Projects/shoes3.2$ brew list
autoconf		gobject-introspection	libtool
automake		harfbuzz				libyaml
cairo			icu4c					openssl
fontconfig		jpeg					pango
freetype		libffi					pixman
gettext			libgpg-error			pkg-config
giflib			libksba					readline
glib			libpng

====== And there was a osx-gtk2 ==========
  It's crosscrompile aka Tight_Shoes 'experiment' make/osx-gtk2/env.rb ...

mini:~/Projects/shoes3.2$ brew install gtk
==> Installing dependencies for gtk+: libtiff, gdk-pixbuf, atk
==> Installing gtk+ dependency: libtiff
==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/libtiff-4.0
######################################################################## 100.0%
==> Pouring libtiff-4.0.3.mavericks.bottle.tar.gz
üç∫  /usr/local/Cellar/libtiff/4.0.3: 254 files, 3.8M
==> Installing gtk+ dependency: gdk-pixbuf
==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/gdk-pixbuf-
######################################################################## 100.0%
==> Pouring gdk-pixbuf-2.30.8.mavericks.bottle.tar.gz
==> Caveats
Programs that require this module need to set the environment variable
  export GDK_PIXBUF_MODULEDIR="/usr/local/lib/gdk-pixbuf-2.0/2.10.0/loaders"
If you need to manually update the query loader cache
  /usr/local/Cellar/gdk-pixbuf/2.30.8/bin/gdk-pixbuf-query-loaders --update-cache
==> /usr/local/Cellar/gdk-pixbuf/2.30.8/bin/gdk-pixbuf-query-loaders --update-ca
==> Summary
üç∫  /usr/local/Cellar/gdk-pixbuf/2.30.8: 209 files, 4.3M
==> Installing gtk+ dependency: atk
==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/atk-2.12.0.
######################################################################## 100.0%
==> Pouring atk-2.12.0.mavericks.bottle.tar.gz
üç∫  /usr/local/Cellar/atk/2.12.0: 205 files, 3.5M
==> Installing gtk+
==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/gtk+-2.24.2
######################################################################## 100.0%
==> Pouring gtk+-2.24.23.mavericks.bottle.1.tar.gz
üç∫  /usr/local/Cellar/gtk+/2.24.23: 1199 files, 59M
mini:~/Projects/shoes3.2$ brew list
atk			glib			libpng
autoconf		gobject-introspection	libtiff
automake		gtk+			libtool
cairo			harfbuzz		libyaml
fontconfig		icu4c			openssl
freetype		jpeg			pango
gdk-pixbuf		libffi			pixman
gettext			libgpg-error		pkg-config
giflib			libksba			readline

libtiff? Really?

I'll start with copys of the mavericks env, task and then Create a 
#ifdef SHOES_GTK_OSX and see what breaks. 
Actually, it compiles and links. It won't run however without some dancing
around with X11 which is not something I want users to do.

====== Experiment finished - Fail ==================
