Packaging

Sep 05, 2014
    First, fix (finish) the old way or document it's shortfalls. 
    Back in Raisins days (r1314 or so) pack.rb did not need the mingw
      shoes-stub-inject.exe step. I can't remember why ashbb was so insistant
      about it. 
    
    Packaged blob (myapp.exe) contains
      a copy of static/stubs/blank.exe
    Then binject inserts resources
      SHOES_FILENAME "myapp.shy" or "myapp.rb"
      SHOES_PAYLOAD - the binary contents of the SHOES_FILENAME (script or shy)
      if the user selected 'include shoes' then
        SHOES_SETUP is inserted (the contents of the downloaded/cached shoes installer.exe)
    So, blank.exe must have the smarts to detect if SHOES_SETUP is there
      and download if needed,  & run it if needed.
      platform/msw/stub.c does just that so it's compiled to blank.exe
        It uses the winhttp stuff in Shoes which 3.2 no longer uses.
        
====> cross compile stub.c, if possible - save a copy of blank.exe first
        
    That's the old way. Note: 3.2.<=15 doesn't allow download if needed
    and that what I want to fix.
    
    3.1 (ashbb's mod to it) when 'download if needed' is chosen shells to
    a windows program 'static/stubs/shoes-stub-inject.exe' with the script/shy
    as an argument. It throws away all of the binject stuff done previously
    so what does that do that Shoes + binject not do?
    
    platform/msw/stub-inject.c 
    1. reads the file (arg) myapp.rb or myapp.shy and stores it in var 'data'
    2. sets outPath to be "myapp.exe"
    3. Copies shoes-stub.exe to outPath (myapp.exe)
    4. Opens that for Resource updating and copies
       SHOES_FILENAME (from the cmd line arg)
       SHOES_PAYLOAD (from the 'data' var'_
    5. reads shoes-setup.exe and stores it in SHOES_SETUP resource
    
    It does what Shoes+binject does. Perhaps binject doesn't do the right
    thing for modern Windows? Or the compiler warnings scared him. I don't
    like them either but everytime I've looked they are harmless. 
    
    Ahh, a clue stick! Where does shoes-stub.exe come from? r1314 compiles
    it - there's no compile to build blank.exe - it's been replaced sooo
    We should use that instead of 'blank.exe' in the app_package.rb
      and isp.exe fails to run in Win7. Now I'm getting somewhere!

Sep 03, 2014
    nsis is a lot more powerful than when Shoes was started. Ruby has
    progressed a lot. Perhaps packaging can use some new capabilies.
    
    Packaging is different from installing. I've got the installers 
    sorted out although they might change 
    
    Packaging V2 (current) justs stuffs a script into a Shoes install
    (and not all that well). I consider it useless from a user POV.
    
    Packaging V3 (next) only builds 'download shoes and install if needed'
    so let's switch perspective to what the package does when the user runs
    it.
    1. It checks to see if Shoes 3.2 (or perhaps 4) is installed
       If not, it downloads and runs the *correct* Shoes installer. 
    2. It expands the App.container payload into a tmp dir
       and calls the (newly installed shoes --ruby {app}install.rb script 
       to finish the install.
       
    That scheme requires that the {apt}install.rb could be platform specific ruby
    or needs to be mulit-platform aware. 
    
    The expanded container holds one and optionally 2 more files 
       {apt}.install.rb  or {app}.rb
       [ {apt}.shy  (a tar ball) ] optional
       [ {apt}.gems (a tar ball) ] optional
    
    If there is no {app}.install.rb then just run {app}.rb with Shoes
      and don't bother with the following. 
    else
      run Shoes with the {apt}.install.rb 
    
    ---- plaform scripting finished. It's all Ruby and Shoes below ----
    
    {app}.install.rb is a Shoes script. It could be generic Shoes script 
    provided by the packager as default or a custom Shoes script. 
      
    It's up to {app}install.rb to unpack the {apt.shy} to permanent storage
    if it wants to (or was asked to). Or just run it with Shoes like V1 and V2
    shys do. {app}install.rb is also responsible for creating menus or shortcuts
    or alias or HKEYS.
    
    {app}.install.rb also has install the {apt}gems if they exist. These are
    most likely binary gems. They are installed in ~/.shoes/gems+ if they 
    not conflict with existing gems in ~/.shoes/gems+
    
    ASSUME we can create platform specific APP installers that do the above. 
    I think that is doable but details can derail. I'm still in the design phase so 
    ASSUME is OK. 
    
    
    Now we have some ideas to guide what packager has to do. And we have
    details to consider. 
    
    As written, We need nsis to be installed on any system that
    wants to package for Windows - very problematic.  Can't do that.
    
    Someone running Windows that wants to package needs to binject/winject
    the correct winres BS into the nsis Shoes 'download if needed stub'. Which
    is the problem for Shoes 3.0 - it has to be done on Windows. 
    
    Proof of Concept Tasks:
    1. Create a nsis.exe stub that downloads Shoes if not present and expands 
       the payload container to 'tmp'
    2. How do we pass in values (a config file to read on the destination system)
       winject the stub?
    
    {apt}install.rb could be a generic ruby script or a genric Shoes GUI
    or an app specifc script that does much more copying and desktop 
    integration  -- hh.install.rb for example.
    
    

Jun 18, 2014
   Write a Cobbler panel to add/mod a file in ~/.shoes/federales that 
   contains the url to download from. That way it can be changed if someone
   does something better or there's a better site. 
   in ~/.shoes/federales/package are several files and subdirs (tmp)
     selector.url - one line, the url of the cgi to list packages
     download.url - one line, the url path to the directory   Default:
        http://shoes.mvmanila.com/public/federales/pkg.rb (a cgi script)
   
   New packager: GUI has a top level layout of 3 stacked 'panels'
   Menu, select/action and status. Top panel buttons = 'exit', 'get options'
   will download from the cgi, parse  and build the selection panel offering
   download buttons for each arch/platform.
   
   Minimal options - just choice of OS. No video. No download if needed.
   Unlike the 3.0/3.1 packager I'm keeping track of the os/arch and it 
   will be added to the created '.run' files. 
   



=== older stuff ===

Almost as important as proper icons ;^) is a proper version naming scheme. 
Although I have said app/script packaging with embedded shoes is not likely
to ever work again, I do want a versioning scheme that would work better 
if I ever did get around to fixing that.  I've had years to think about
such a scheme and some recent battle scars with gnu triplets. 

So, package file names will have the following structure 
  shoes-{cute-name}-{gr}{rn}-{arch}.{ext}
  
  {cute-name} is 'federales'. The next C release (3.3) is 'walkabout'
  {gr} is 'gtk2' or 'gtk3' - the graphics frameworks needed to be installed or 
     included. 'swt' or 'qt5'for shoes4?
  {rn} is shoes release type and release number. See below.
  {arch} 'x86_64', 'i386', 'arme6abhif' 'i586', etc. 'JRuby'?
  {ext} 'deb', 'rpm', 'exe', 'tgz', 'jar'. The container format.

{arch} is taken from what gcc and/or ruby reports (RUBY_PLATFORM?) 
it could be one of gnu's triplets with an extra hypthen. The important 
part in my mind is that it's the last freeform string before the period
and there is fixed number of '-' to get there.  Think split('-'). 

{rn} is release number. r1540 would be something Red Shoes might produce.
but a1 or b3 (alpha and beta) wouldn't be out of place.

Of course it all depends on convincing fpm to package that way. 
  
2014-01-15 Switch to better version idenfifiers. Begin packaging Shoes
--> Restore the git based version number to the rakefile when packaging
    but not when just building - I build a lot and checking git takes too
    long, (even longer when 'the webs' is down).
--> Figure out fpm and how to do what I want.
--> Package the source dist? 
--> install gkt2 in x86_64 chroot. Build. Package. Try including the GTK2
--> install gkt2 in i386 chroot. Build. Package
--> install gtk2 in rasp. chroot. Build. Package
--> install gtk2 for windows. Build. Package (include Gtk2 of course)


--- older ---

  For pack.rb: separate the Module pack and the shoes gui into two files.
    lib/shoes/packfed.rb and lib/shoes/packgui.rb - Removed references/code for Shy.
    Kept the original pack.rb which mixes it all up, for reference if nothing else

  FIXED: The 1.9.3 issue was Ruby parsing. I had a comma before do in a list of
   hash arguments.  "... linux.. :a =>'A', :b =>'B',  do". That freaking comma!!

   After refactoring packgui, I've screwed up the Module/class things
   undefined method 'build_thread' for (Shoes::App "Shoes")
   
   App.yaml could be part of a better system (or more docs?)

Shoes Users:

  Package An app with gem and shoes dependecies 
   --> .deb, rpm, whatever the Shoes4 folks use
   --> options for arch/os (armel, ia32 vs X64, ...
       and the ability handle cross compiled shoes


  

