# Still a proof of concept since Ruby 2.0 and Gtk3 aren't yet viable
# for Shoes.  It's a teachable moment! Yeah! That's the ticket
#
# Remember, Math is Hard. This only mostly confusing.
#
# Manually set things to what you want to build with & for.
# RbConfig only describes the host system, not the target system
#ENV['DEBUG'] = "true" # turns on the tracing log
#ENV['GTK'] = "gtk+-3.0" # pick this or "gtk+-2.0"
ENV['GTK'] = "gtk+-2.0"
ENV['GDB'] = "SureYouBetcha" # compile -g,  strip symbols when nil
# Where does ruby code live?
EXT_RUBY = "/home/cross/armv6-pi/"
# Specify where the Target system binaries live. 
# Trailing slash is important.
TGT_SYS_DIR = "/home/cross/armv6-pi/"

# Set appropriately
ARM_PREFIX= "arm-linux-gnueabihf-"
CC = "#{ARM_PREFIX}gcc"

# pkg-config paths to .pc files [I copied /usr and /lib from Raspbian mem
# cardto /home/cross/armv6-pi/]. 
# NOTE: Ruby should be cross compiled but can be copied in some situations

pkgcairo ="#{TGT_SYS_DIR}usr/lib/arm-linux-gnueabihf/pkgconfig/cairo.pc"
pkgpango="#{TGT_SYS_DIR}usr/lib/arm-linux-gnueabihf/pkgconfig/pango.pc"
pkgruby ="#{TGT_SYS_DIR}/lib/pkgconfig/ruby-1.9.pc"
pkggtk ="#{TGT_SYS_DIR}usr/lib/arm-linux-gnueabihf/pkgconfig/gtk+-2.0.pc" 
CURL_LDFLAGS = "-L#{TGT_SYS_DIR}usr/lib/arm-linux-gnueabihf -lcurl"


file_list = %w{shoes/native/gtk.c shoes/http/curl.c} + ["shoes/*.c"]
SRC = FileList[*file_list]
OBJ = SRC.map do |x|
  x.gsub(/\.\w+$/, '.o')
end

ADD_DLL = []

# Hand code for your situation and Ruby purity. Mine is
# "Church of Whatever Works That I Can Understand"
def xfixip(path)
   path.gsub!(/-I\/usr\//, "-I#{TGT_SYS_DIR}usr/")
   path.gsub!(/x86_64-linux-gnu/,"arm-linux-gnueabihf")
   return path
end

def xfixrvmp(path)
  # This is what happens when you don't cross compile ruby properly
  # like I told you to do. 
  #path.gsub!(/-I\/home\/ccoupe\/\.rvm/, "-I#{TGT_SYS_DIR}rvm")
  return path
end

#  fix up the -L paths for rvm ruby. Undo when not using an rvm ruby
def xfixrvml(path)
  #path.gsub!(/-L\/home\/ccoupe\/\.rvm/, "-L#{TGT_SYS_DIR}rvm")
  return path
end

# fixup the -L paths for gtk and other libs
def xfixil(path) 
  path.gsub!(/-L\/usr\/lib/, "-L#{TGT_SYS_DIR}usr/lib")
  return path
end

# Target environment
CAIRO_CFLAGS = xfixip(`pkg-config --cflags "#{pkgcairo}"`.strip)
CAIRO_LIB = `pkg-config --libs "#{pkgcairo}"`.strip.gsub('/usr/', "#{TGT_SYS_DIR}")
PANGO_CFLAGS = xfixip(`pkg-config --cflags "#{pkgpango}"`.strip)
PANGO_LIB = ENV['PANGO_LIB'] ? "-L#{ENV['PANGO_LIB']}" : `pkg-config --libs pango`.strip

png_lib = 'png'

if ENV['DEBUG'] || ENV['GDB']
  LINUX_CFLAGS = " -g -O0"
else
  LINUX_CFLAGS = " -O -Wall"
end
LINUX_CFLAGS << " -DSHOES_GTK" 
LINUX_CFLAGS << " -DGTK3" unless ENV['GTK'] == 'gtk+-2.0'
LINUX_CFLAGS << " -I#{TGT_SYS_DIR}usr/include "
LINUX_CFLAGS << xfixrvmp(`pkg-config --cflags "#{pkgruby}"`.strip)+" "
LINUX_CFLAGS << xfixip(`pkg-config --cflags "#{pkggtk}"`.strip)+" "
LINUX_CFLAGS << " #{CAIRO_CFLAGS} #{PANGO_CFLAGS}"
LINUX_CFLAGS << " -I#{TGT_SYS_DIR}usr/include/arm-linux-gnueabihf" 

LINUX_LIB_NAMES = %W[ungif jpeg]

DLEXT = "so"
LINUX_LDFLAGS = "-fPIC -L#{TGT_SYS_DIR}usr/lib "
GTK_LDFLAGS = xfixil(`pkg-config --libs "#{pkggtk}"`.strip)
LINUX_LDFLAGS << "#{GTK_LDFLAGS} "
# use the ruby link info
RUBY_LDFLAGS = "-rdynamic -Wl,-export-dynamic "
RUBY_LDFLAGS << "-L/home/cross/armv6-pi/lib -lruby "
#RUBY_LDFLAGS << "-L#{TGT_SYS_DIR}usr/lib/arm-linux-gnueabihf -lrt -ldl -lcrypt -lm "
#LINUX_LDFLAGS << " #{RUBY_LDFLAGS}"
#LINUX_LDFLAGS << " #{CURL_LDFLAGS}"
#LINUX_LDFLAGS << " -L./#{TGT_DIR}"

# Beware 
LINUX_LIBS = " #{RUBY_LDFLAGS}  #{CAIRO_LIB} #{PANGO_LIB} #{CURL_LDFLAGS}"
#LINUX_LIBS << LINUX_LIB_NAMES.map { |x| "-l#{x}" }.join(' ')


