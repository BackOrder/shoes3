dies at/in line 71 
        out[l2] = run[sums[0]];

#0  0x00007ffff7b8d62e in box_blur (in=0x7fffede02010 "", 
    out=0x7fffedd0d010 "", stride=2000, place=0x7fffffff71a0, edge1=28, 
    edge2=28, run=0x133e4f0 "", dir=1) at shoes/effects.c:71
#1  0x00007ffff7b8dc94 in shoes_gaussian_blur_filter (cr=0x124e340, 
    attr=8379240, place=0x7fffffff71a0) at shoes/effects.c:179
#2  0x00007ffff7b85df9 in shoes_add_effect (self=8379560, name=21576, 
    attr=8379240) at shoes/canvas.c:549
#3  0x00007ffff7b85eca in shoes_canvas_blur (argc=1, argv=0x7ffff7ed61d8, 
    self=8379560) at shoes/canvas.c:561
    
(gdb) p out[l2]
$6 = 0 '\000'
(gdb) p sums[0]
$7 = 4294967295
(gdb) p sums[1]
$8 = 0
(gdb) p sums[2]
$9 = 0

obviously sums[0] is way too big for a char[index] 4GB? so what 32/64 bit
difference caused that? It's not obvious to me what the code is doing
but if you go up the stack to the caller this function has been called
a lot before it went of the end of uint32_t


