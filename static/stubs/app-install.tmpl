# installs #{SHYFILE} user specified directory
require 'shoes/shy'
require 'fileutils'
require 'rubygems/package'
require 'shoes/winject'
# to test this without going thru packaging
# create folder 'foo' for example
# copy a shy built from Shoes to foo
# copy this script there. Edit and set the shyname var to the avs path
# of the shy in foo
# cd into foo and invoke 'shoes this-script'
Shoes.app do
  shyname = File.basename("#{SHYFILE}")
  #shyname = File.basename("/home/ccoupe/Projects/unshy/ytm.shy")
  curloc = Dir.getwd()    # most likely to be a temp dir somewhere
  shypath = File.join(curloc,shyname)
  shyfile = File.open(shypath,'rb')
  hdr = Shy.__hdr__(shyfile)
  stack do
    para "#{hdr.name} version #{hdr.version} from #{hdr.creator}, requests that \
you pick a folder to put it's files in."
    flow do
      @dirfld = edit_line :width => 400 
      @dirfld.text = "#{ENV['HOME']}/Documents/#{File.basename(shyfile,'.shy')}"
      button "Select..." do
        @dirfld.text = ask_save_folder()
      end
    end
    if RUBY_PLATFORM  =~ /linux/
      para "Categories list. Separate with ';'. Must end with ';'"
      @catsfld = edit_line
    end
    flow do
      button "Install #{hdr.name}" do
        mkdir_p @dirfld.text
        install_top = curloc
        app = ''
        Dir.chdir @dirfld.text do
          extract shyfile
          case RUBY_PLATFORM
          when /mingw/ 
              install_windows hdr
          when /darwin/
              install_osx hdr
          else # assume linux
              iconpath = Dir.glob("#{install_top}/*.png")[0]
              app = install_linux hdr, @dirfld.text, iconpath, @catsfld.text
          end
          if @run_it.checked?
            str = File.open(app).read
            eval(str, TOPLEVEL_BINDING)
          elsif confirm("Quit") 
            quit
          end
        end
      end     
      flow { @run_it = check; para "Start #{hdr.name}" }
      @run_it.checked = true
    end
  end
  
  def install_windows hdr
  end
  
  def install_osx hdr
  end
  
  def install_linux  hdr, installdir, iconpath, cats
    # Are in the directory the user selected, installdir
    # create a menu using ? ?
    hdir = ENV['HOME']
    cdir = Dir.getwd()
    FileUtils.cp iconpath, cdir
    dtname = hdr.launch.gsub(/\.rb$/,'.desktop')
    File.open(dtname,'w') do |f|
        f << "[Desktop Entry]\n"
        f << "Name=#{hdr.name}\n"
        f << "Exec=#{hdir}/.shoes/federales/shoes #{installdir}/#{hdr.launch}\n"
        f << "StartupNotify=true\n"
        f << "Terminal=false\n"
        f << "Type=Application\n"
        f << "Comment=#{hdr.creator}\n"
        f << "Icon=#{cdir}/#{File.basename(iconpath)}\n"
        f << "Categories=Other;Applications;#{cats}\n"
    end
    if File.exists? '.local/share/Applications' 
      FileUtils.cp dtname, '.local/share/Applications' 
    end
    `gksudo -D #{dtname} cp #{dtname} /usr/share/applications`
    return "#{installdir}/#{hdr.launch}"
  end
 
  def extract opened_file
    Gem::Package::TarReader.new( Zlib::GzipReader.new(opened_file)) do |tar|
      tar.each do |entry|
        dest = entry.full_name
	    if entry.directory?
	      FileUtils.rm_rf dest unless File.directory? dest
	      FileUtils.mkdir_p dest, :mode => entry.header.mode, :verbose => false
	    elsif entry.file?
	      FileUtils.rm_rf dest unless File.file? dest
	      File.open dest, "wb" do |f|
	        f.print entry.read
	       end
	       FileUtils.chmod entry.header.mode, dest, :verbose => false
	    elsif entry.header.typeflag == '2' #Symlink!
	      alert "Cannot convert Symlinks. Contact #{hdr.creator}"
	    end
      end
    end
  end
end
